{
  "id" : "recursion.cons.concat.Concat",
  "name" : "Concat",
  "tabName" : "Concat",
  "defaultSourceFiles" : {
    "Java" : {
      "name" : "Concat",
      "body" : "RecList concat(RecList seq1, RecList seq2) {\n}\n",
      "template" : "$package   import plm.universe.bat.BatTest; import plm.universe.cons.ConsEntity; import plm.universe.cons.RecList;  public class Concat extends ConsEntity { \t@Override \tpublic void run(BatTest t) { \t\tRecList parameter1 = RecList.fromArray( (int[]) t.getParameter(0) ); \t\tRecList parameter2 = RecList.fromArray( (int[]) t.getParameter(1) ); \t\tt.setResult( concat( parameter1, parameter2 ) ); \t}  $body } ",
      "offset" : 1,
      "correction" : "$package \n\nimport plm.universe.bat.BatTest;\nimport plm.universe.cons.ConsEntity;\nimport plm.universe.cons.RecList;\n\npublic class Concat extends ConsEntity {\n\n\t@Override\n\tpublic void run(BatTest t) {\n\t\tRecList parameter1 = RecList.fromArray( (int[]) t.getParameter(0) );\n\t\tRecList parameter2 = RecList.fromArray( (int[]) t.getParameter(1) );\n\t\tt.setResult( concat( parameter1, parameter2 ) );\n\t}\n\n\t/* BEGIN TEMPLATE */\n\tRecList concat(RecList seq1, RecList seq2) {\n\t\t/* BEGIN SOLUTION */\n\t\t\n\t\tRecList A = null;\n\t\tRecList B = seq1;\n\t\twhile (B != null) {\n\t\t\tA = new RecList(B.head, A);\n\t\t\tB = B.tail;\n\t\t}\n\t\t\n\t\tB = seq2;\n\t\twhile (A != null) {\n\t\t\tB = new RecList(A.head, B);\n\t\t\tA = A.tail;\n\t\t}\n\t\treturn B;\n\t\t/* END SOLUTION */\n\t}\n\t/* END TEMPLATE */\n}\n",
      "error" : "Error"
    },
    "Scala" : {
      "name" : "Concat",
      "body" : "def concat(l1:List[Int], l2:List[Int]): List[Int] = {\n}\n",
      "template" : "$package \n\nimport plm.universe.bat.BatTest\nimport plm.universe.cons.RecList\nimport plm.universe.cons.ConsEntity\n\nclass Concat extends ConsEntity {\n  override def run(t: BatTest) {\n    val parameter1: List[Int] = RecList.fromArraytoScalaList(t.getParameter(0).asInstanceOf[Array[Int]])\n    val parameter2: List[Int] = RecList.fromArraytoScalaList(t.getParameter(1).asInstanceOf[Array[Int]])  \n    t.setResult( concat(parameter1, parameter2) )\n  }\n\n$body\n}\n",
      "offset" : 12,
      "correction" : "$package \n\nimport plm.universe.bat.BatTest\nimport plm.universe.cons.RecList\nimport plm.universe.cons.ConsEntity\n\nclass Concat extends ConsEntity {\n\n  override def run(t: BatTest) {\n    val parameter1: List[Int] = RecList.fromArraytoScalaList(t.getParameter(0).asInstanceOf[Array[Int]])\n    val parameter2: List[Int] = RecList.fromArraytoScalaList(t.getParameter(1).asInstanceOf[Array[Int]])  \n    t.setResult( concat(parameter1, parameter2) )\n  }\n\n  /* BEGIN TEMPLATE */\n  def concat(l1:List[Int], l2:List[Int]): List[Int] = {\n  /* BEGIN SOLUTION */\n    reverse_helper(  reverse_helper(l1, Nil), l2  )\n  }\n  def reverse_helper(todo:List[Int], done:List[Int]):List[Int] = {\n    if (todo == Nil) {\n      done\n    } else {\n      reverse_helper(todo.tail, todo.head::done)\n    }\n  /* END SOLUTION */\n  }\n  /* END TEMPLATE */\n}\n",
      "error" : "Error"
    },
    "Python" : {
      "name" : "Concat",
      "body" : "def reverse(list):\n",
      "template" : "$body\n",
      "offset" : 1,
      "correction" : "# BEGIN TEMPLATE\ndef reverse(list):\n# BEGIN SOLUTION\n  A = None\n  B = list\n  while B != None:\n    A = new RecList(B.head, A)\n    B = B.tail\n  return A\n# END SOLUTION\n# END TEMPLATE\n",
      "error" : "Error"
    }
  },

  "initialWorlds" : [ {
    "type" : "plm.universe.cons.ConsWorld",
    "@jsonId" : 1,
    "name" : "concat",
    "batTests" : [ {
      "funName" : "concat",
      "visible" : true,
      "parameters" : [ [ "[I", [ 1, 2, 3 ] ], [ "[I", [ 11, 12, 13 ] ] ],
      "result" : null,
      "correct" : false,
      "answered" : false,
      "objectiveTest" : false
    }, {
      "funName" : "concat",
      "visible" : true,
      "parameters" : [ [ "[I", [ 1, 2, 3 ] ], [ "[I", [ 1, 1, 1 ] ] ],
      "result" : null,
      "correct" : false,
      "answered" : false,
      "objectiveTest" : false
    }, {
      "funName" : "concat",
      "visible" : true,
      "parameters" : [ [ "[I", [ 1, 2, 3 ] ], [ "[I", [ ] ] ],
      "result" : null,
      "correct" : false,
      "answered" : false,
      "objectiveTest" : false
    }, {
      "funName" : "concat",
      "visible" : true,
      "parameters" : [ [ "[I", [ 1, 2, 1, 3 ] ], [ "[I", [ 64, 36 ] ] ],
      "result" : null,
      "correct" : false,
      "answered" : false,
      "objectiveTest" : false
    }, {
      "funName" : "concat",
      "visible" : false,
      "parameters" : [ [ "[I", [ 2, 4, 6, 8, 10 ] ], [ "[I", [ 72, 35 ] ] ],
      "result" : null,
      "correct" : false,
      "answered" : false,
      "objectiveTest" : false
    }, {
      "funName" : "concat",
      "visible" : false,
      "parameters" : [ [ "[I", [ ] ], [ "[I", [ 3, 5, 8 ] ] ],
      "result" : null,
      "correct" : false,
      "answered" : false,
      "objectiveTest" : false
    }, {
      "funName" : "concat",
      "visible" : false,
      "parameters" : [ [ "[I", [ ] ], [ "[I", [ ] ] ],
      "result" : null,
      "correct" : false,
      "answered" : false,
      "objectiveTest" : false
    }, {
      "funName" : "concat",
      "visible" : false,
      "parameters" : [ [ "[I", [ -2, -4, -6, -8, -10 ] ], [ "[I", [ 2, 4, 6, 8, 10 ] ] ],
      "result" : null,
      "correct" : false,
      "answered" : false,
      "objectiveTest" : false
    } ],
    "entities" : [ {
      "type" : "plm.universe.cons.ConsEntity",
      "name" : "concat",
      "world" : 1,
      "inited" : false
    } ],
    "steps" : [ ],
    "about" : "<!-- Please don't translate this file but l10n/missions/plm.pot (see https://github.com/oster/PLM/wiki/Working-on-translations) -->\n<h1>ConsWorld</h1>\n\n<p>This world allows you to experiment with the recursive lists, as\nthey were first introduced in Lisp. It is very similar to the BatWorld,\nbut you are supposed to write recursive functions working on \nrecursive strings. Since Java does not provide\nsuch a construct natively, the ConsWorld defines recursive lists of\ntype <code>RecList</code>.\n</p>\n\n<p>Any given such list is either the empty list \n(noted <code>null</code>),\nor an integer followed by a list. If a list is not empty, you can\nretrieve its first integer with <code>list.head</code> and the list\ncontaining its other parameters with <code>list.tail</code>. Of\ncourse, the empty list has no head nor the tail, so trying to access\nthese elements will result in an (unpleasant) error message.</p>\n\n<p>To build your own list, you need to concatenate a head and a tail\nas follows: \n<code>cons(head, tail)</code>\n</p>\n\n<p>So, in summary, you can solve every exercises of this lesson with\nthe following constructs.</p>\n\n<ul>\n<li><b>The empty list:</b> <pre>null</pre></li>\n<li><b>Get the first element of <code>l</code></b> <pre>l.head</pre></li>\n<li><b>Get the rest of the list</b>, when the first element is removed: <pre>l.tail</pre></li>\n<li><b>Build a list</b> from a <code>value</code> and a <code>list</code>: \n<pre>cons(value, list)</pre>\n</li>\n</ul>\n",
    "parameters" : null
  } ],
  "answerWorlds" : [ {
    "type" : "plm.universe.cons.ConsWorld",
    "@jsonId" : 2,
    "name" : "concat",
    "batTests" : [ {
      "funName" : "concat",
      "visible" : true,
      "parameters" : [ [ "[I", [ 1, 2, 3 ] ], [ "[I", [ 11, 12, 13 ] ] ],
      "result" : {
        "type" : "plm.universe.cons.RecList",
        "list" : [ 1, 2, 3, 11, 12, 13 ]
      },
      "correct" : false,
      "answered" : true,
      "objectiveTest" : false
    }, {
      "funName" : "concat",
      "visible" : true,
      "parameters" : [ [ "[I", [ 1, 2, 3 ] ], [ "[I", [ 1, 1, 1 ] ] ],
      "result" : {
        "type" : "plm.universe.cons.RecList",
        "list" : [ 1, 2, 3, 1, 1, 1 ]
      },
      "correct" : false,
      "answered" : true,
      "objectiveTest" : false
    }, {
      "funName" : "concat",
      "visible" : true,
      "parameters" : [ [ "[I", [ 1, 2, 3 ] ], [ "[I", [ ] ] ],
      "result" : {
        "type" : "plm.universe.cons.RecList",
        "list" : [ 1, 2, 3 ]
      },
      "correct" : false,
      "answered" : true,
      "objectiveTest" : false
    }, {
      "funName" : "concat",
      "visible" : true,
      "parameters" : [ [ "[I", [ 1, 2, 1, 3 ] ], [ "[I", [ 64, 36 ] ] ],
      "result" : {
        "type" : "plm.universe.cons.RecList",
        "list" : [ 1, 2, 1, 3, 64, 36 ]
      },
      "correct" : false,
      "answered" : true,
      "objectiveTest" : false
    }, {
      "funName" : "concat",
      "visible" : false,
      "parameters" : [ [ "[I", [ 2, 4, 6, 8, 10 ] ], [ "[I", [ 72, 35 ] ] ],
      "result" : {
        "type" : "plm.universe.cons.RecList",
        "list" : [ 2, 4, 6, 8, 10, 72, 35 ]
      },
      "correct" : false,
      "answered" : true,
      "objectiveTest" : false
    }, {
      "funName" : "concat",
      "visible" : false,
      "parameters" : [ [ "[I", [ ] ], [ "[I", [ 3, 5, 8 ] ] ],
      "result" : {
        "type" : "plm.universe.cons.RecList",
        "list" : [ 3, 5, 8 ]
      },
      "correct" : false,
      "answered" : true,
      "objectiveTest" : false
    }, {
      "funName" : "concat",
      "visible" : false,
      "parameters" : [ [ "[I", [ ] ], [ "[I", [ ] ] ],
      "result" : null,
      "correct" : false,
      "answered" : true,
      "objectiveTest" : false
    }, {
      "funName" : "concat",
      "visible" : false,
      "parameters" : [ [ "[I", [ -2, -4, -6, -8, -10 ] ], [ "[I", [ 2, 4, 6, 8, 10 ] ] ],
      "result" : {
        "type" : "plm.universe.cons.RecList",
        "list" : [ -2, -4, -6, -8, -10, 2, 4, 6, 8, 10 ]
      },
      "correct" : false,
      "answered" : true,
      "objectiveTest" : false
    } ],
    "entities" : [ {
      "type" : "plm.universe.cons.ConsEntity",
      "name" : "concat",
      "world" : 2,
      "inited" : true
    } ],
    "steps" : [ [ {
      "type" : "plm.universe.bat.operations.SetResult",
      "@jsonId" : 3,
      "index" : 0,
      "result" : {
        "type" : "plm.universe.cons.RecList",
        "list" : [ 1, 2, 3, 11, 12, 13 ]
      },
      "name" : "setResult"
    } ], [ {
      "type" : "plm.universe.bat.operations.SetResult",
      "@jsonId" : 4,
      "index" : 1,
      "result" : {
        "type" : "plm.universe.cons.RecList",
        "list" : [ 1, 2, 3, 1, 1, 1 ]
      },
      "name" : "setResult"
    } ], [ {
      "type" : "plm.universe.bat.operations.SetResult",
      "@jsonId" : 5,
      "index" : 2,
      "result" : {
        "type" : "plm.universe.cons.RecList",
        "list" : [ 1, 2, 3 ]
      },
      "name" : "setResult"
    } ], [ {
      "type" : "plm.universe.bat.operations.SetResult",
      "@jsonId" : 6,
      "index" : 3,
      "result" : {
        "type" : "plm.universe.cons.RecList",
        "list" : [ 1, 2, 1, 3, 64, 36 ]
      },
      "name" : "setResult"
    } ], [ {
      "type" : "plm.universe.bat.operations.SetResult",
      "@jsonId" : 7,
      "index" : 4,
      "result" : {
        "type" : "plm.universe.cons.RecList",
        "list" : [ 2, 4, 6, 8, 10, 72, 35 ]
      },
      "name" : "setResult"
    } ], [ {
      "type" : "plm.universe.bat.operations.SetResult",
      "@jsonId" : 8,
      "index" : 5,
      "result" : {
        "type" : "plm.universe.cons.RecList",
        "list" : [ 3, 5, 8 ]
      },
      "name" : "setResult"
    } ], [ {
      "type" : "plm.universe.bat.operations.SetResult",
      "@jsonId" : 9,
      "index" : 6,
      "result" : null,
      "name" : "setResult"
    } ], [ {
      "type" : "plm.universe.bat.operations.SetResult",
      "@jsonId" : 10,
      "index" : 7,
      "result" : {
        "type" : "plm.universe.cons.RecList",
        "list" : [ -2, -4, -6, -8, -10, 2, 4, 6, 8, 10 ]
      },
      "name" : "setResult"
    } ] ],
    "about" : "<!-- Please don't translate this file but l10n/missions/plm.pot (see https://github.com/oster/PLM/wiki/Working-on-translations) -->\n<h1>ConsWorld</h1>\n\n<p>This world allows you to experiment with the recursive lists, as\nthey were first introduced in Lisp. It is very similar to the BatWorld,\nbut you are supposed to write recursive functions working on \nrecursive strings. Since Java does not provide\nsuch a construct natively, the ConsWorld defines recursive lists of\ntype <code>RecList</code>.\n</p>\n\n<p>Any given such list is either the empty list \n(noted <code>null</code>),\nor an integer followed by a list. If a list is not empty, you can\nretrieve its first integer with <code>list.head</code> and the list\ncontaining its other parameters with <code>list.tail</code>. Of\ncourse, the empty list has no head nor the tail, so trying to access\nthese elements will result in an (unpleasant) error message.</p>\n\n<p>To build your own list, you need to concatenate a head and a tail\nas follows: \n<code>cons(head, tail)</code>\n</p>\n\n<p>So, in summary, you can solve every exercises of this lesson with\nthe following constructs.</p>\n\n<ul>\n<li><b>The empty list:</b> <pre>null</pre></li>\n<li><b>Get the first element of <code>l</code></b> <pre>l.head</pre></li>\n<li><b>Get the rest of the list</b>, when the first element is removed: <pre>l.tail</pre></li>\n<li><b>Build a list</b> from a <code>value</code> and a <code>list</code>: \n<pre>cons(value, list)</pre>\n</li>\n</ul>\n",
    "parameters" : null
  } ] 
}