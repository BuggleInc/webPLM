{
  "id" : "recursion.cons.plusone.PlusOne",
  "name" : "PlusOne",
  "tabName" : "PlusOne",
  "defaultSourceFiles" : {
    "Java" : {
      "name" : "PlusOne",
      "body" : "RecList plusOne(RecList seq) {\n}\n",
      "template" : "$package   import plm.universe.bat.BatTest; import plm.universe.cons.ConsEntity; import plm.universe.cons.RecList;  public class PlusOne extends ConsEntity { \t@Override \tpublic void run(BatTest t) { \t\tRecList parameter = RecList.fromArray( (int[]) t.getParameter(0) ); \t\tt.setResult( plusOne( parameter ) ); \t}  $body } ",
      "offset" : 1,
      "correction" : "$package \n\nimport plm.universe.bat.BatTest;\nimport plm.universe.cons.ConsEntity;\nimport plm.universe.cons.RecList;\n\npublic class PlusOne extends ConsEntity {\n\n\t@Override\n\tpublic void run(BatTest t) {\n\t\tRecList parameter = RecList.fromArray( (int[]) t.getParameter(0) );\n\t\tt.setResult( plusOne( parameter ) );\n\t}\n\n\t/* BEGIN TEMPLATE */\n\tRecList plusOne(RecList seq) {\n\t\t/* BEGIN SOLUTION */\n\t\tif (seq == null)\n\t\t\treturn null;\n\t\treturn new RecList(seq.head+1, plusOne(seq.tail));\n\t\t/* END SOLUTION */\n\t}\n\t/* END TEMPLATE */\n}\n",
      "error" : "Error"
    },
    "Python" : {
      "name" : "PlusOne",
      "body" : "def plusOne(list):\n",
      "template" : "$body\n",
      "offset" : 1,
      "correction" : "# BEGIN TEMPLATE\ndef plusOne(list):\n# BEGIN SOLUTION\n  if list.tail == None:\n    return None\n  return new RecList(list.head+1, plusOne(list.tail))\n# END SOLUTION\n# END TEMPLATE\n",
      "error" : "Error"
    }
  },
  "helps" : {
    "pt" : "<!-- Please don't translate this file but l10n/missions/plm.pot (see https://github.com/oster/PLM/wiki/Working-on-translations) -->\n<h1>ConsWorld</h1>\n\n<p>This world allows you to experiment with the recursive lists, as\nthey were first introduced in Lisp. It is very similar to the BatWorld,\nbut you are supposed to write recursive functions working on \n[!python|java]recursive strings. Since [!thelang] does not provide\nsuch a construct natively, the ConsWorld defines recursive lists of\ntype <code>RecList</code>.[/!]\n[!scala]lists of integers (<code>List[Int]</code>).[/!]</p>\n\n<p>Any given such list is either the empty list \n(noted <code>[!scala]Nil[/!][!java]null[/!][!python]None[/!]</code>),\nor an integer followed by a list. If a list is not empty, you can\nretrieve its first integer with <code>list.head</code> and the list\ncontaining its other parameters with <code>list.tail</code>. Of\ncourse, the empty list has no head nor the tail, so trying to access\nthese elements will result in an (unpleasant) error message.</p>\n\n<p>To build your own list, you need to concatenate a head and a tail\nas follows: \n[!java|python]<code>cons(head, tail)</code>[/!]\n[!scala]<code>head::tail</code> Note that <code>::</code> is a generic\noperator in Scala to build lists.[/!]</p>\n\n<p>So, in summary, you can solve every exercises of this lesson with\nthe following constructs.</p>\n\n<ul>\n<li><b>The empty list:</b> <pre>[!java]null[/!][!scala]Nil[/!][!python]None[/!]</pre></li>\n<li><b>Get the first element of <code>l</code></b> <pre>l.head</pre></li>\n<li><b>Get the rest of the list</b>, when the first element is removed: <pre>l.tail</pre></li>\n<li><b>Build a list</b> from a <code>value</code> and a <code>list</code>: \n[!java|python]<pre>cons(value, list)</pre>[/!]\n[!scala]<pre>value::list</pre>[/!]</li>\n</ul>\n",
    "en" : "<!-- Please don't translate this file but l10n/missions/plm.pot (see https://github.com/oster/PLM/wiki/Working-on-translations) -->\n<h1>ConsWorld</h1>\n\n<p>This world allows you to experiment with the recursive lists, as\nthey were first introduced in Lisp. It is very similar to the BatWorld,\nbut you are supposed to write recursive functions working on \n[!python|java]recursive strings. Since [!thelang] does not provide\nsuch a construct natively, the ConsWorld defines recursive lists of\ntype <code>RecList</code>.[/!]\n[!scala]lists of integers (<code>List[Int]</code>).[/!]</p>\n\n<p>Any given such list is either the empty list \n(noted <code>[!scala]Nil[/!][!java]null[/!][!python]None[/!]</code>),\nor an integer followed by a list. If a list is not empty, you can\nretrieve its first integer with <code>list.head</code> and the list\ncontaining its other parameters with <code>list.tail</code>. Of\ncourse, the empty list has no head nor the tail, so trying to access\nthese elements will result in an (unpleasant) error message.</p>\n\n<p>To build your own list, you need to concatenate a head and a tail\nas follows: \n[!java|python]<code>cons(head, tail)</code>[/!]\n[!scala]<code>head::tail</code> Note that <code>::</code> is a generic\noperator in Scala to build lists.[/!]</p>\n\n<p>So, in summary, you can solve every exercises of this lesson with\nthe following constructs.</p>\n\n<ul>\n<li><b>The empty list:</b> <pre>[!java]null[/!][!scala]Nil[/!][!python]None[/!]</pre></li>\n<li><b>Get the first element of <code>l</code></b> <pre>l.head</pre></li>\n<li><b>Get the rest of the list</b>, when the first element is removed: <pre>l.tail</pre></li>\n<li><b>Build a list</b> from a <code>value</code> and a <code>list</code>: \n[!java|python]<pre>cons(value, list)</pre>[/!]\n[!scala]<pre>value::list</pre>[/!]</li>\n</ul>\n",
    "fr" : "\n<!-- Please don't translate this file but l10n/missions/plm.pot (see https://github.com/oster/PLM/wiki/Working-on-translations) -->\n<h1>Monde des listes récursives</h1>\n\n<p>Ce monde vous permettra d'expérimenter avec les listes récursives, telles\nqu'elles ont été définies en Lisp à l'origine. Ce monde est assez similaire\nau BatWorld, mais vous êtes supposé écrire des fonctions récursives agissant\nsur des [!python|java]listes récursives. Comme [!thelang] ne propose rien de\ntel en natif, ce monde défini un nouveau type nommé <code>RecList</code>\npour cela.[/!] [!scala]listes d'entiers (<code>List[Int]</code>).[/!]</p>\n\n<p>Une telle liste peut être soit la liste vide (notée\n<code>[!scala]Nil[/!][!java]null[/!][!python]None[/!]</code>), soit un\nentier suivi d'une liste. Si une liste n'est pas vide, vous pouvez retrouver\nson premier entier avec <code>list.head</code>. On dit qu'on extrait alors\nla tête de la liste.La liste contenant ses autres éléments (tous sauf la\ntête) peut être retrouvée avec <code>list.tail</code>. On dit qu'on extrait\nla suite de la liste.Bien entendu, la liste vide n'a ni tête ni suite, et\nvous ne devriez pas tenter d'accéder à ces éléments sous peine d'obtenir un\nmessage d'erreur (particulièrement déplaisant).</p>\n\n<p>Pour construire votre propre liste, vous devez concaténer une tête et une\nsuite comme suit : [!java|python]<code>cons(tête, suite)</code>[/!]\n[!scala]<code>tête::suite</code>. Il se trouve que <code>::</code> est un\nopérateur générique du langage Scala pour construire des listes.[/!]</p>\n\n<p>En résumé, vous pouvez résoudre tous les exercices de cette leçon avec les\nconstructions suivantes :</p>\n\n<ul>\n<li><b>La liste vide:</b> <pre>[!java|c]null[/!][!scala]Nil[/!][!python]None[/!]</pre></li>\n<li><b>Obtenir le premier élément de <code>l</code></b> <pre>l.head</pre></li>\n<li><b>Obtenir la suite de la liste</b>, privée de son premier élément: <pre>l.tail</pre></li>\n<li><b>Construire une liste</b> à partir d'une <code>valeur</code> et d'une\n<code>liste</code>: [!java|python]<pre>cons(valeur, liste)</pre>[/!] [!scala]<pre>valeur::liste</pre>[/!]</li>\n</ul>\n"
  },
  "initialWorlds" : [ {
    "type" : "plm.universe.cons.ConsWorld",
    "@jsonId" : 1,
    "name" : "plusOne",
    "batTests" : [ {
      "funName" : "plusOne",
      "visible" : true,
      "parameters" : [ [ "[I", [ 1, 2, 3 ] ] ],
      "result" : null,
      "correct" : false,
      "answered" : false,
      "objectiveTest" : false
    }, {
      "funName" : "plusOne",
      "visible" : true,
      "parameters" : [ [ "[I", [ 1, 1, 1 ] ] ],
      "result" : null,
      "correct" : false,
      "answered" : false,
      "objectiveTest" : false
    }, {
      "funName" : "plusOne",
      "visible" : true,
      "parameters" : [ [ "[I", [ 1, 2, 1, 3 ] ] ],
      "result" : null,
      "correct" : false,
      "answered" : false,
      "objectiveTest" : false
    }, {
      "funName" : "plusOne",
      "visible" : false,
      "parameters" : [ [ "[I", [ 2, 4, 6, 8, 10 ] ] ],
      "result" : null,
      "correct" : false,
      "answered" : false,
      "objectiveTest" : false
    }, {
      "funName" : "plusOne",
      "visible" : false,
      "parameters" : [ [ "[I", [ ] ] ],
      "result" : null,
      "correct" : false,
      "answered" : false,
      "objectiveTest" : false
    }, {
      "funName" : "plusOne",
      "visible" : false,
      "parameters" : [ [ "[I", [ -2, -4, -6, -8, -10 ] ] ],
      "result" : null,
      "correct" : false,
      "answered" : false,
      "objectiveTest" : false
    } ],
    "entities" : [ {
      "type" : "plm.universe.cons.ConsEntity",
      "name" : "plusOne",
      "world" : 1,
      "inited" : false
    } ],
    "steps" : [ ],
    "about" : "<!-- Please don't translate this file but l10n/missions/plm.pot (see https://github.com/oster/PLM/wiki/Working-on-translations) -->\n<h1>ConsWorld</h1>\n\n<p>This world allows you to experiment with the recursive lists, as\nthey were first introduced in Lisp. It is very similar to the BatWorld,\nbut you are supposed to write recursive functions working on \nrecursive strings. Since Java does not provide\nsuch a construct natively, the ConsWorld defines recursive lists of\ntype <code>RecList</code>.\n</p>\n\n<p>Any given such list is either the empty list \n(noted <code>null</code>),\nor an integer followed by a list. If a list is not empty, you can\nretrieve its first integer with <code>list.head</code> and the list\ncontaining its other parameters with <code>list.tail</code>. Of\ncourse, the empty list has no head nor the tail, so trying to access\nthese elements will result in an (unpleasant) error message.</p>\n\n<p>To build your own list, you need to concatenate a head and a tail\nas follows: \n<code>cons(head, tail)</code>\n</p>\n\n<p>So, in summary, you can solve every exercises of this lesson with\nthe following constructs.</p>\n\n<ul>\n<li><b>The empty list:</b> <pre>null</pre></li>\n<li><b>Get the first element of <code>l</code></b> <pre>l.head</pre></li>\n<li><b>Get the rest of the list</b>, when the first element is removed: <pre>l.tail</pre></li>\n<li><b>Build a list</b> from a <code>value</code> and a <code>list</code>: \n<pre>cons(value, list)</pre>\n</li>\n</ul>\n",
    "parameters" : null
  } ],
  "answerWorlds" : [ {
    "type" : "plm.universe.cons.ConsWorld",
    "@jsonId" : 2,
    "name" : "plusOne",
    "batTests" : [ {
      "funName" : "plusOne",
      "visible" : true,
      "parameters" : [ [ "[I", [ 1, 2, 3 ] ] ],
      "result" : {
        "type" : "plm.universe.cons.RecList",
        "list" : [ 2, 3, 4 ]
      },
      "correct" : false,
      "answered" : true,
      "objectiveTest" : false
    }, {
      "funName" : "plusOne",
      "visible" : true,
      "parameters" : [ [ "[I", [ 1, 1, 1 ] ] ],
      "result" : {
        "type" : "plm.universe.cons.RecList",
        "list" : [ 2, 2, 2 ]
      },
      "correct" : false,
      "answered" : true,
      "objectiveTest" : false
    }, {
      "funName" : "plusOne",
      "visible" : true,
      "parameters" : [ [ "[I", [ 1, 2, 1, 3 ] ] ],
      "result" : {
        "type" : "plm.universe.cons.RecList",
        "list" : [ 2, 3, 2, 4 ]
      },
      "correct" : false,
      "answered" : true,
      "objectiveTest" : false
    }, {
      "funName" : "plusOne",
      "visible" : false,
      "parameters" : [ [ "[I", [ 2, 4, 6, 8, 10 ] ] ],
      "result" : {
        "type" : "plm.universe.cons.RecList",
        "list" : [ 3, 5, 7, 9, 11 ]
      },
      "correct" : false,
      "answered" : true,
      "objectiveTest" : false
    }, {
      "funName" : "plusOne",
      "visible" : false,
      "parameters" : [ [ "[I", [ ] ] ],
      "result" : null,
      "correct" : false,
      "answered" : true,
      "objectiveTest" : false
    }, {
      "funName" : "plusOne",
      "visible" : false,
      "parameters" : [ [ "[I", [ -2, -4, -6, -8, -10 ] ] ],
      "result" : {
        "type" : "plm.universe.cons.RecList",
        "list" : [ -1, -3, -5, -7, -9 ]
      },
      "correct" : false,
      "answered" : true,
      "objectiveTest" : false
    } ],
    "entities" : [ {
      "type" : "plm.universe.cons.ConsEntity",
      "name" : "plusOne",
      "world" : 2,
      "inited" : true
    } ],
    "steps" : [ [ {
      "type" : "plm.universe.bat.operations.SetResult",
      "@jsonId" : 3,
      "index" : 0,
      "result" : {
        "type" : "plm.universe.cons.RecList",
        "list" : [ 2, 3, 4 ]
      },
      "name" : "setResult"
    } ], [ {
      "type" : "plm.universe.bat.operations.SetResult",
      "@jsonId" : 4,
      "index" : 1,
      "result" : {
        "type" : "plm.universe.cons.RecList",
        "list" : [ 2, 2, 2 ]
      },
      "name" : "setResult"
    } ], [ {
      "type" : "plm.universe.bat.operations.SetResult",
      "@jsonId" : 5,
      "index" : 2,
      "result" : {
        "type" : "plm.universe.cons.RecList",
        "list" : [ 2, 3, 2, 4 ]
      },
      "name" : "setResult"
    } ], [ {
      "type" : "plm.universe.bat.operations.SetResult",
      "@jsonId" : 6,
      "index" : 3,
      "result" : {
        "type" : "plm.universe.cons.RecList",
        "list" : [ 3, 5, 7, 9, 11 ]
      },
      "name" : "setResult"
    } ], [ {
      "type" : "plm.universe.bat.operations.SetResult",
      "@jsonId" : 7,
      "index" : 4,
      "result" : null,
      "name" : "setResult"
    } ], [ {
      "type" : "plm.universe.bat.operations.SetResult",
      "@jsonId" : 8,
      "index" : 5,
      "result" : {
        "type" : "plm.universe.cons.RecList",
        "list" : [ -1, -3, -5, -7, -9 ]
      },
      "name" : "setResult"
    } ] ],
    "about" : "<!-- Please don't translate this file but l10n/missions/plm.pot (see https://github.com/oster/PLM/wiki/Working-on-translations) -->\n<h1>ConsWorld</h1>\n\n<p>This world allows you to experiment with the recursive lists, as\nthey were first introduced in Lisp. It is very similar to the BatWorld,\nbut you are supposed to write recursive functions working on \nrecursive strings. Since Java does not provide\nsuch a construct natively, the ConsWorld defines recursive lists of\ntype <code>RecList</code>.\n</p>\n\n<p>Any given such list is either the empty list \n(noted <code>null</code>),\nor an integer followed by a list. If a list is not empty, you can\nretrieve its first integer with <code>list.head</code> and the list\ncontaining its other parameters with <code>list.tail</code>. Of\ncourse, the empty list has no head nor the tail, so trying to access\nthese elements will result in an (unpleasant) error message.</p>\n\n<p>To build your own list, you need to concatenate a head and a tail\nas follows: \n<code>cons(head, tail)</code>\n</p>\n\n<p>So, in summary, you can solve every exercises of this lesson with\nthe following constructs.</p>\n\n<ul>\n<li><b>The empty list:</b> <pre>null</pre></li>\n<li><b>Get the first element of <code>l</code></b> <pre>l.head</pre></li>\n<li><b>Get the rest of the list</b>, when the first element is removed: <pre>l.tail</pre></li>\n<li><b>Build a list</b> from a <code>value</code> and a <code>list</code>: \n<pre>cons(value, list)</pre>\n</li>\n</ul>\n",
    "parameters" : null
  } ],
  "instructions" : {
    "pt" : "\n<!-- Please don't translate this file but l10n/missions/plm.pot (see https://github.com/oster/PLM/wiki/Working-on-translations) -->\n<h1>PlusOne</h1>\nDada uma [!scala]List[Int][/!][!java|python]recursive list[/!], retorne uma\nnova lista contendo todos os elementos de seu parâmetro incrementados de um.\n\n<p>Sua solução deve ser linear no tempo.</p>\n",
    "en" : "<!-- Please don't translate this file but l10n/missions/plm.pot (see https://github.com/oster/PLM/wiki/Working-on-translations) -->\n<h1>PlusOne</h1>\nGiven a [!scala]List[Int][/!][!java|python]recursive list[/!], return a new list containing all elements of your parameter incremented by one.\n\n<p>Your solution should be linear in time.</p>\n",
    "fr" : "\n<!-- Please don't translate this file but l10n/missions/plm.pot (see https://github.com/oster/PLM/wiki/Working-on-translations) -->\n<h1>PlusUn</h1>\nÉtant donnée une [!scala]List[Int][/!][!java|python]liste récursive[/!],\nretournez une nouvelle liste dont les éléments sont ceux de votre paramètre,\nincrémentés de un.\n\n<p>Votre solution devrait être linéaire en temps.</p>\n"
  }
}