{
  "id" : "recursion.cons.butnlast.ButNlast",
  "name" : "ButNlast",
  "tabName" : "ButNlast",
  "defaultSourceFiles" : {
    "Java" : {
      "name" : "ButNlast",
      "body" : "RecList butNlast(RecList seq, int n) {\n}\n",
      "template" : "$package   import plm.universe.bat.BatTest; import plm.universe.cons.ConsEntity; import plm.universe.cons.RecList;  public class ButNlast extends ConsEntity { \t@Override \tpublic void run(BatTest t) { \t\tRecList parameter = RecList.fromArray( (int[]) t.getParameter(0) ); \t\tt.setResult( butNlast( parameter, (int) t.getParameter(1) ) ); \t}  $body } ",
      "offset" : 1,
      "correction" : "$package \n\nimport plm.universe.bat.BatTest;\nimport plm.universe.cons.ConsEntity;\nimport plm.universe.cons.RecList;\n\npublic class ButNlast extends ConsEntity {\n\n\t@Override\n\tpublic void run(BatTest t) {\n\t\tRecList parameter = RecList.fromArray( (int[]) t.getParameter(0) );\n\t\tt.setResult( butNlast( parameter, (int) t.getParameter(1) ) );\n\t}\n\n\t/* BEGIN TEMPLATE */\n\tRecList butNlast(RecList seq, int n) {\n\t\t/* BEGIN SOLUTION */\n\t\tif (seq == null || seq.plmInsiderLength() <= n)\n\t\t\treturn null;\n\t\treturn new RecList( seq.head, butNlast(seq.tail, n));\n\t\t/* END SOLUTION */\n\t}\n\t/* END TEMPLATE */\n}\n",
      "error" : "Error"
    },
    "Scala" : {
      "name" : "ButNlast",
      "body" : "def butNlast(l:List[Int], n:Int): List[Int] = {\n}\n",
      "template" : "$package \n\nimport plm.universe.bat.BatTest\nimport plm.universe.cons.RecList\nimport plm.universe.cons.ConsEntity\n\nclass ButNlast extends ConsEntity {\n  override def run(t: BatTest) {\n    val parameter: List[Int] = RecList.fromArraytoScalaList(t.getParameter(0).asInstanceOf[Array[Int]])   \n    t.setResult( butNlast(parameter, t.getParameter(1).asInstanceOf[Int]) )\n  }\n\n$body\n}\n",
      "offset" : 11,
      "correction" : "$package \n\nimport plm.universe.bat.BatTest\nimport plm.universe.cons.RecList\nimport plm.universe.cons.ConsEntity\n\nclass ButNlast extends ConsEntity {\n\n  override def run(t: BatTest) {\n    val parameter: List[Int] = RecList.fromArraytoScalaList(t.getParameter(0).asInstanceOf[Array[Int]])   \n    t.setResult( butNlast(parameter, t.getParameter(1).asInstanceOf[Int]) )\n  }\n\n  /* BEGIN TEMPLATE */\n  def butNlast(l:List[Int], n:Int): List[Int] = {\n  /* BEGIN SOLUTION */\n    nfirst(l, l.size-n)\n  }\n  def nfirst(l:List[Int], n:Int): List[Int] = {\n  /* BEGIN SOLUTION */\n    if (n == 0 || l==Nil) {\n      Nil\n    } else {\n      l.head :: nfirst(l.tail, n-1)\n    }\n  /* END SOLUTION */\n  }\n  /* END TEMPLATE */\n}\n",
      "error" : "Error"
    },
    "Python" : {
      "name" : "ButNlast",
      "body" : "def butNlast(list, n):\n",
      "template" : "$body\n",
      "offset" : 1,
      "correction" : "# BEGIN TEMPLATE\ndef butNlast(list, n):\n# BEGIN SOLUTION\n  if list == None or list.plmInsiderLength() <= n:\n    return None\n  return new RecList( list.head, butNlast(list.tail, n) )\n# END SOLUTION\n# END TEMPLATE\n",
      "error" : "Error"
    }
  },

  "initialWorlds" : [ {
    "type" : "plm.universe.cons.ConsWorld",
    "@jsonId" : 1,
    "name" : "butNlast",
    "batTests" : [ {
      "funName" : "butNlast",
      "visible" : true,
      "parameters" : [ [ "[I", [ 1, 2, 3, 4 ] ], 3 ],
      "result" : null,
      "correct" : false,
      "answered" : false,
      "objectiveTest" : false
    }, {
      "funName" : "butNlast",
      "visible" : true,
      "parameters" : [ [ "[I", [ 1, 2, 3, 4 ] ], 2 ],
      "result" : null,
      "correct" : false,
      "answered" : false,
      "objectiveTest" : false
    }, {
      "funName" : "butNlast",
      "visible" : true,
      "parameters" : [ [ "[I", [ 1, 1, 1 ] ], 3 ],
      "result" : null,
      "correct" : false,
      "answered" : false,
      "objectiveTest" : false
    }, {
      "funName" : "butNlast",
      "visible" : true,
      "parameters" : [ [ "[I", [ 1, 2, 1, 3, 2 ] ], 0 ],
      "result" : null,
      "correct" : false,
      "answered" : false,
      "objectiveTest" : false
    }, {
      "funName" : "butNlast",
      "visible" : false,
      "parameters" : [ [ "[I", [ 2, 4, 6, 8, 10 ] ], 12 ],
      "result" : null,
      "correct" : false,
      "answered" : false,
      "objectiveTest" : false
    }, {
      "funName" : "butNlast",
      "visible" : false,
      "parameters" : [ [ "[I", [ 6 ] ], 1 ],
      "result" : null,
      "correct" : false,
      "answered" : false,
      "objectiveTest" : false
    }, {
      "funName" : "butNlast",
      "visible" : false,
      "parameters" : [ [ "[I", [ ] ], 1 ],
      "result" : null,
      "correct" : false,
      "answered" : false,
      "objectiveTest" : false
    }, {
      "funName" : "butNlast",
      "visible" : false,
      "parameters" : [ [ "[I", [ ] ], 0 ],
      "result" : null,
      "correct" : false,
      "answered" : false,
      "objectiveTest" : false
    } ],
    "entities" : [ {
      "type" : "plm.universe.cons.ConsEntity",
      "name" : "butNlast",
      "world" : 1,
      "inited" : false
    } ],
    "steps" : [ ],
    "about" : "<!-- Please don't translate this file but l10n/missions/plm.pot (see https://github.com/oster/PLM/wiki/Working-on-translations) -->\n<h1>ConsWorld</h1>\n\n<p>This world allows you to experiment with the recursive lists, as\nthey were first introduced in Lisp. It is very similar to the BatWorld,\nbut you are supposed to write recursive functions working on \nrecursive strings. Since Java does not provide\nsuch a construct natively, the ConsWorld defines recursive lists of\ntype <code>RecList</code>.\n</p>\n\n<p>Any given such list is either the empty list \n(noted <code>null</code>),\nor an integer followed by a list. If a list is not empty, you can\nretrieve its first integer with <code>list.head</code> and the list\ncontaining its other parameters with <code>list.tail</code>. Of\ncourse, the empty list has no head nor the tail, so trying to access\nthese elements will result in an (unpleasant) error message.</p>\n\n<p>To build your own list, you need to concatenate a head and a tail\nas follows: \n<code>cons(head, tail)</code>\n</p>\n\n<p>So, in summary, you can solve every exercises of this lesson with\nthe following constructs.</p>\n\n<ul>\n<li><b>The empty list:</b> <pre>null</pre></li>\n<li><b>Get the first element of <code>l</code></b> <pre>l.head</pre></li>\n<li><b>Get the rest of the list</b>, when the first element is removed: <pre>l.tail</pre></li>\n<li><b>Build a list</b> from a <code>value</code> and a <code>list</code>: \n<pre>cons(value, list)</pre>\n</li>\n</ul>\n",
    "parameters" : null
  } ],
  "answerWorlds" : [ {
    "type" : "plm.universe.cons.ConsWorld",
    "@jsonId" : 2,
    "name" : "butNlast",
    "batTests" : [ {
      "funName" : "butNlast",
      "visible" : true,
      "parameters" : [ [ "[I", [ 1, 2, 3, 4 ] ], 3 ],
      "result" : {
        "type" : "plm.universe.cons.RecList",
        "list" : [ 1 ]
      },
      "correct" : false,
      "answered" : true,
      "objectiveTest" : false
    }, {
      "funName" : "butNlast",
      "visible" : true,
      "parameters" : [ [ "[I", [ 1, 2, 3, 4 ] ], 2 ],
      "result" : {
        "type" : "plm.universe.cons.RecList",
        "list" : [ 1, 2 ]
      },
      "correct" : false,
      "answered" : true,
      "objectiveTest" : false
    }, {
      "funName" : "butNlast",
      "visible" : true,
      "parameters" : [ [ "[I", [ 1, 1, 1 ] ], 3 ],
      "result" : null,
      "correct" : false,
      "answered" : true,
      "objectiveTest" : false
    }, {
      "funName" : "butNlast",
      "visible" : true,
      "parameters" : [ [ "[I", [ 1, 2, 1, 3, 2 ] ], 0 ],
      "result" : {
        "type" : "plm.universe.cons.RecList",
        "list" : [ 1, 2, 1, 3, 2 ]
      },
      "correct" : false,
      "answered" : true,
      "objectiveTest" : false
    }, {
      "funName" : "butNlast",
      "visible" : false,
      "parameters" : [ [ "[I", [ 2, 4, 6, 8, 10 ] ], 12 ],
      "result" : null,
      "correct" : false,
      "answered" : true,
      "objectiveTest" : false
    }, {
      "funName" : "butNlast",
      "visible" : false,
      "parameters" : [ [ "[I", [ 6 ] ], 1 ],
      "result" : null,
      "correct" : false,
      "answered" : true,
      "objectiveTest" : false
    }, {
      "funName" : "butNlast",
      "visible" : false,
      "parameters" : [ [ "[I", [ ] ], 1 ],
      "result" : null,
      "correct" : false,
      "answered" : true,
      "objectiveTest" : false
    }, {
      "funName" : "butNlast",
      "visible" : false,
      "parameters" : [ [ "[I", [ ] ], 0 ],
      "result" : null,
      "correct" : false,
      "answered" : true,
      "objectiveTest" : false
    } ],
    "entities" : [ {
      "type" : "plm.universe.cons.ConsEntity",
      "name" : "butNlast",
      "world" : 2,
      "inited" : true
    } ],
    "steps" : [ [ {
      "type" : "plm.universe.bat.operations.SetResult",
      "@jsonId" : 3,
      "index" : 0,
      "result" : {
        "type" : "plm.universe.cons.RecList",
        "list" : [ 1 ]
      },
      "name" : "setResult"
    } ], [ {
      "type" : "plm.universe.bat.operations.SetResult",
      "@jsonId" : 4,
      "index" : 1,
      "result" : {
        "type" : "plm.universe.cons.RecList",
        "list" : [ 1, 2 ]
      },
      "name" : "setResult"
    } ], [ {
      "type" : "plm.universe.bat.operations.SetResult",
      "@jsonId" : 5,
      "index" : 2,
      "result" : null,
      "name" : "setResult"
    } ], [ {
      "type" : "plm.universe.bat.operations.SetResult",
      "@jsonId" : 6,
      "index" : 3,
      "result" : {
        "type" : "plm.universe.cons.RecList",
        "list" : [ 1, 2, 1, 3, 2 ]
      },
      "name" : "setResult"
    } ], [ {
      "type" : "plm.universe.bat.operations.SetResult",
      "@jsonId" : 7,
      "index" : 4,
      "result" : null,
      "name" : "setResult"
    } ], [ {
      "type" : "plm.universe.bat.operations.SetResult",
      "@jsonId" : 8,
      "index" : 5,
      "result" : null,
      "name" : "setResult"
    } ], [ {
      "type" : "plm.universe.bat.operations.SetResult",
      "@jsonId" : 9,
      "index" : 6,
      "result" : null,
      "name" : "setResult"
    } ], [ {
      "type" : "plm.universe.bat.operations.SetResult",
      "@jsonId" : 10,
      "index" : 7,
      "result" : null,
      "name" : "setResult"
    } ] ],
    "about" : "<!-- Please don't translate this file but l10n/missions/plm.pot (see https://github.com/oster/PLM/wiki/Working-on-translations) -->\n<h1>ConsWorld</h1>\n\n<p>This world allows you to experiment with the recursive lists, as\nthey were first introduced in Lisp. It is very similar to the BatWorld,\nbut you are supposed to write recursive functions working on \nrecursive strings. Since Java does not provide\nsuch a construct natively, the ConsWorld defines recursive lists of\ntype <code>RecList</code>.\n</p>\n\n<p>Any given such list is either the empty list \n(noted <code>null</code>),\nor an integer followed by a list. If a list is not empty, you can\nretrieve its first integer with <code>list.head</code> and the list\ncontaining its other parameters with <code>list.tail</code>. Of\ncourse, the empty list has no head nor the tail, so trying to access\nthese elements will result in an (unpleasant) error message.</p>\n\n<p>To build your own list, you need to concatenate a head and a tail\nas follows: \n<code>cons(head, tail)</code>\n</p>\n\n<p>So, in summary, you can solve every exercises of this lesson with\nthe following constructs.</p>\n\n<ul>\n<li><b>The empty list:</b> <pre>null</pre></li>\n<li><b>Get the first element of <code>l</code></b> <pre>l.head</pre></li>\n<li><b>Get the rest of the list</b>, when the first element is removed: <pre>l.tail</pre></li>\n<li><b>Build a list</b> from a <code>value</code> and a <code>list</code>: \n<pre>cons(value, list)</pre>\n</li>\n</ul>\n",
    "parameters" : null
  } ] 
}