{
  "id" : "bat.bool1.sumdouble.SumDouble",
  "name" : "SumDouble",
  "tabName" : "SumDouble",
  "defaultSourceFiles" : {
    "Java" : {
      "name" : "SumDouble",
      "body" : "int sumDouble(int a, int b) {\n}\n",
      "template" : "$package   import plm.universe.bat.BatEntity; import plm.universe.bat.BatTest;  public class SumDouble extends BatEntity {\t \tpublic void run(BatTest t) { \t\tt.setResult( sumDouble( ((Integer)(t.getParameter(0))),((Integer)(t.getParameter(1)))) );\t\t \t}  $body } ",
      "offset" : 1,
      "correction" : "$package \n\nimport plm.universe.bat.BatEntity;\nimport plm.universe.bat.BatTest;\n\npublic class SumDouble extends BatEntity {\n\t\n\tpublic void run(BatTest t) {\n\t\tt.setResult( sumDouble( ((Integer)(t.getParameter(0))),((Integer)(t.getParameter(1)))) );\t\t\n\t}\n\n\t/* BEGIN TEMPLATE */\n\tint sumDouble(int a, int b) {\n\t\t/* BEGIN SOLUTION */\n\t\tif (a==b)\n\t\t\treturn (a+b)*2;\n\t\treturn a+b;\n\t\t/* END SOLUTION */\n\t}\n\t/* END TEMPLATE */\n}\n",
      "error" : "Error"
    },
    "Scala" : {
      "name" : "SumDouble",
      "body" : "def sumDouble(a: Integer, b: Integer): Integer = {\n}\n",
      "template" : "$package \n\nimport plm.universe.bat.BatTest\nimport plm.universe.bat.BatEntity\n\n/**\n * @author matthieu\n */\nclass SumDouble extends BatEntity {  override def run(t: BatTest) {\n    t.setResult( sumDouble(t.getParameter(0).asInstanceOf[Integer],t.getParameter(1).asInstanceOf[Integer]))\n  }\n\n$body\n}\n",
      "offset" : 11,
      "correction" : "$package \n\nimport plm.universe.bat.BatTest\nimport plm.universe.bat.BatEntity\n\n/**\n * @author matthieu\n */\nclass SumDouble extends BatEntity {\n  override def run(t: BatTest) {\n    t.setResult( sumDouble(t.getParameter(0).asInstanceOf[Integer],t.getParameter(1).asInstanceOf[Integer]))\n  }\n\n  /* BEGIN TEMPLATE */\n  def sumDouble(a: Integer, b: Integer): Integer = {\n    /* BEGIN SOLUTION */\n    if(a==b) {\n      (a+b)*2\n    }\n    a+b\n    /* END SOLUTION */\n  }\n  /* END TEMPLATE */\n}\n",
      "error" : "Error"
    },
    "Python" : {
      "name" : "SumDouble",
      "body" : "def sumDouble(a, b):\n",
      "template" : "$body\n",
      "offset" : 1,
      "correction" : "# BEGIN TEMPLATE\ndef sumDouble(a, b):\n# BEGIN SOLUTION\n  if a==b:\n    return (a+b)*2\n  return a+b\n# END SOLUTION\n# END TEMPLATE\n",
      "error" : "Error"
    }
  },
  "helps" : {
    "pt" : "<!-- Please don't translate this file but l10n/missions/plm.pot (see https://github.com/oster/PLM/wiki/Working-on-translations) -->\n<h1>BatWorld</h1>\n\n<p>This world is a simplistic testing environment largely inspired from\nthe http://codingbat.com invented by Nick Parlente.</p>\n\n<p>The typical exercises are very short ones, aiming at improving the\n   tactical programming abilities of the students. That is to say that\n   you will be presented a quite long list of very little exercises\n   about rather simple things. The idea is to train you on these\n   issues until they become automatic to you.</p>\n   \n<p>In contrary to the other worlds, the BatWorld does not provide any\n   fancy abstraction nor visualization. You have to fill a function,\n   which gets called for a bunch of parameter sets, and that's it.</p>\n   \n<p>For more information, you should refer to the CodingBat.com documentation, \n   which contains for example a very useful documentation on boolean operators:\n   http://codingbat.com/doc/ifboolean.html</p>\n",
    "en" : "<!-- Please don't translate this file but l10n/missions/plm.pot (see https://github.com/oster/PLM/wiki/Working-on-translations) -->\n<h1>BatWorld</h1>\n\n<p>This world is a simplistic testing environment largely inspired from\nthe http://codingbat.com invented by Nick Parlente.</p>\n\n<p>The typical exercises are very short ones, aiming at improving the\n   tactical programming abilities of the students. That is to say that\n   you will be presented a quite long list of very little exercises\n   about rather simple things. The idea is to train you on these\n   issues until they become automatic to you.</p>\n   \n<p>In contrary to the other worlds, the BatWorld does not provide any\n   fancy abstraction nor visualization. You have to fill a function,\n   which gets called for a bunch of parameter sets, and that's it.</p>\n   \n<p>For more information, you should refer to the CodingBat.com documentation, \n   which contains for example a very useful documentation on boolean operators:\n   http://codingbat.com/doc/ifboolean.html</p>\n",
    "fr" : "\n<!-- Please don't translate this file but l10n/missions/plm.pot (see https://github.com/oster/PLM/wiki/Working-on-translations) -->\n<h1>BatWorld</h1>\n\n<p>Ce monde contient un environnement simpliste de tests largement inspiré de\nhttp://codingbat.com inventé par Nick Parlente.</p>\n\n<p>Les exercices classiques sont très courts, et visent à améliorer les\ncapacités de stratégie de programmation des étudiants. C'est pour vous\nprévenir que vous allez faire face à une très longue liste de très petits\nexercices à propos de choses très simples. L'idée est de vous entraîner sur\nces problèmes jusqu'à ce que cela devienne automatique.</p>\n   \n<p>Contrairement aux autres mondes, le BatWorld ne fournit ni de belles\nabstractions ni de belles visualisations. Vous aurez à remplier une fonction\nqui sera appelée avec plusieurs ensembles différents de paramètres, et c'est\ntout.</p>\n   \n<p>Pour plus d'informations, vous devriez consulter la documentation de\nCodingBat.com qui contient par exemple une documentation très utile sur les\nopérateurs booléens : http://codingbat.com/doc/ifboolean.html</p>\n"
  },
  "initialWorlds" : [ {
    "type" : "plm.universe.bat.BatWorld",
    "@jsonId" : 1,
    "name" : "sumDouble",
    "batTests" : [ {
      "funName" : "sumDouble",
      "visible" : true,
      "parameters" : [ 1, 2 ],
      "result" : null,
      "correct" : false,
      "answered" : false,
      "objectiveTest" : false
    }, {
      "funName" : "sumDouble",
      "visible" : true,
      "parameters" : [ 3, 2 ],
      "result" : null,
      "correct" : false,
      "answered" : false,
      "objectiveTest" : false
    }, {
      "funName" : "sumDouble",
      "visible" : true,
      "parameters" : [ 2, 2 ],
      "result" : null,
      "correct" : false,
      "answered" : false,
      "objectiveTest" : false
    }, {
      "funName" : "sumDouble",
      "visible" : false,
      "parameters" : [ -1, 0 ],
      "result" : null,
      "correct" : false,
      "answered" : false,
      "objectiveTest" : false
    }, {
      "funName" : "sumDouble",
      "visible" : false,
      "parameters" : [ 0, 0 ],
      "result" : null,
      "correct" : false,
      "answered" : false,
      "objectiveTest" : false
    }, {
      "funName" : "sumDouble",
      "visible" : false,
      "parameters" : [ 0, 1 ],
      "result" : null,
      "correct" : false,
      "answered" : false,
      "objectiveTest" : false
    } ],
    "entities" : [ {
      "type" : "plm.universe.bat.BatEntity",
      "name" : "sumDouble",
      "world" : 1,
      "inited" : false
    } ],
    "steps" : [ ],
    "about" : "<!-- Please don't translate this file but l10n/missions/plm.pot (see https://github.com/oster/PLM/wiki/Working-on-translations) -->\n<h1>BatWorld</h1>\n\n<p>This world is a simplistic testing environment largely inspired from\nthe http://codingbat.com invented by Nick Parlente.</p>\n\n<p>The typical exercises are very short ones, aiming at improving the\n   tactical programming abilities of the students. That is to say that\n   you will be presented a quite long list of very little exercises\n   about rather simple things. The idea is to train you on these\n   issues until they become automatic to you.</p>\n   \n<p>In contrary to the other worlds, the BatWorld does not provide any\n   fancy abstraction nor visualization. You have to fill a function,\n   which gets called for a bunch of parameter sets, and that's it.</p>\n   \n<p>For more information, you should refer to the CodingBat.com documentation, \n   which contains for example a very useful documentation on boolean operators:\n   http://codingbat.com/doc/ifboolean.html</p>\n",
    "parameters" : null
  } ],
  "answerWorlds" : [ {
    "type" : "plm.universe.bat.BatWorld",
    "@jsonId" : 2,
    "name" : "sumDouble",
    "batTests" : [ {
      "funName" : "sumDouble",
      "visible" : true,
      "parameters" : [ 1, 2 ],
      "result" : 3,
      "correct" : false,
      "answered" : true,
      "objectiveTest" : false
    }, {
      "funName" : "sumDouble",
      "visible" : true,
      "parameters" : [ 3, 2 ],
      "result" : 5,
      "correct" : false,
      "answered" : true,
      "objectiveTest" : false
    }, {
      "funName" : "sumDouble",
      "visible" : true,
      "parameters" : [ 2, 2 ],
      "result" : 8,
      "correct" : false,
      "answered" : true,
      "objectiveTest" : false
    }, {
      "funName" : "sumDouble",
      "visible" : false,
      "parameters" : [ -1, 0 ],
      "result" : -1,
      "correct" : false,
      "answered" : true,
      "objectiveTest" : false
    }, {
      "funName" : "sumDouble",
      "visible" : false,
      "parameters" : [ 0, 0 ],
      "result" : 0,
      "correct" : false,
      "answered" : true,
      "objectiveTest" : false
    }, {
      "funName" : "sumDouble",
      "visible" : false,
      "parameters" : [ 0, 1 ],
      "result" : 1,
      "correct" : false,
      "answered" : true,
      "objectiveTest" : false
    } ],
    "entities" : [ {
      "type" : "plm.universe.bat.BatEntity",
      "name" : "sumDouble",
      "world" : 2,
      "inited" : true
    } ],
    "steps" : [ [ {
      "type" : "plm.universe.bat.operations.SetResult",
      "@jsonId" : 3,
      "index" : 0,
      "result" : 3,
      "name" : "setResult"
    } ], [ {
      "type" : "plm.universe.bat.operations.SetResult",
      "@jsonId" : 4,
      "index" : 1,
      "result" : 5,
      "name" : "setResult"
    } ], [ {
      "type" : "plm.universe.bat.operations.SetResult",
      "@jsonId" : 5,
      "index" : 2,
      "result" : 8,
      "name" : "setResult"
    } ], [ {
      "type" : "plm.universe.bat.operations.SetResult",
      "@jsonId" : 6,
      "index" : 3,
      "result" : -1,
      "name" : "setResult"
    } ], [ {
      "type" : "plm.universe.bat.operations.SetResult",
      "@jsonId" : 7,
      "index" : 4,
      "result" : 0,
      "name" : "setResult"
    } ], [ {
      "type" : "plm.universe.bat.operations.SetResult",
      "@jsonId" : 8,
      "index" : 5,
      "result" : 1,
      "name" : "setResult"
    } ] ],
    "about" : "<!-- Please don't translate this file but l10n/missions/plm.pot (see https://github.com/oster/PLM/wiki/Working-on-translations) -->\n<h1>BatWorld</h1>\n\n<p>This world is a simplistic testing environment largely inspired from\nthe http://codingbat.com invented by Nick Parlente.</p>\n\n<p>The typical exercises are very short ones, aiming at improving the\n   tactical programming abilities of the students. That is to say that\n   you will be presented a quite long list of very little exercises\n   about rather simple things. The idea is to train you on these\n   issues until they become automatic to you.</p>\n   \n<p>In contrary to the other worlds, the BatWorld does not provide any\n   fancy abstraction nor visualization. You have to fill a function,\n   which gets called for a bunch of parameter sets, and that's it.</p>\n   \n<p>For more information, you should refer to the CodingBat.com documentation, \n   which contains for example a very useful documentation on boolean operators:\n   http://codingbat.com/doc/ifboolean.html</p>\n",
    "parameters" : null
  } ],
  "instructions" : {
    "pt" : "\n<!-- Please don't translate this file but l10n/missions/plm.pot (see https://github.com/oster/PLM/wiki/Working-on-translations) -->\n<h1>Soma dupla</h1>\nDados dois valores int, retorne sua soma. A menos que dois valores\nsejam os mesmos, neste caso retorne o dobro de sua soma. \n\n<p>Este exercício foi convertido para o PLM do excelente sítio de exercícios\nhttp://codingbat.com/</p>\n",
    "en" : "<!-- Please don't translate this file but l10n/missions/plm.pot (see https://github.com/oster/PLM/wiki/Working-on-translations) -->\n<h1>Sum Double</h1>\nGiven two int values, return their sum. Unless the two values are the\nsame, then return double their sum. \n\n<p>This exercise was converted to PLM from the excellent exercising site http://codingbat.com/</p>\n",
    "fr" : "\n<!-- Please don't translate this file but l10n/missions/plm.pot (see https://github.com/oster/PLM/wiki/Working-on-translations) -->\n<h1>Somme doublée</h1>\nÉtant donné deux entiers, retournez leur somme. Sauf si les valeurs sont\négales, auquel cas vous devez retourner le double de leur somme. \n\n<p>Cet exercice a été extrait pour PLM depuis l'excellent site d'exercices\nhttp://codingbat.com/</p>\n"
  }
}