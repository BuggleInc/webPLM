{
  "id" : "bat.bool1.monkeytrouble.MonkeyTrouble",
  "name" : "MonkeyTrouble",
  "tabName" : "MonkeyTrouble",
  "defaultSourceFiles" : {
    "Java" : {
      "name" : "MonkeyTrouble",
      "body" : "public boolean monkeyTrouble(boolean aSmile, boolean bSmile) {\n}    \n",
      "template" : "$package   import plm.universe.bat.BatEntity; import plm.universe.bat.BatTest;  public class MonkeyTrouble extends BatEntity { \tpublic void run(BatTest t) { \t\tt.setResult( monkeyTrouble((Boolean)t.getParameter(0),(Boolean)t.getParameter(1)) );\t\t \t} \t $body } ",
      "offset" : 1,
      "correction" : "$package \n\nimport plm.universe.bat.BatEntity;\nimport plm.universe.bat.BatTest;\n\npublic class MonkeyTrouble extends BatEntity {\n\n\tpublic void run(BatTest t) {\n\t\tt.setResult( monkeyTrouble((Boolean)t.getParameter(0),(Boolean)t.getParameter(1)) );\t\t\n\t}\n\t\n\t/* BEGIN TEMPLATE */\n\tpublic boolean monkeyTrouble(boolean aSmile, boolean bSmile) {\n\t\t/* BEGIN SOLUTION */\n\t\tif (aSmile && bSmile) {\n\t\t\treturn true;\n\t\t}\n\t\tif (!aSmile && !bSmile) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t\t\n\t\t\n\t\t/* END SOLUTION */\t\t  \n\t}\t\n\t/* END TEMPLATE */\n}\n",
      "error" : "Error"
    },
    "Scala" : {
      "name" : "MonkeyTrouble",
      "body" : "def monkeyTrouble(aSmile:Boolean, bSmile:Boolean): Boolean = {\n}\n",
      "template" : "$package \n\nimport plm.universe.bat.BatTest\nimport plm.universe.bat.BatEntity\n\n/**\n * @author matthieu\n */\nclass MonkeyTrouble extends BatEntity {  override def run(t: BatTest) {\n    t.setResult( monkeyTrouble(t.getParameter(0).asInstanceOf[Boolean],t.getParameter(1).asInstanceOf[Boolean]))\n  }\n\n$body\n}\n",
      "offset" : 11,
      "correction" : "$package \n\nimport plm.universe.bat.BatTest\nimport plm.universe.bat.BatEntity\n\n/**\n * @author matthieu\n */\nclass MonkeyTrouble extends BatEntity {\n  override def run(t: BatTest) {\n    t.setResult( monkeyTrouble(t.getParameter(0).asInstanceOf[Boolean],t.getParameter(1).asInstanceOf[Boolean]))\n  }\n\n  /* BEGIN TEMPLATE */\n  def monkeyTrouble(aSmile:Boolean, bSmile:Boolean): Boolean = {\n    /* BEGIN SOLUTION */\n    ((aSmile && bSmile) || (!aSmile && !bSmile))\n    /* END SOLUTION */\n  }\n  /* END TEMPLATE */\n}\n",
      "error" : "Error"
    },
    "Python" : {
      "name" : "MonkeyTrouble",
      "body" : "def monkeyTrouble(aSmile, bSmile):\n",
      "template" : "$body\n",
      "offset" : 1,
      "correction" : "# BEGIN TEMPLATE\ndef monkeyTrouble(aSmile, bSmile):\n# BEGIN SOLUTION\n  return (aSmile and bSmile) or (not aSmile and not bSmile)\n# END SOLUTION\n# END TEMPLATE\n",
      "error" : "Error"
    }
  },

  "initialWorlds" : [ {
    "type" : "plm.universe.bat.BatWorld",
    "@jsonId" : 1,
    "name" : "monkeyTrouble",
    "batTests" : [ {
      "funName" : "monkeyTrouble",
      "visible" : true,
      "parameters" : [ true, true ],
      "result" : null,
      "correct" : false,
      "answered" : false,
      "objectiveTest" : false
    }, {
      "funName" : "monkeyTrouble",
      "visible" : true,
      "parameters" : [ false, false ],
      "result" : null,
      "correct" : false,
      "answered" : false,
      "objectiveTest" : false
    }, {
      "funName" : "monkeyTrouble",
      "visible" : true,
      "parameters" : [ true, false ],
      "result" : null,
      "correct" : false,
      "answered" : false,
      "objectiveTest" : false
    }, {
      "funName" : "monkeyTrouble",
      "visible" : false,
      "parameters" : [ false, true ],
      "result" : null,
      "correct" : false,
      "answered" : false,
      "objectiveTest" : false
    } ],
    "entities" : [ {
      "type" : "plm.universe.bat.BatEntity",
      "name" : "monkeyTrouble",
      "world" : 1,
      "inited" : false
    } ],
    "steps" : [ ],
    "about" : "<!-- Please don't translate this file but l10n/missions/plm.pot (see https://github.com/oster/PLM/wiki/Working-on-translations) -->\n<h1>BatWorld</h1>\n\n<p>This world is a simplistic testing environment largely inspired from\nthe http://codingbat.com invented by Nick Parlente.</p>\n\n<p>The typical exercises are very short ones, aiming at improving the\n   tactical programming abilities of the students. That is to say that\n   you will be presented a quite long list of very little exercises\n   about rather simple things. The idea is to train you on these\n   issues until they become automatic to you.</p>\n   \n<p>In contrary to the other worlds, the BatWorld does not provide any\n   fancy abstraction nor visualization. You have to fill a function,\n   which gets called for a bunch of parameter sets, and that's it.</p>\n   \n<p>For more information, you should refer to the CodingBat.com documentation, \n   which contains for example a very useful documentation on boolean operators:\n   http://codingbat.com/doc/ifboolean.html</p>\n",
    "parameters" : null
  } ],
  "answerWorlds" : [ {
    "type" : "plm.universe.bat.BatWorld",
    "@jsonId" : 2,
    "name" : "monkeyTrouble",
    "batTests" : [ {
      "funName" : "monkeyTrouble",
      "visible" : true,
      "parameters" : [ true, true ],
      "result" : true,
      "correct" : false,
      "answered" : true,
      "objectiveTest" : false
    }, {
      "funName" : "monkeyTrouble",
      "visible" : true,
      "parameters" : [ false, false ],
      "result" : true,
      "correct" : false,
      "answered" : true,
      "objectiveTest" : false
    }, {
      "funName" : "monkeyTrouble",
      "visible" : true,
      "parameters" : [ true, false ],
      "result" : false,
      "correct" : false,
      "answered" : true,
      "objectiveTest" : false
    }, {
      "funName" : "monkeyTrouble",
      "visible" : false,
      "parameters" : [ false, true ],
      "result" : false,
      "correct" : false,
      "answered" : true,
      "objectiveTest" : false
    } ],
    "entities" : [ {
      "type" : "plm.universe.bat.BatEntity",
      "name" : "monkeyTrouble",
      "world" : 2,
      "inited" : true
    } ],
    "steps" : [ [ {
      "type" : "plm.universe.bat.operations.SetResult",
      "@jsonId" : 3,
      "index" : 0,
      "result" : true,
      "name" : "setResult"
    } ], [ {
      "type" : "plm.universe.bat.operations.SetResult",
      "@jsonId" : 4,
      "index" : 1,
      "result" : true,
      "name" : "setResult"
    } ], [ {
      "type" : "plm.universe.bat.operations.SetResult",
      "@jsonId" : 5,
      "index" : 2,
      "result" : false,
      "name" : "setResult"
    } ], [ {
      "type" : "plm.universe.bat.operations.SetResult",
      "@jsonId" : 6,
      "index" : 3,
      "result" : false,
      "name" : "setResult"
    } ] ],
    "about" : "<!-- Please don't translate this file but l10n/missions/plm.pot (see https://github.com/oster/PLM/wiki/Working-on-translations) -->\n<h1>BatWorld</h1>\n\n<p>This world is a simplistic testing environment largely inspired from\nthe http://codingbat.com invented by Nick Parlente.</p>\n\n<p>The typical exercises are very short ones, aiming at improving the\n   tactical programming abilities of the students. That is to say that\n   you will be presented a quite long list of very little exercises\n   about rather simple things. The idea is to train you on these\n   issues until they become automatic to you.</p>\n   \n<p>In contrary to the other worlds, the BatWorld does not provide any\n   fancy abstraction nor visualization. You have to fill a function,\n   which gets called for a bunch of parameter sets, and that's it.</p>\n   \n<p>For more information, you should refer to the CodingBat.com documentation, \n   which contains for example a very useful documentation on boolean operators:\n   http://codingbat.com/doc/ifboolean.html</p>\n",
    "parameters" : null
  } ] 
}