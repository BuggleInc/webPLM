{
  "id" : "traversal.snake.Snake",
  "name" : "Snake",
  "tabName" : "SnakeBuggle",
  "defaultSourceFiles" : {
    "Java" : {
      "name" : "Snake",
      "body" : "public void run() {\n}\n",
      "template" : "$package   import plm.universe.Direction; import plm.universe.bugglequest.SimpleBuggle;  public class Snake extends SimpleBuggle {\t@Override $body } ",
      "offset" : 1,
      "correction" : "$package \n\nimport plm.universe.Direction;\nimport plm.universe.bugglequest.AbstractBuggle;\n\npublic class Snake extends AbstractBuggle {\n\t@Override\n\t/* BEGIN TEMPLATE */\n\tpublic void run() {\n\t\t/* BEGIN SOLUTION */\n\t\tbrushDown();\n\t\twhile (!endingPosition()) {\n\t\t\tsnakeStep();\n\t\t}\n\t}\n\tboolean endingPosition() {\n\t\tif (! isFacingWall()) \n\t\t\treturn false;\n\n\t\tboolean res = false;\n\t\tleft();\n\t\tif (isFacingWall()) \n\t\t\tres = true;\n\t\tright();\t\t\n\t\treturn res;\n\t}\n\n\tvoid snakeStep() {\n\t\tif (isFacingWall()) {\n\t\t\tif (getDirection() == Direction.EAST) {\n\t\t\t\tleft();\n\t\t\t\tforward();\n\t\t\t\tleft();\n\t\t\t} else {\n\t\t\t\tright();\n\t\t\t\tforward();\n\t\t\t\tright();\n\t\t\t}\n\t\t} else {\n\t\t\tforward();\n\t\t}\n\n\t\t/* END SOLUTION */\n\t}\n\t/* END TEMPLATE */\t\n}\n",
      "error" : "Error"
    },
    "Scala" : {
      "name" : "Snake",
      "body" : "override def run() {\n}\n",
      "template" : "$package \n\nimport plm.universe.Direction;\nimport plm.universe.bugglequest.SimpleBuggle;\n\nclass Snake extends SimpleBuggle {\n$body\n}\n",
      "offset" : 6,
      "correction" : "$package \n\nimport plm.universe.Direction;\nimport plm.universe.bugglequest.AbstractBuggle;\n\nclass Snake extends AbstractBuggle {\n\n\t/* BEGIN TEMPLATE */\n\toverride def run() {\n\t\t/* BEGIN SOLUTION */\n\t\tbrushDown();\n\t\twhile (!endingPosition()) {\n\t\t\tsnakeStep();\n\t\t}\n\t}\n\tdef endingPosition():Boolean = {\n\t\tif (! isFacingWall()) \n\t\t\treturn false;\n\n\t\tvar res = false;\n\t\tleft();\n\t\tif (isFacingWall()) \n\t\t\tres = true;\n\t\tright();\t\t\n\t\treturn res;\n\t}\n\n\tdef snakeStep() {\n\t\tif (isFacingWall()) {\n\t\t\tif (getDirection() == Direction.EAST) {\n\t\t\t\tleft();\n\t\t\t\tforward();\n\t\t\t\tleft();\n\t\t\t} else {\n\t\t\t\tright();\n\t\t\t\tforward();\n\t\t\t\tright();\n\t\t\t}\n\t\t} else {\n\t\t\tforward();\n\t\t}\n\n\t\t/* END SOLUTION */\n\t}\n\t/* END TEMPLATE */\t\n}\n",
      "error" : "Error"
    },
    "Python" : {
      "name" : "Snake",
      "body" : "",
      "template" : "$body\n",
      "offset" : 1,
      "correction" : "# BEGIN SOLUTION\ndef endingPosition():\n\tif not isFacingWall():\n\t\treturn False\n\telse:\n\t\tres = False\n\t\tleft()\n\t\tif isFacingWall():\n\t\t\tres = True\n\t\tright()\n\t\treturn res\n\ndef snakeStep():\n\tif isFacingWall():\n\t\tif getDirection().toString() == \"EAST\":\n\t\t\tleft()\n\t\t\tforward()\n\t\t\tleft()\n\t\telse:\n\t\t\tright()\n\t\t\tforward()\n\t\t\tright()\n\telse:\n\t\tforward()\n\nbrushDown()\nwhile not endingPosition():\n\tsnakeStep()\n# END SOLUTION\n",
      "error" : "Error"
    }
  },
  "helps" : {
    "pt" : "<!-- Please don't translate this file but l10n/missions/plm.pot (see https://github.com/oster/PLM/wiki/Working-on-translations) -->\n<h1>BuggleWorld</h1>\nThis world was invented by Lyn Turbak, at Wellesley College. It is full of\nBuggles, little animals understanding simple orders, and offers numerous\npossibilities of interaction with the world: taking or dropping objects,\npaint the ground, hit walls, etc.\n\n<h2>Methods understood by buggles</h2>\n<table border=1>\n<tr><td colspan=2 align=center><b>Moving</b><br/> (See also the note on exceptions, below)</td></tr>\n  <tr><td><b>Turn left<br/>Turn right<br/>Turn back<br/>Moving forward<br/>Moving back</b></td>\n      <td>[!java|c]void [/!]left()<br/>\n          [!java|c]void [/!]right()<br/>\n          [!java|c]void [/!]back()<br/>\n          [!java|c]void [/!][!python|java|scala]forward()[/!][!c]stepForward()[/!] or [!java|c]void [/!]forward([!java|c]int [/!]steps[!scala]:Int[/!])<br/>\n          [!java|c]void [/!][!python|java|scala]backward()[/!][!c]stepBackward()[/!] or [!java]void [/!]backward([!java|c]int [/!]steps[!scala]:Int[/!])<br/></td></tr>\n  <tr><td><b>Get X coordinate<br/>Get Y coordinate<br/>Set X coordinate<br/>Set Y coordinate<br/>Set position</b></td>\n      <td>[!java|c]int [/!]getX()[!scala]:Int[/!]<br/>\n          [!java|c]int [/!]getY()[!scala]:Int[/!]<br/>\n          [!java|c]void [/!]setX([!java|c]int [/!]x[!scala]:Int[/!])<br/>\n          [!java|c]void [/!]setY([!java|c]int [/!]y[!scala]:Int[/!])<br/>\n          [!java|c]void [/!]setPos([!java|c]int [/!]x[!scala]:Int[/!], [!java|c]int [/!]y[!scala]:Int[/!])</td></tr>\n<tr><td colspan=2>Note that the point (0,0) is on the top left corner, as it is often the case in Computer Science.</td></tr>\n\n<tr><td colspan=2 align=center><b>Information on the buggle</b></td></tr>\n  <tr><td><b>Get the color of the body<br/>Set the color of the body</b></td>\n      <td>[!java|c]Color [/!]getBodyColor()[!scala]:Color[/!]<br/>\n          [!java|c]void [/!]setBodyColor([!java|c]Color [/!]c[!scala]:Color[/!])</td></tr>\t\t\t\t\n  <tr><td><b>Look for a wall forward<br/>Look for a wall backward</b></td>\n      <td>[!java]boolean [/!][!c]int [/!]isFacingWall()[!scala]:Boolean[/!]<br/>\n          [!java]boolean [/!][!c]int [/!]isBackingWall()[!scala]:Boolean[/!]</td></tr>\t\t\t\t\n  <tr><td><b>Get heading<br/>Set heading</b><br/>valid directions are:</td>\n      <td>[!java|c]Direction [/!]getDirection()[!scala]:Direction[/!]<br/>\n          [!java|c]void [/!]setDirection([!java|c]Direction [/!]dir[!scala]:Direction[/!])<br/>\n          [!scala|java|python]Direction.[/!]NORTH, [!scala|java|python]Direction.[/!]EAST, [!scala|java|python]Direction.[/!]SOUTH and [!scala|java|python]Direction.[/!]WEST</td></tr>\n  <tr><td>Check whether the buggle is currently <b>selected in the interface</b></td>\n      <td>[!java]boolean [/!][!c]int [/!]isSelected()[!scala]:Boolean[/!]</td></tr>\n \n<tr><td colspan=2 align=center><b>About the brush</b></td></tr>\n  <tr><td><b>Brush down<br/>Brush up<br/>Get brush position</b></td>\n      <td>[!java|c]void [/!]brushUp()<br/>\n          [!java|c]void [/!]brushDown()<br/>\n          [!java]boolean [/!][!c]int [/!]isBrushDown()[!scala]:Boolean[/!]</td></tr>\n  <tr><td><b>Change the brush color<br/>Get the color of the brush</b></td>\n      <td>[!java|c]void [/!]setBrushColor([!java|c]Color [/!]c[!scala]:Color[/!])<br/>\n          [!java|c]Color [/!]getBrushColor()[!scala]:Color[/!]</td></tr>\n\n<tr><td colspan=2 align=center><b>Interacting with the world</b></td></tr>\n  <tr><td><b>Get the color of the ground</b></td>\n      <td>[!java|c]Color [/!]getGroundColor()[!scala]:Color[/!]</td></tr>\n\n  <tr><td><b>Look for a baggle on the ground<br/>Look for a baggle in bag<br/>Pickup a baggle<br/>Drop a baggle</b><br/>\n      (see the note on exceptions)</td>\n      <td>[!java]boolean [/!][!c]int [/!]isOverBaggle()[!scala]:Boolean[/!]<br/>\n          [!java]boolean [/!][!c]int [/!]isCarryingBaggle()[!scala]:Boolean[/!]<br/>\n          [!java]void [/!]pickupBaggle()<br/>\n          [!java]void [/!]dropBaggle()<br/>\n          &nbsp;</td></tr>\n\n  <tr><td><b>Look for a message<br/>Add a message<br/>Read the message<br/>Erase the message</b></td>\n      <td>[!java]boolean [/!][!c]int [/!]isOverMessage()[!scala]:Boolean[/!]<br/>\n          [!java]void [/!]writeMessage([!java]String [/!][!c]char* [/!]msg[!scala]:String[/!])<br/>\n          [!java]String [/!][!c]char* [/!]readMessage()[!scala]:String[/!]<br/>\n          [!java]void [/!]clearMessage()</td></tr>\n</table>\n\n<h2>Valid colors</h2>\n<table border=1>\n<tr><td>Name</td><td>Color</td></tr>\n<tr><td>[!scala|java|python]Color.[/!]black</td>    <td BGCOLOR=\"#000000\">&nbsp;</td></tr>\n<tr><td>[!scala|java|python]Color.[/!]blue</td>     <td BGCOLOR=\"#0000FF\">&nbsp;</td></tr>\n<tr><td>[!scala|java|python]Color.[/!]cyan</td>     <td BGCOLOR=\"#00FFFF\">&nbsp;</td></tr>\n<tr><td>[!scala|java|python]Color.[/!]darkGray</td> <td BGCOLOR=\"#404040\">&nbsp;</td></tr>\n<tr><td>[!scala|java|python]Color.[/!]gray</td>     <td BGCOLOR=\"#808080\">&nbsp;</td></tr>\n<tr><td>[!scala|java|python]Color.[/!]green</td>    <td BGCOLOR=\"#00FF00\">&nbsp;</td></tr>\n<tr><td>[!scala|java|python]Color.[/!]lightGray</td><td BGCOLOR=\"#C0C0C0\">&nbsp;</td></tr>\n<tr><td>[!scala|java|python]Color.[/!]magenta</td>  <td BGCOLOR=\"#FF00FF\">&nbsp;</td></tr>\n<tr><td>[!scala|java|python]Color.[/!]orange</td>   <td BGCOLOR=\"#FFC800\">&nbsp;</td></tr>\n<tr><td>[!scala|java|python]Color.[/!]pink</td>     <td BGCOLOR=\"#FFAFAF\">&nbsp;</td></tr>\n<tr><td>[!scala|java|python]Color.[/!]red</td>      <td BGCOLOR=\"#FF0000\">&nbsp;</td></tr>\n<tr><td>[!scala|java|python]Color.[/!]white</td>    <td BGCOLOR=\"#FFFFFF\">&nbsp;</td></tr>\n<tr><td>[!scala|java|python]Color.[/!]yellow</td>   <td BGCOLOR=\"#FFFF00\">&nbsp;</td></tr>\n</table>\n\n<h2>Note on exceptions</h2>\nRegular buggles throw a BuggleWallException exception if you ask them to\ntraverse a wall.  They throw a NoBaggleUnderBuggleException exception if you\nask them to pickup a baggle from an empty cell, or a\nAlreadyHaveBaggleException exception if they already carry a baggle.  Trying\nto drop a baggle on a cell already containing one throws an\nAlreadyHaveBaggleException exception. \nDropping a baggle when you have none throws a DontHaveBaggleException.\n<p>SimpleBuggles (ie, the one used in first exercises) display an error message\non problem so that you don't need to know what an exception is.</p>\n",
    "en" : "<!-- Please don't translate this file but l10n/missions/plm.pot (see https://github.com/oster/PLM/wiki/Working-on-translations) -->\n<h1>BuggleWorld</h1>\nThis world was invented by Lyn Turbak, at Wellesley College. It is full of\nBuggles, little animals understanding simple orders, and offers numerous\npossibilities of interaction with the world: taking or dropping objects,\npaint the ground, hit walls, etc.\n\n<h2>Methods understood by buggles</h2>\n<table border=1>\n<tr><td colspan=2 align=center><b>Moving</b><br/> (See also the note on exceptions, below)</td></tr>\n  <tr><td><b>Turn left<br/>Turn right<br/>Turn back<br/>Moving forward<br/>Moving back</b></td>\n      <td>[!java|c]void [/!]left()<br/>\n          [!java|c]void [/!]right()<br/>\n          [!java|c]void [/!]back()<br/>\n          [!java|c]void [/!][!python|java|scala]forward()[/!][!c]stepForward()[/!] or [!java|c]void [/!]forward([!java|c]int [/!]steps[!scala]:Int[/!])<br/>\n          [!java|c]void [/!][!python|java|scala]backward()[/!][!c]stepBackward()[/!] or [!java]void [/!]backward([!java|c]int [/!]steps[!scala]:Int[/!])<br/></td></tr>\n  <tr><td><b>Get X coordinate<br/>Get Y coordinate<br/>Set X coordinate<br/>Set Y coordinate<br/>Set position</b></td>\n      <td>[!java|c]int [/!]getX()[!scala]:Int[/!]<br/>\n          [!java|c]int [/!]getY()[!scala]:Int[/!]<br/>\n          [!java|c]void [/!]setX([!java|c]int [/!]x[!scala]:Int[/!])<br/>\n          [!java|c]void [/!]setY([!java|c]int [/!]y[!scala]:Int[/!])<br/>\n          [!java|c]void [/!]setPos([!java|c]int [/!]x[!scala]:Int[/!], [!java|c]int [/!]y[!scala]:Int[/!])</td></tr>\n<tr><td colspan=2>Note that the point (0,0) is on the top left corner, as it is often the case in Computer Science.</td></tr>\n\n<tr><td colspan=2 align=center><b>Information on the buggle</b></td></tr>\n  <tr><td><b>Get the color of the body<br/>Set the color of the body</b></td>\n      <td>[!java|c]Color [/!]getBodyColor()[!scala]:Color[/!]<br/>\n          [!java|c]void [/!]setBodyColor([!java|c]Color [/!]c[!scala]:Color[/!])</td></tr>\t\t\t\t\n  <tr><td><b>Look for a wall forward<br/>Look for a wall backward</b></td>\n      <td>[!java]boolean [/!][!c]int [/!]isFacingWall()[!scala]:Boolean[/!]<br/>\n          [!java]boolean [/!][!c]int [/!]isBackingWall()[!scala]:Boolean[/!]</td></tr>\t\t\t\t\n  <tr><td><b>Get heading<br/>Set heading</b><br/>valid directions are:</td>\n      <td>[!java|c]Direction [/!]getDirection()[!scala]:Direction[/!]<br/>\n          [!java|c]void [/!]setDirection([!java|c]Direction [/!]dir[!scala]:Direction[/!])<br/>\n          [!scala|java|python]Direction.[/!]NORTH, [!scala|java|python]Direction.[/!]EAST, [!scala|java|python]Direction.[/!]SOUTH and [!scala|java|python]Direction.[/!]WEST</td></tr>\n  <tr><td>Check whether the buggle is currently <b>selected in the interface</b></td>\n      <td>[!java]boolean [/!][!c]int [/!]isSelected()[!scala]:Boolean[/!]</td></tr>\n \n<tr><td colspan=2 align=center><b>About the brush</b></td></tr>\n  <tr><td><b>Brush down<br/>Brush up<br/>Get brush position</b></td>\n      <td>[!java|c]void [/!]brushUp()<br/>\n          [!java|c]void [/!]brushDown()<br/>\n          [!java]boolean [/!][!c]int [/!]isBrushDown()[!scala]:Boolean[/!]</td></tr>\n  <tr><td><b>Change the brush color<br/>Get the color of the brush</b></td>\n      <td>[!java|c]void [/!]setBrushColor([!java|c]Color [/!]c[!scala]:Color[/!])<br/>\n          [!java|c]Color [/!]getBrushColor()[!scala]:Color[/!]</td></tr>\n\n<tr><td colspan=2 align=center><b>Interacting with the world</b></td></tr>\n  <tr><td><b>Get the color of the ground</b></td>\n      <td>[!java|c]Color [/!]getGroundColor()[!scala]:Color[/!]</td></tr>\n\n  <tr><td><b>Look for a baggle on the ground<br/>Look for a baggle in bag<br/>Pickup a baggle<br/>Drop a baggle</b><br/>\n      (see the note on exceptions)</td>\n      <td>[!java]boolean [/!][!c]int [/!]isOverBaggle()[!scala]:Boolean[/!]<br/>\n          [!java]boolean [/!][!c]int [/!]isCarryingBaggle()[!scala]:Boolean[/!]<br/>\n          [!java]void [/!]pickupBaggle()<br/>\n          [!java]void [/!]dropBaggle()<br/>\n          &nbsp;</td></tr>\n\n  <tr><td><b>Look for a message<br/>Add a message<br/>Read the message<br/>Erase the message</b></td>\n      <td>[!java]boolean [/!][!c]int [/!]isOverMessage()[!scala]:Boolean[/!]<br/>\n          [!java]void [/!]writeMessage([!java]String [/!][!c]char* [/!]msg[!scala]:String[/!])<br/>\n          [!java]String [/!][!c]char* [/!]readMessage()[!scala]:String[/!]<br/>\n          [!java]void [/!]clearMessage()</td></tr>\n</table>\n\n<h2>Valid colors</h2>\n<table border=1>\n<tr><td>Name</td><td>Color</td></tr>\n<tr><td>[!scala|java|python]Color.[/!]black</td>    <td BGCOLOR=\"#000000\">&nbsp;</td></tr>\n<tr><td>[!scala|java|python]Color.[/!]blue</td>     <td BGCOLOR=\"#0000FF\">&nbsp;</td></tr>\n<tr><td>[!scala|java|python]Color.[/!]cyan</td>     <td BGCOLOR=\"#00FFFF\">&nbsp;</td></tr>\n<tr><td>[!scala|java|python]Color.[/!]darkGray</td> <td BGCOLOR=\"#404040\">&nbsp;</td></tr>\n<tr><td>[!scala|java|python]Color.[/!]gray</td>     <td BGCOLOR=\"#808080\">&nbsp;</td></tr>\n<tr><td>[!scala|java|python]Color.[/!]green</td>    <td BGCOLOR=\"#00FF00\">&nbsp;</td></tr>\n<tr><td>[!scala|java|python]Color.[/!]lightGray</td><td BGCOLOR=\"#C0C0C0\">&nbsp;</td></tr>\n<tr><td>[!scala|java|python]Color.[/!]magenta</td>  <td BGCOLOR=\"#FF00FF\">&nbsp;</td></tr>\n<tr><td>[!scala|java|python]Color.[/!]orange</td>   <td BGCOLOR=\"#FFC800\">&nbsp;</td></tr>\n<tr><td>[!scala|java|python]Color.[/!]pink</td>     <td BGCOLOR=\"#FFAFAF\">&nbsp;</td></tr>\n<tr><td>[!scala|java|python]Color.[/!]red</td>      <td BGCOLOR=\"#FF0000\">&nbsp;</td></tr>\n<tr><td>[!scala|java|python]Color.[/!]white</td>    <td BGCOLOR=\"#FFFFFF\">&nbsp;</td></tr>\n<tr><td>[!scala|java|python]Color.[/!]yellow</td>   <td BGCOLOR=\"#FFFF00\">&nbsp;</td></tr>\n</table>\n\n<h2>Note on exceptions</h2>\nRegular buggles throw a BuggleWallException exception if you ask them to\ntraverse a wall.  They throw a NoBaggleUnderBuggleException exception if you\nask them to pickup a baggle from an empty cell, or a\nAlreadyHaveBaggleException exception if they already carry a baggle.  Trying\nto drop a baggle on a cell already containing one throws an\nAlreadyHaveBaggleException exception. \nDropping a baggle when you have none throws a DontHaveBaggleException.\n<p>SimpleBuggles (ie, the one used in first exercises) display an error message\non problem so that you don't need to know what an exception is.</p>\n",
    "fr" : "\n<!-- Please don't translate this file but l10n/missions/plm.pot (see https://github.com/oster/PLM/wiki/Working-on-translations) -->\n<h1>Le monde des Buggles</h1>\nCe monde a été inventé par Lyn Turbak, du Wellesley College. Il est peuplé\nde Buggles, petites bêtes qui comprennent des ordres simples, et offre de\nnombreuses possibilités d'interaction avec le monde : prendre ou poser des\nobjets, colorier le sol, se cogner à des murs, etc.\n\n<h2>Méthodes comprises par les buggles</h2>\n<table border=1>\n<tr><td colspan=2 align=center><b>Bouger</b><br/> (voir aussi la note sur les exceptions, plus bas)</td></tr>\n  <tr><td><b>Tourner à gauche<br/>Tourner à droite<br/>Se retourner<br/>Avancer<br/>Reculer</b></td>\n      <td>[!java|c]void [/!]gauche()<br/>\n          [!java|c]void [/!]droite()<br/>\n          [!java|c]void [/!]retourne()<br/>\n          [!java|c]void [/!][!python|java|scala]avance()[/!][!c]avancePas()[/!] or\n[!java|c]void [/!]avance([!java|c]int [/!]nbPas[!scala]:Int[/!])<br/>\n          [!java|c]void [/!][!python|java|scala]recule()[/!][!c]reculePas()[/!] or\n[!java]void [/!]recule([!java|c]int [/!]nbPas[!scala]:Int[/!])<br/></td></tr>\n  <tr><td><b>Obtenir l'abscisse<br/>Obtenir l'ordonnée<br/>Changer l'abscisse<br/>Changer l'ordonnée<br/>Changer la position</b></td>\n      <td>[!java|c]int [/!]getX()[!scala]:Int[/!]<br/>\n          [!java|c]int [/!]getY()[!scala]:Int[/!]<br/>\n          [!java|c]void [/!]setX([!java|c]int [/!]x[!scala]:Int[/!])<br/>\n          [!java|c]void [/!]setY([!java|c]int [/!]y[!scala]:Int[/!])<br/>\n          [!java|c]void [/!]setPos([!java|c]int [/!]x[!scala]:Int[/!], [!java|c]int\n[/!]y[!scala]:Int[/!])</td></tr>\n<tr><td colspan=2>L'origine (0, 0) est dans le coin en haut à gauche, comme c'est souvent le\ncas en informatique.</td></tr>\n\n<tr><td colspan=2 align=center><b>Informations sur la buggle</b></td></tr>\n  <tr><td><b>Obtenir la couleur de la buggle</b><br/>Changer la couleur de la buggle</b></td>\n      <td>[!java|c]Color [/!]getCouleurCorps()[!scala]:Color[/!]<br/>\n          [!java|c]void [/!]setCouleurCorps([!java|c]Color [/!]c[!scala]:Color[/!])</td></tr>\t\t\t\t\n  <tr><td><b>Chercher un mur devant<br/>Chercher un mur derrière</b></td>\n      <td>[!java]boolean [/!][!c]int [/!]estFaceMur()[!scala]:Boolean[/!]<br/>\n          [!java]boolean [/!][!c]int [/!]estDosMur()[!scala]:Boolean[/!]</td></tr>\t\t\t\t\n  <tr><td><b>Obtenir la direction<br/>Changer la direction</b><br/>Les directions valides sont :</td>\n      <td>[!java|c]Direction [/!]getDirection()[!scala]:Direction[/!]<br/>\n          [!java|c]void [/!]setDirection([!java|c]Direction\n[/!]dir[!scala]:Direction[/!])<br/>\n          [!scala|java|python]Direction.[/!]NORTH (nord),\n[!scala|java|python]Direction.[/!]EAST (est),\n[!scala|java|python]Direction.[/!]SOUTH (sud) et\n[!scala|java|python]Direction.[/!]WEST (ouest)</td></tr>\n  <tr><td>Renvoi si la buggle est actuellement <b>sélectionnée dans l'interface</b></td>\n      <td>[!java]boolean [/!][!c]int [/!]estChoisie()[!scala]:Boolean[/!]</td></tr>\n \n<tr><td colspan=2 align=center><b>À propos de la brosse</b></td></tr>\n  <tr><td><b>Baisser la brosse<br/>Lever la brosse<br/>Obtenir la position de la brosse</b></td>\n      <td>[!java|c]void [/!]leveBrosse()<br/>\n          [!java|c]void [/!]baisseBrosse()<br/>\n          [!java]boolean [/!][!c]int [/!]estBrosseBaissee()[!scala]:Boolean[/!]</td></tr>\n  <tr><td><b>Modifier la couleur de la brosse<br/>Obtenir la couleur de la brosse</b></td>\n      <td>[!java|c]void [/!]setCouleurBrosse([!java|c]Color [/!]c[!scala]:Color[/!])<br/>\n          [!java|c]Color [/!]getCouleurBrosse()[!scala]:Color[/!]</td></tr>\n\n<tr><td colspan=2 align=center><b>Interagir avec le monde</b></td></tr>\n  <tr><td><b>Obtenir la couleur du sol</b></td>\n      <td>[!java|c]Color [/!]getCouleurSol()[!scala]:Color[/!]</td></tr>\n\n  <tr><td><b>Vrai si biscuit par terre<br/>Vrai si on porte un biscuit<br/>Ramasse un biscuit<br/>Poser un biscuit</b><br/>\n      (voir la note sur les exceptions)</td>\n      <td>[!java]boolean [/!][!c]int [/!]estSurBiscuit()[!scala]:Boolean[/!]<br/>\n          [!java]boolean [/!][!c]int [/!]porteBiscuit()[!scala]:Boolean[/!]<br/>\n          [!java]void [/!]prendBiscuit()<br/>\n          [!java]void [/!]poseBiscuit()<br/>\n          &nbsp;</td></tr>\n\n  <tr><td><b>Chercher un message<br/>Ajouter un message<br/>Lire le message<br/>Effacer le message</b></td>\n      <td>[!java]boolean [/!][!c]int [/!]estSurMessage()[!scala]:Boolean[/!]<br/>\n          [!java]void [/!]ecritMessage([!java]String [/!][!c]char*\n[/!]msg[!scala]:String[/!])<br/>\n          [!java]String [/!][!c]char* [/!]litMessage()[!scala]:String[/!]<br/>\n          [!java]void [/!]effaceMessage()</td></tr>\n</table>\n\n<h2>Couleurs valides</h2>\n<table border=1>\n<tr><td>Nom</td><td>Couleur</td></tr>\n<tr><td>[!scala|java|python]Color.[/!]black</td>    <td BGCOLOR=\"#000000\">&nbsp;</td></tr>\n<tr><td>[!scala|java|python]Color.[/!]blue</td>     <td BGCOLOR=\"#0000FF\">&nbsp;</td></tr>\n<tr><td>[!scala|java|python]Color.[/!]cyan</td>     <td BGCOLOR=\"#00FFFF\">&nbsp;</td></tr>\n<tr><td>[!scala|java|python]Color.[/!]darkGray</td> <td BGCOLOR=\"#404040\">&nbsp;</td></tr>\n<tr><td>[!scala|java|python]Color.[/!]gray</td>     <td BGCOLOR=\"#808080\">&nbsp;</td></tr>\n<tr><td>[!scala|java|python]Color.[/!]green</td>    <td BGCOLOR=\"#00FF00\">&nbsp;</td></tr>\n<tr><td>[!scala|java|python]Color.[/!]lightGray</td><td BGCOLOR=\"#C0C0C0\">&nbsp;</td></tr>\n<tr><td>[!scala|java|python]Color.[/!]magenta</td>  <td BGCOLOR=\"#FF00FF\">&nbsp;</td></tr>\n<tr><td>[!scala|java|python]Color.[/!]orange</td>   <td BGCOLOR=\"#FFC800\">&nbsp;</td></tr>\n<tr><td>[!scala|java|python]Color.[/!]pink</td>     <td BGCOLOR=\"#FFAFAF\">&nbsp;</td></tr>\n<tr><td>[!scala|java|python]Color.[/!]red</td>      <td BGCOLOR=\"#FF0000\">&nbsp;</td></tr>\n<tr><td>[!scala|java|python]Color.[/!]white</td>    <td BGCOLOR=\"#FFFFFF\">&nbsp;</td></tr>\n<tr><td>[!scala|java|python]Color.[/!]yellow</td>   <td BGCOLOR=\"#FFFF00\">&nbsp;</td></tr>\n</table>\n\n<h2>Note sur les exceptions</h2>\nLes buggles normales lèvent une exception BuggleWallException si on cherche\nà leur faire traverser un mur.\nElles lèvent une exception NoBaggleUnderBuggleException si vous cherchez à\nprendre un biscuit dans une case qui n'en contient pas, ou une exception\nAlreadyHaveBaggleException si vous portez déjà un biscuit.\nTenter de déposer un biscuit sur une case qui en contient déjà lève une\nexception AlreadyHaveBaggleException.\nTenter de poser un biscuit alors qu'on n'en a pas lève une exception\nDontHaveBaggleException.\n<p>Les \"SimpleBuggles\" (c.-à-d., celles utilisées dans les premiers exercices)\naffichent un message d'erreur sans que vous ayez à vous soucier de ce qu'est\nune exception.</p>\n"
  },
  "initialWorlds" : [ {
    "type" : "plm.universe.bugglequest.BuggleWorld",
    "@jsonId" : 1,
    "name" : "Desert",
    "width" : 7,
    "height" : 7,
    "entities" : [ {
      "type" : "plm.universe.bugglequest.SimpleBuggle",
      "name" : "Snake",
      "x" : 0,
      "y" : 6,
      "direction" : 1,
      "bodyColor" : [ 255, 0, 0, 255 ],
      "brushColor" : [ 255, 0, 0, 255 ],
      "world" : 1,
      "inited" : false,
      "brushDown" : false
    } ],
    "steps" : [ ],
    "about" : "<!-- Please don't translate this file but l10n/missions/plm.pot (see https://github.com/oster/PLM/wiki/Working-on-translations) -->\n<h1>BuggleWorld</h1>\nThis world was invented by Lyn Turbak, at Wellesley College. It is full of\nBuggles, little animals understanding simple orders, and offers numerous\npossibilities of interaction with the world: taking or dropping objects,\npaint the ground, hit walls, etc.\n\n<h2>Methods understood by buggles</h2>\n<table border=1>\n<tr><td colspan=2 align=center><b>Moving</b><br/> (See also the note on exceptions, below)</td></tr>\n  <tr><td><b>Turn left<br/>Turn right<br/>Turn back<br/>Moving forward<br/>Moving back</b></td>\n      <td>void left()<br/>\n          void right()<br/>\n          void back()<br/>\n          void forward() or void forward(int steps)<br/>\n          void backward() or void backward(int steps)<br/></td></tr>\n  <tr><td><b>Get X coordinate<br/>Get Y coordinate<br/>Set X coordinate<br/>Set Y coordinate<br/>Set position</b></td>\n      <td>int getX()<br/>\n          int getY()<br/>\n          void setX(int x)<br/>\n          void setY(int y)<br/>\n          void setPos(int x, int y)</td></tr>\n<tr><td colspan=2>Note that the point (0,0) is on the top left corner, as it is often the case in Computer Science.</td></tr>\n\n<tr><td colspan=2 align=center><b>Information on the buggle</b></td></tr>\n  <tr><td><b>Get the color of the body<br/>Set the color of the body</b></td>\n      <td>Color getBodyColor()<br/>\n          void setBodyColor(Color c)</td></tr>\t\t\t\t\n  <tr><td><b>Look for a wall forward<br/>Look for a wall backward</b></td>\n      <td>boolean isFacingWall()<br/>\n          boolean isBackingWall()</td></tr>\t\t\t\t\n  <tr><td><b>Get heading<br/>Set heading</b><br/>valid directions are:</td>\n      <td>Direction getDirection()<br/>\n          void setDirection(Direction dir)<br/>\n          Direction.NORTH, Direction.EAST, Direction.SOUTH and Direction.WEST</td></tr>\n  <tr><td>Check whether the buggle is currently <b>selected in the interface</b></td>\n      <td>boolean isSelected()</td></tr>\n \n<tr><td colspan=2 align=center><b>About the brush</b></td></tr>\n  <tr><td><b>Brush down<br/>Brush up<br/>Get brush position</b></td>\n      <td>void brushUp()<br/>\n          void brushDown()<br/>\n          boolean isBrushDown()</td></tr>\n  <tr><td><b>Change the brush color<br/>Get the color of the brush</b></td>\n      <td>void setBrushColor(Color c)<br/>\n          Color getBrushColor()</td></tr>\n\n<tr><td colspan=2 align=center><b>Interacting with the world</b></td></tr>\n  <tr><td><b>Get the color of the ground</b></td>\n      <td>Color getGroundColor()</td></tr>\n\n  <tr><td><b>Look for a baggle on the ground<br/>Look for a baggle in bag<br/>Pickup a baggle<br/>Drop a baggle</b><br/>\n      (see the note on exceptions)</td>\n      <td>boolean isOverBaggle()<br/>\n          boolean isCarryingBaggle()<br/>\n          void pickupBaggle()<br/>\n          void dropBaggle()<br/>\n          &nbsp;</td></tr>\n\n  <tr><td><b>Look for a message<br/>Add a message<br/>Read the message<br/>Erase the message</b></td>\n      <td>boolean isOverMessage()<br/>\n          void writeMessage(String msg)<br/>\n          String readMessage()<br/>\n          void clearMessage()</td></tr>\n</table>\n\n<h2>Valid colors</h2>\n<table border=1>\n<tr><td>Name</td><td>Color</td></tr>\n<tr><td>Color.black</td>    <td BGCOLOR=\"#000000\">&nbsp;</td></tr>\n<tr><td>Color.blue</td>     <td BGCOLOR=\"#0000FF\">&nbsp;</td></tr>\n<tr><td>Color.cyan</td>     <td BGCOLOR=\"#00FFFF\">&nbsp;</td></tr>\n<tr><td>Color.darkGray</td> <td BGCOLOR=\"#404040\">&nbsp;</td></tr>\n<tr><td>Color.gray</td>     <td BGCOLOR=\"#808080\">&nbsp;</td></tr>\n<tr><td>Color.green</td>    <td BGCOLOR=\"#00FF00\">&nbsp;</td></tr>\n<tr><td>Color.lightGray</td><td BGCOLOR=\"#C0C0C0\">&nbsp;</td></tr>\n<tr><td>Color.magenta</td>  <td BGCOLOR=\"#FF00FF\">&nbsp;</td></tr>\n<tr><td>Color.orange</td>   <td BGCOLOR=\"#FFC800\">&nbsp;</td></tr>\n<tr><td>Color.pink</td>     <td BGCOLOR=\"#FFAFAF\">&nbsp;</td></tr>\n<tr><td>Color.red</td>      <td BGCOLOR=\"#FF0000\">&nbsp;</td></tr>\n<tr><td>Color.white</td>    <td BGCOLOR=\"#FFFFFF\">&nbsp;</td></tr>\n<tr><td>Color.yellow</td>   <td BGCOLOR=\"#FFFF00\">&nbsp;</td></tr>\n</table>\n\n<h2>Note on exceptions</h2>\nRegular buggles throw a BuggleWallException exception if you ask them to\ntraverse a wall.  They throw a NoBaggleUnderBuggleException exception if you\nask them to pickup a baggle from an empty cell, or a\nAlreadyHaveBaggleException exception if they already carry a baggle.  Trying\nto drop a baggle on a cell already containing one throws an\nAlreadyHaveBaggleException exception. \nDropping a baggle when you have none throws a DontHaveBaggleException.\n<p>SimpleBuggles (ie, the one used in first exercises) display an error message\non problem so that you don't need to know what an exception is.</p>\n",
    "parameters" : null,
    "cells" : [ [ {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 1,
      "x" : 0,
      "y" : 0,
      "msgColor" : [ 128, 128, 230, 255 ],
      "content" : "",
      "leftWall" : true,
      "topWall" : true
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 1,
      "x" : 0,
      "y" : 1,
      "msgColor" : [ 128, 128, 230, 255 ],
      "content" : "",
      "leftWall" : true
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 1,
      "x" : 0,
      "y" : 2,
      "msgColor" : [ 128, 128, 230, 255 ],
      "content" : "",
      "leftWall" : true
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 1,
      "x" : 0,
      "y" : 3,
      "msgColor" : [ 128, 128, 230, 255 ],
      "content" : "",
      "leftWall" : true
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 1,
      "x" : 0,
      "y" : 4,
      "msgColor" : [ 128, 128, 230, 255 ],
      "content" : "",
      "leftWall" : true
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 1,
      "x" : 0,
      "y" : 5,
      "msgColor" : [ 128, 128, 230, 255 ],
      "content" : "",
      "leftWall" : true
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 1,
      "x" : 0,
      "y" : 6,
      "msgColor" : [ 128, 128, 230, 255 ],
      "content" : "",
      "leftWall" : true
    } ], [ {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 1,
      "x" : 1,
      "y" : 0,
      "topWall" : true
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 1,
      "x" : 1,
      "y" : 1
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 1,
      "x" : 1,
      "y" : 2
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 1,
      "x" : 1,
      "y" : 3
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 1,
      "x" : 1,
      "y" : 4
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 1,
      "x" : 1,
      "y" : 5
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 1,
      "x" : 1,
      "y" : 6
    } ], [ {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 1,
      "x" : 2,
      "y" : 0,
      "topWall" : true
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 1,
      "x" : 2,
      "y" : 1
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 1,
      "x" : 2,
      "y" : 2
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 1,
      "x" : 2,
      "y" : 3
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 1,
      "x" : 2,
      "y" : 4
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 1,
      "x" : 2,
      "y" : 5
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 1,
      "x" : 2,
      "y" : 6
    } ], [ {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 1,
      "x" : 3,
      "y" : 0,
      "topWall" : true
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 1,
      "x" : 3,
      "y" : 1
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 1,
      "x" : 3,
      "y" : 2
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 1,
      "x" : 3,
      "y" : 3
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 1,
      "x" : 3,
      "y" : 4
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 1,
      "x" : 3,
      "y" : 5
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 1,
      "x" : 3,
      "y" : 6
    } ], [ {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 1,
      "x" : 4,
      "y" : 0,
      "topWall" : true
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 1,
      "x" : 4,
      "y" : 1
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 1,
      "x" : 4,
      "y" : 2
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 1,
      "x" : 4,
      "y" : 3
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 1,
      "x" : 4,
      "y" : 4
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 1,
      "x" : 4,
      "y" : 5
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 1,
      "x" : 4,
      "y" : 6
    } ], [ {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 1,
      "x" : 5,
      "y" : 0,
      "topWall" : true
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 1,
      "x" : 5,
      "y" : 1
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 1,
      "x" : 5,
      "y" : 2
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 1,
      "x" : 5,
      "y" : 3
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 1,
      "x" : 5,
      "y" : 4
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 1,
      "x" : 5,
      "y" : 5
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 1,
      "x" : 5,
      "y" : 6
    } ], [ {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 1,
      "x" : 6,
      "y" : 0,
      "topWall" : true
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 1,
      "x" : 6,
      "y" : 1
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 1,
      "x" : 6,
      "y" : 2
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 1,
      "x" : 6,
      "y" : 3
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 1,
      "x" : 6,
      "y" : 4
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 1,
      "x" : 6,
      "y" : 5
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 1,
      "x" : 6,
      "y" : 6
    } ] ],
    "visibleGrid" : true,
    "easter" : false
  } ],
  "answerWorlds" : [ {
    "type" : "plm.universe.bugglequest.BuggleWorld",
    "@jsonId" : 2,
    "name" : "Desert",
    "width" : 7,
    "height" : 7,
    "entities" : [ {
      "type" : "plm.universe.bugglequest.SimpleBuggle",
      "name" : "Snake",
      "world" : 2,
      "inited" : true,
      "bodyColor" : [ 255, 0, 0, 255 ],
      "brushColor" : [ 255, 0, 0, 255 ],
      "x" : 6,
      "y" : 0,
      "direction" : 1,
      "brushDown" : true
    } ],
    "steps" : [ [ {
      "type" : "plm.universe.bugglequest.operations.ChangeBuggleBrushDown",
      "@jsonId" : 3,
      "buggleID" : "Snake",
      "oldBrushDown" : false,
      "newBrushDown" : true,
      "name" : "changeBuggleBrushDown"
    }, {
      "type" : "plm.universe.bugglequest.operations.ChangeCellColor",
      "@jsonId" : 4,
      "x" : 0,
      "y" : 6,
      "oldColor" : [ 255, 255, 255, 255 ],
      "name" : "changeCellColor",
      "newColor" : [ 255, 0, 0, 255 ]
    }, {
      "type" : "plm.universe.bugglequest.operations.MoveBuggleOperation",
      "@jsonId" : 5,
      "buggleID" : "Snake",
      "oldX" : 0,
      "oldY" : 6,
      "newX" : 1,
      "newY" : 6,
      "name" : "moveBuggleOperation"
    }, {
      "type" : "plm.universe.bugglequest.operations.ChangeCellColor",
      "@jsonId" : 6,
      "x" : 1,
      "y" : 6,
      "oldColor" : [ 255, 255, 255, 255 ],
      "name" : "changeCellColor",
      "newColor" : [ 255, 0, 0, 255 ]
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.MoveBuggleOperation",
      "@jsonId" : 7,
      "buggleID" : "Snake",
      "oldX" : 1,
      "oldY" : 6,
      "newX" : 2,
      "newY" : 6,
      "name" : "moveBuggleOperation"
    }, {
      "type" : "plm.universe.bugglequest.operations.ChangeCellColor",
      "@jsonId" : 8,
      "x" : 2,
      "y" : 6,
      "oldColor" : [ 255, 255, 255, 255 ],
      "name" : "changeCellColor",
      "newColor" : [ 255, 0, 0, 255 ]
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.MoveBuggleOperation",
      "@jsonId" : 9,
      "buggleID" : "Snake",
      "oldX" : 2,
      "oldY" : 6,
      "newX" : 3,
      "newY" : 6,
      "name" : "moveBuggleOperation"
    }, {
      "type" : "plm.universe.bugglequest.operations.ChangeCellColor",
      "@jsonId" : 10,
      "x" : 3,
      "y" : 6,
      "oldColor" : [ 255, 255, 255, 255 ],
      "name" : "changeCellColor",
      "newColor" : [ 255, 0, 0, 255 ]
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.MoveBuggleOperation",
      "@jsonId" : 11,
      "buggleID" : "Snake",
      "oldX" : 3,
      "oldY" : 6,
      "newX" : 4,
      "newY" : 6,
      "name" : "moveBuggleOperation"
    }, {
      "type" : "plm.universe.bugglequest.operations.ChangeCellColor",
      "@jsonId" : 12,
      "x" : 4,
      "y" : 6,
      "oldColor" : [ 255, 255, 255, 255 ],
      "name" : "changeCellColor",
      "newColor" : [ 255, 0, 0, 255 ]
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.MoveBuggleOperation",
      "@jsonId" : 13,
      "buggleID" : "Snake",
      "oldX" : 4,
      "oldY" : 6,
      "newX" : 5,
      "newY" : 6,
      "name" : "moveBuggleOperation"
    }, {
      "type" : "plm.universe.bugglequest.operations.ChangeCellColor",
      "@jsonId" : 14,
      "x" : 5,
      "y" : 6,
      "oldColor" : [ 255, 255, 255, 255 ],
      "name" : "changeCellColor",
      "newColor" : [ 255, 0, 0, 255 ]
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.MoveBuggleOperation",
      "@jsonId" : 15,
      "buggleID" : "Snake",
      "oldX" : 5,
      "oldY" : 6,
      "newX" : 6,
      "newY" : 6,
      "name" : "moveBuggleOperation"
    }, {
      "type" : "plm.universe.bugglequest.operations.ChangeCellColor",
      "@jsonId" : 16,
      "x" : 6,
      "y" : 6,
      "oldColor" : [ 255, 255, 255, 255 ],
      "name" : "changeCellColor",
      "newColor" : [ 255, 0, 0, 255 ]
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.ChangeBuggleDirection",
      "@jsonId" : 17,
      "buggleID" : "Snake",
      "oldDirection" : 1,
      "newDirection" : 0,
      "name" : "changeBuggleDirection"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.ChangeBuggleDirection",
      "@jsonId" : 18,
      "buggleID" : "Snake",
      "oldDirection" : 0,
      "newDirection" : 1,
      "name" : "changeBuggleDirection"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.ChangeBuggleDirection",
      "@jsonId" : 19,
      "buggleID" : "Snake",
      "oldDirection" : 1,
      "newDirection" : 0,
      "name" : "changeBuggleDirection"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.MoveBuggleOperation",
      "@jsonId" : 20,
      "buggleID" : "Snake",
      "oldX" : 6,
      "oldY" : 6,
      "newX" : 6,
      "newY" : 5,
      "name" : "moveBuggleOperation"
    }, {
      "type" : "plm.universe.bugglequest.operations.ChangeCellColor",
      "@jsonId" : 21,
      "x" : 6,
      "y" : 5,
      "oldColor" : [ 255, 255, 255, 255 ],
      "name" : "changeCellColor",
      "newColor" : [ 255, 0, 0, 255 ]
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.ChangeBuggleDirection",
      "@jsonId" : 22,
      "buggleID" : "Snake",
      "oldDirection" : 0,
      "newDirection" : 3,
      "name" : "changeBuggleDirection"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.MoveBuggleOperation",
      "@jsonId" : 23,
      "buggleID" : "Snake",
      "oldX" : 6,
      "oldY" : 5,
      "newX" : 5,
      "newY" : 5,
      "name" : "moveBuggleOperation"
    }, {
      "type" : "plm.universe.bugglequest.operations.ChangeCellColor",
      "@jsonId" : 24,
      "x" : 5,
      "y" : 5,
      "oldColor" : [ 255, 255, 255, 255 ],
      "name" : "changeCellColor",
      "newColor" : [ 255, 0, 0, 255 ]
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.MoveBuggleOperation",
      "@jsonId" : 25,
      "buggleID" : "Snake",
      "oldX" : 5,
      "oldY" : 5,
      "newX" : 4,
      "newY" : 5,
      "name" : "moveBuggleOperation"
    }, {
      "type" : "plm.universe.bugglequest.operations.ChangeCellColor",
      "@jsonId" : 26,
      "x" : 4,
      "y" : 5,
      "oldColor" : [ 255, 255, 255, 255 ],
      "name" : "changeCellColor",
      "newColor" : [ 255, 0, 0, 255 ]
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.MoveBuggleOperation",
      "@jsonId" : 27,
      "buggleID" : "Snake",
      "oldX" : 4,
      "oldY" : 5,
      "newX" : 3,
      "newY" : 5,
      "name" : "moveBuggleOperation"
    }, {
      "type" : "plm.universe.bugglequest.operations.ChangeCellColor",
      "@jsonId" : 28,
      "x" : 3,
      "y" : 5,
      "oldColor" : [ 255, 255, 255, 255 ],
      "name" : "changeCellColor",
      "newColor" : [ 255, 0, 0, 255 ]
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.MoveBuggleOperation",
      "@jsonId" : 29,
      "buggleID" : "Snake",
      "oldX" : 3,
      "oldY" : 5,
      "newX" : 2,
      "newY" : 5,
      "name" : "moveBuggleOperation"
    }, {
      "type" : "plm.universe.bugglequest.operations.ChangeCellColor",
      "@jsonId" : 30,
      "x" : 2,
      "y" : 5,
      "oldColor" : [ 255, 255, 255, 255 ],
      "name" : "changeCellColor",
      "newColor" : [ 255, 0, 0, 255 ]
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.MoveBuggleOperation",
      "@jsonId" : 31,
      "buggleID" : "Snake",
      "oldX" : 2,
      "oldY" : 5,
      "newX" : 1,
      "newY" : 5,
      "name" : "moveBuggleOperation"
    }, {
      "type" : "plm.universe.bugglequest.operations.ChangeCellColor",
      "@jsonId" : 32,
      "x" : 1,
      "y" : 5,
      "oldColor" : [ 255, 255, 255, 255 ],
      "name" : "changeCellColor",
      "newColor" : [ 255, 0, 0, 255 ]
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.MoveBuggleOperation",
      "@jsonId" : 33,
      "buggleID" : "Snake",
      "oldX" : 1,
      "oldY" : 5,
      "newX" : 0,
      "newY" : 5,
      "name" : "moveBuggleOperation"
    }, {
      "type" : "plm.universe.bugglequest.operations.ChangeCellColor",
      "@jsonId" : 34,
      "x" : 0,
      "y" : 5,
      "oldColor" : [ 255, 255, 255, 255 ],
      "name" : "changeCellColor",
      "newColor" : [ 255, 0, 0, 255 ]
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.ChangeBuggleDirection",
      "@jsonId" : 35,
      "buggleID" : "Snake",
      "oldDirection" : 3,
      "newDirection" : 2,
      "name" : "changeBuggleDirection"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.ChangeBuggleDirection",
      "@jsonId" : 36,
      "buggleID" : "Snake",
      "oldDirection" : 2,
      "newDirection" : 3,
      "name" : "changeBuggleDirection"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.ChangeBuggleDirection",
      "@jsonId" : 37,
      "buggleID" : "Snake",
      "oldDirection" : 3,
      "newDirection" : 0,
      "name" : "changeBuggleDirection"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.MoveBuggleOperation",
      "@jsonId" : 38,
      "buggleID" : "Snake",
      "oldX" : 0,
      "oldY" : 5,
      "newX" : 0,
      "newY" : 4,
      "name" : "moveBuggleOperation"
    }, {
      "type" : "plm.universe.bugglequest.operations.ChangeCellColor",
      "@jsonId" : 39,
      "x" : 0,
      "y" : 4,
      "oldColor" : [ 255, 255, 255, 255 ],
      "name" : "changeCellColor",
      "newColor" : [ 255, 0, 0, 255 ]
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.ChangeBuggleDirection",
      "@jsonId" : 40,
      "buggleID" : "Snake",
      "oldDirection" : 0,
      "newDirection" : 1,
      "name" : "changeBuggleDirection"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.MoveBuggleOperation",
      "@jsonId" : 41,
      "buggleID" : "Snake",
      "oldX" : 0,
      "oldY" : 4,
      "newX" : 1,
      "newY" : 4,
      "name" : "moveBuggleOperation"
    }, {
      "type" : "plm.universe.bugglequest.operations.ChangeCellColor",
      "@jsonId" : 42,
      "x" : 1,
      "y" : 4,
      "oldColor" : [ 255, 255, 255, 255 ],
      "name" : "changeCellColor",
      "newColor" : [ 255, 0, 0, 255 ]
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.MoveBuggleOperation",
      "@jsonId" : 43,
      "buggleID" : "Snake",
      "oldX" : 1,
      "oldY" : 4,
      "newX" : 2,
      "newY" : 4,
      "name" : "moveBuggleOperation"
    }, {
      "type" : "plm.universe.bugglequest.operations.ChangeCellColor",
      "@jsonId" : 44,
      "x" : 2,
      "y" : 4,
      "oldColor" : [ 255, 255, 255, 255 ],
      "name" : "changeCellColor",
      "newColor" : [ 255, 0, 0, 255 ]
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.MoveBuggleOperation",
      "@jsonId" : 45,
      "buggleID" : "Snake",
      "oldX" : 2,
      "oldY" : 4,
      "newX" : 3,
      "newY" : 4,
      "name" : "moveBuggleOperation"
    }, {
      "type" : "plm.universe.bugglequest.operations.ChangeCellColor",
      "@jsonId" : 46,
      "x" : 3,
      "y" : 4,
      "oldColor" : [ 255, 255, 255, 255 ],
      "name" : "changeCellColor",
      "newColor" : [ 255, 0, 0, 255 ]
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.MoveBuggleOperation",
      "@jsonId" : 47,
      "buggleID" : "Snake",
      "oldX" : 3,
      "oldY" : 4,
      "newX" : 4,
      "newY" : 4,
      "name" : "moveBuggleOperation"
    }, {
      "type" : "plm.universe.bugglequest.operations.ChangeCellColor",
      "@jsonId" : 48,
      "x" : 4,
      "y" : 4,
      "oldColor" : [ 255, 255, 255, 255 ],
      "name" : "changeCellColor",
      "newColor" : [ 255, 0, 0, 255 ]
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.MoveBuggleOperation",
      "@jsonId" : 49,
      "buggleID" : "Snake",
      "oldX" : 4,
      "oldY" : 4,
      "newX" : 5,
      "newY" : 4,
      "name" : "moveBuggleOperation"
    }, {
      "type" : "plm.universe.bugglequest.operations.ChangeCellColor",
      "@jsonId" : 50,
      "x" : 5,
      "y" : 4,
      "oldColor" : [ 255, 255, 255, 255 ],
      "name" : "changeCellColor",
      "newColor" : [ 255, 0, 0, 255 ]
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.MoveBuggleOperation",
      "@jsonId" : 51,
      "buggleID" : "Snake",
      "oldX" : 5,
      "oldY" : 4,
      "newX" : 6,
      "newY" : 4,
      "name" : "moveBuggleOperation"
    }, {
      "type" : "plm.universe.bugglequest.operations.ChangeCellColor",
      "@jsonId" : 52,
      "x" : 6,
      "y" : 4,
      "oldColor" : [ 255, 255, 255, 255 ],
      "name" : "changeCellColor",
      "newColor" : [ 255, 0, 0, 255 ]
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.ChangeBuggleDirection",
      "@jsonId" : 53,
      "buggleID" : "Snake",
      "oldDirection" : 1,
      "newDirection" : 0,
      "name" : "changeBuggleDirection"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.ChangeBuggleDirection",
      "@jsonId" : 54,
      "buggleID" : "Snake",
      "oldDirection" : 0,
      "newDirection" : 1,
      "name" : "changeBuggleDirection"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.ChangeBuggleDirection",
      "@jsonId" : 55,
      "buggleID" : "Snake",
      "oldDirection" : 1,
      "newDirection" : 0,
      "name" : "changeBuggleDirection"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.MoveBuggleOperation",
      "@jsonId" : 56,
      "buggleID" : "Snake",
      "oldX" : 6,
      "oldY" : 4,
      "newX" : 6,
      "newY" : 3,
      "name" : "moveBuggleOperation"
    }, {
      "type" : "plm.universe.bugglequest.operations.ChangeCellColor",
      "@jsonId" : 57,
      "x" : 6,
      "y" : 3,
      "oldColor" : [ 255, 255, 255, 255 ],
      "name" : "changeCellColor",
      "newColor" : [ 255, 0, 0, 255 ]
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.ChangeBuggleDirection",
      "@jsonId" : 58,
      "buggleID" : "Snake",
      "oldDirection" : 0,
      "newDirection" : 3,
      "name" : "changeBuggleDirection"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.MoveBuggleOperation",
      "@jsonId" : 59,
      "buggleID" : "Snake",
      "oldX" : 6,
      "oldY" : 3,
      "newX" : 5,
      "newY" : 3,
      "name" : "moveBuggleOperation"
    }, {
      "type" : "plm.universe.bugglequest.operations.ChangeCellColor",
      "@jsonId" : 60,
      "x" : 5,
      "y" : 3,
      "oldColor" : [ 255, 255, 255, 255 ],
      "name" : "changeCellColor",
      "newColor" : [ 255, 0, 0, 255 ]
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.MoveBuggleOperation",
      "@jsonId" : 61,
      "buggleID" : "Snake",
      "oldX" : 5,
      "oldY" : 3,
      "newX" : 4,
      "newY" : 3,
      "name" : "moveBuggleOperation"
    }, {
      "type" : "plm.universe.bugglequest.operations.ChangeCellColor",
      "@jsonId" : 62,
      "x" : 4,
      "y" : 3,
      "oldColor" : [ 255, 255, 255, 255 ],
      "name" : "changeCellColor",
      "newColor" : [ 255, 0, 0, 255 ]
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.MoveBuggleOperation",
      "@jsonId" : 63,
      "buggleID" : "Snake",
      "oldX" : 4,
      "oldY" : 3,
      "newX" : 3,
      "newY" : 3,
      "name" : "moveBuggleOperation"
    }, {
      "type" : "plm.universe.bugglequest.operations.ChangeCellColor",
      "@jsonId" : 64,
      "x" : 3,
      "y" : 3,
      "oldColor" : [ 255, 255, 255, 255 ],
      "name" : "changeCellColor",
      "newColor" : [ 255, 0, 0, 255 ]
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.MoveBuggleOperation",
      "@jsonId" : 65,
      "buggleID" : "Snake",
      "oldX" : 3,
      "oldY" : 3,
      "newX" : 2,
      "newY" : 3,
      "name" : "moveBuggleOperation"
    }, {
      "type" : "plm.universe.bugglequest.operations.ChangeCellColor",
      "@jsonId" : 66,
      "x" : 2,
      "y" : 3,
      "oldColor" : [ 255, 255, 255, 255 ],
      "name" : "changeCellColor",
      "newColor" : [ 255, 0, 0, 255 ]
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.MoveBuggleOperation",
      "@jsonId" : 67,
      "buggleID" : "Snake",
      "oldX" : 2,
      "oldY" : 3,
      "newX" : 1,
      "newY" : 3,
      "name" : "moveBuggleOperation"
    }, {
      "type" : "plm.universe.bugglequest.operations.ChangeCellColor",
      "@jsonId" : 68,
      "x" : 1,
      "y" : 3,
      "oldColor" : [ 255, 255, 255, 255 ],
      "name" : "changeCellColor",
      "newColor" : [ 255, 0, 0, 255 ]
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.MoveBuggleOperation",
      "@jsonId" : 69,
      "buggleID" : "Snake",
      "oldX" : 1,
      "oldY" : 3,
      "newX" : 0,
      "newY" : 3,
      "name" : "moveBuggleOperation"
    }, {
      "type" : "plm.universe.bugglequest.operations.ChangeCellColor",
      "@jsonId" : 70,
      "x" : 0,
      "y" : 3,
      "oldColor" : [ 255, 255, 255, 255 ],
      "name" : "changeCellColor",
      "newColor" : [ 255, 0, 0, 255 ]
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.ChangeBuggleDirection",
      "@jsonId" : 71,
      "buggleID" : "Snake",
      "oldDirection" : 3,
      "newDirection" : 2,
      "name" : "changeBuggleDirection"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.ChangeBuggleDirection",
      "@jsonId" : 72,
      "buggleID" : "Snake",
      "oldDirection" : 2,
      "newDirection" : 3,
      "name" : "changeBuggleDirection"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.ChangeBuggleDirection",
      "@jsonId" : 73,
      "buggleID" : "Snake",
      "oldDirection" : 3,
      "newDirection" : 0,
      "name" : "changeBuggleDirection"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.MoveBuggleOperation",
      "@jsonId" : 74,
      "buggleID" : "Snake",
      "oldX" : 0,
      "oldY" : 3,
      "newX" : 0,
      "newY" : 2,
      "name" : "moveBuggleOperation"
    }, {
      "type" : "plm.universe.bugglequest.operations.ChangeCellColor",
      "@jsonId" : 75,
      "x" : 0,
      "y" : 2,
      "oldColor" : [ 255, 255, 255, 255 ],
      "name" : "changeCellColor",
      "newColor" : [ 255, 0, 0, 255 ]
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.ChangeBuggleDirection",
      "@jsonId" : 76,
      "buggleID" : "Snake",
      "oldDirection" : 0,
      "newDirection" : 1,
      "name" : "changeBuggleDirection"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.MoveBuggleOperation",
      "@jsonId" : 77,
      "buggleID" : "Snake",
      "oldX" : 0,
      "oldY" : 2,
      "newX" : 1,
      "newY" : 2,
      "name" : "moveBuggleOperation"
    }, {
      "type" : "plm.universe.bugglequest.operations.ChangeCellColor",
      "@jsonId" : 78,
      "x" : 1,
      "y" : 2,
      "oldColor" : [ 255, 255, 255, 255 ],
      "name" : "changeCellColor",
      "newColor" : [ 255, 0, 0, 255 ]
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.MoveBuggleOperation",
      "@jsonId" : 79,
      "buggleID" : "Snake",
      "oldX" : 1,
      "oldY" : 2,
      "newX" : 2,
      "newY" : 2,
      "name" : "moveBuggleOperation"
    }, {
      "type" : "plm.universe.bugglequest.operations.ChangeCellColor",
      "@jsonId" : 80,
      "x" : 2,
      "y" : 2,
      "oldColor" : [ 255, 255, 255, 255 ],
      "name" : "changeCellColor",
      "newColor" : [ 255, 0, 0, 255 ]
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.MoveBuggleOperation",
      "@jsonId" : 81,
      "buggleID" : "Snake",
      "oldX" : 2,
      "oldY" : 2,
      "newX" : 3,
      "newY" : 2,
      "name" : "moveBuggleOperation"
    }, {
      "type" : "plm.universe.bugglequest.operations.ChangeCellColor",
      "@jsonId" : 82,
      "x" : 3,
      "y" : 2,
      "oldColor" : [ 255, 255, 255, 255 ],
      "name" : "changeCellColor",
      "newColor" : [ 255, 0, 0, 255 ]
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.MoveBuggleOperation",
      "@jsonId" : 83,
      "buggleID" : "Snake",
      "oldX" : 3,
      "oldY" : 2,
      "newX" : 4,
      "newY" : 2,
      "name" : "moveBuggleOperation"
    }, {
      "type" : "plm.universe.bugglequest.operations.ChangeCellColor",
      "@jsonId" : 84,
      "x" : 4,
      "y" : 2,
      "oldColor" : [ 255, 255, 255, 255 ],
      "name" : "changeCellColor",
      "newColor" : [ 255, 0, 0, 255 ]
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.MoveBuggleOperation",
      "@jsonId" : 85,
      "buggleID" : "Snake",
      "oldX" : 4,
      "oldY" : 2,
      "newX" : 5,
      "newY" : 2,
      "name" : "moveBuggleOperation"
    }, {
      "type" : "plm.universe.bugglequest.operations.ChangeCellColor",
      "@jsonId" : 86,
      "x" : 5,
      "y" : 2,
      "oldColor" : [ 255, 255, 255, 255 ],
      "name" : "changeCellColor",
      "newColor" : [ 255, 0, 0, 255 ]
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.MoveBuggleOperation",
      "@jsonId" : 87,
      "buggleID" : "Snake",
      "oldX" : 5,
      "oldY" : 2,
      "newX" : 6,
      "newY" : 2,
      "name" : "moveBuggleOperation"
    }, {
      "type" : "plm.universe.bugglequest.operations.ChangeCellColor",
      "@jsonId" : 88,
      "x" : 6,
      "y" : 2,
      "oldColor" : [ 255, 255, 255, 255 ],
      "name" : "changeCellColor",
      "newColor" : [ 255, 0, 0, 255 ]
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.ChangeBuggleDirection",
      "@jsonId" : 89,
      "buggleID" : "Snake",
      "oldDirection" : 1,
      "newDirection" : 0,
      "name" : "changeBuggleDirection"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.ChangeBuggleDirection",
      "@jsonId" : 90,
      "buggleID" : "Snake",
      "oldDirection" : 0,
      "newDirection" : 1,
      "name" : "changeBuggleDirection"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.ChangeBuggleDirection",
      "@jsonId" : 91,
      "buggleID" : "Snake",
      "oldDirection" : 1,
      "newDirection" : 0,
      "name" : "changeBuggleDirection"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.MoveBuggleOperation",
      "@jsonId" : 92,
      "buggleID" : "Snake",
      "oldX" : 6,
      "oldY" : 2,
      "newX" : 6,
      "newY" : 1,
      "name" : "moveBuggleOperation"
    }, {
      "type" : "plm.universe.bugglequest.operations.ChangeCellColor",
      "@jsonId" : 93,
      "x" : 6,
      "y" : 1,
      "oldColor" : [ 255, 255, 255, 255 ],
      "name" : "changeCellColor",
      "newColor" : [ 255, 0, 0, 255 ]
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.ChangeBuggleDirection",
      "@jsonId" : 94,
      "buggleID" : "Snake",
      "oldDirection" : 0,
      "newDirection" : 3,
      "name" : "changeBuggleDirection"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.MoveBuggleOperation",
      "@jsonId" : 95,
      "buggleID" : "Snake",
      "oldX" : 6,
      "oldY" : 1,
      "newX" : 5,
      "newY" : 1,
      "name" : "moveBuggleOperation"
    }, {
      "type" : "plm.universe.bugglequest.operations.ChangeCellColor",
      "@jsonId" : 96,
      "x" : 5,
      "y" : 1,
      "oldColor" : [ 255, 255, 255, 255 ],
      "name" : "changeCellColor",
      "newColor" : [ 255, 0, 0, 255 ]
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.MoveBuggleOperation",
      "@jsonId" : 97,
      "buggleID" : "Snake",
      "oldX" : 5,
      "oldY" : 1,
      "newX" : 4,
      "newY" : 1,
      "name" : "moveBuggleOperation"
    }, {
      "type" : "plm.universe.bugglequest.operations.ChangeCellColor",
      "@jsonId" : 98,
      "x" : 4,
      "y" : 1,
      "oldColor" : [ 255, 255, 255, 255 ],
      "name" : "changeCellColor",
      "newColor" : [ 255, 0, 0, 255 ]
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.MoveBuggleOperation",
      "@jsonId" : 99,
      "buggleID" : "Snake",
      "oldX" : 4,
      "oldY" : 1,
      "newX" : 3,
      "newY" : 1,
      "name" : "moveBuggleOperation"
    }, {
      "type" : "plm.universe.bugglequest.operations.ChangeCellColor",
      "@jsonId" : 100,
      "x" : 3,
      "y" : 1,
      "oldColor" : [ 255, 255, 255, 255 ],
      "name" : "changeCellColor",
      "newColor" : [ 255, 0, 0, 255 ]
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.MoveBuggleOperation",
      "@jsonId" : 101,
      "buggleID" : "Snake",
      "oldX" : 3,
      "oldY" : 1,
      "newX" : 2,
      "newY" : 1,
      "name" : "moveBuggleOperation"
    }, {
      "type" : "plm.universe.bugglequest.operations.ChangeCellColor",
      "@jsonId" : 102,
      "x" : 2,
      "y" : 1,
      "oldColor" : [ 255, 255, 255, 255 ],
      "name" : "changeCellColor",
      "newColor" : [ 255, 0, 0, 255 ]
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.MoveBuggleOperation",
      "@jsonId" : 103,
      "buggleID" : "Snake",
      "oldX" : 2,
      "oldY" : 1,
      "newX" : 1,
      "newY" : 1,
      "name" : "moveBuggleOperation"
    }, {
      "type" : "plm.universe.bugglequest.operations.ChangeCellColor",
      "@jsonId" : 104,
      "x" : 1,
      "y" : 1,
      "oldColor" : [ 255, 255, 255, 255 ],
      "name" : "changeCellColor",
      "newColor" : [ 255, 0, 0, 255 ]
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.MoveBuggleOperation",
      "@jsonId" : 105,
      "buggleID" : "Snake",
      "oldX" : 1,
      "oldY" : 1,
      "newX" : 0,
      "newY" : 1,
      "name" : "moveBuggleOperation"
    }, {
      "type" : "plm.universe.bugglequest.operations.ChangeCellColor",
      "@jsonId" : 106,
      "x" : 0,
      "y" : 1,
      "oldColor" : [ 255, 255, 255, 255 ],
      "name" : "changeCellColor",
      "newColor" : [ 255, 0, 0, 255 ]
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.ChangeBuggleDirection",
      "@jsonId" : 107,
      "buggleID" : "Snake",
      "oldDirection" : 3,
      "newDirection" : 2,
      "name" : "changeBuggleDirection"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.ChangeBuggleDirection",
      "@jsonId" : 108,
      "buggleID" : "Snake",
      "oldDirection" : 2,
      "newDirection" : 3,
      "name" : "changeBuggleDirection"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.ChangeBuggleDirection",
      "@jsonId" : 109,
      "buggleID" : "Snake",
      "oldDirection" : 3,
      "newDirection" : 0,
      "name" : "changeBuggleDirection"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.MoveBuggleOperation",
      "@jsonId" : 110,
      "buggleID" : "Snake",
      "oldX" : 0,
      "oldY" : 1,
      "newX" : 0,
      "newY" : 0,
      "name" : "moveBuggleOperation"
    }, {
      "type" : "plm.universe.bugglequest.operations.ChangeCellColor",
      "@jsonId" : 111,
      "x" : 0,
      "y" : 0,
      "oldColor" : [ 255, 255, 255, 255 ],
      "name" : "changeCellColor",
      "newColor" : [ 255, 0, 0, 255 ]
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.ChangeBuggleDirection",
      "@jsonId" : 112,
      "buggleID" : "Snake",
      "oldDirection" : 0,
      "newDirection" : 1,
      "name" : "changeBuggleDirection"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.MoveBuggleOperation",
      "@jsonId" : 113,
      "buggleID" : "Snake",
      "oldX" : 0,
      "oldY" : 0,
      "newX" : 1,
      "newY" : 0,
      "name" : "moveBuggleOperation"
    }, {
      "type" : "plm.universe.bugglequest.operations.ChangeCellColor",
      "@jsonId" : 114,
      "x" : 1,
      "y" : 0,
      "oldColor" : [ 255, 255, 255, 255 ],
      "name" : "changeCellColor",
      "newColor" : [ 255, 0, 0, 255 ]
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.MoveBuggleOperation",
      "@jsonId" : 115,
      "buggleID" : "Snake",
      "oldX" : 1,
      "oldY" : 0,
      "newX" : 2,
      "newY" : 0,
      "name" : "moveBuggleOperation"
    }, {
      "type" : "plm.universe.bugglequest.operations.ChangeCellColor",
      "@jsonId" : 116,
      "x" : 2,
      "y" : 0,
      "oldColor" : [ 255, 255, 255, 255 ],
      "name" : "changeCellColor",
      "newColor" : [ 255, 0, 0, 255 ]
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.MoveBuggleOperation",
      "@jsonId" : 117,
      "buggleID" : "Snake",
      "oldX" : 2,
      "oldY" : 0,
      "newX" : 3,
      "newY" : 0,
      "name" : "moveBuggleOperation"
    }, {
      "type" : "plm.universe.bugglequest.operations.ChangeCellColor",
      "@jsonId" : 118,
      "x" : 3,
      "y" : 0,
      "oldColor" : [ 255, 255, 255, 255 ],
      "name" : "changeCellColor",
      "newColor" : [ 255, 0, 0, 255 ]
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.MoveBuggleOperation",
      "@jsonId" : 119,
      "buggleID" : "Snake",
      "oldX" : 3,
      "oldY" : 0,
      "newX" : 4,
      "newY" : 0,
      "name" : "moveBuggleOperation"
    }, {
      "type" : "plm.universe.bugglequest.operations.ChangeCellColor",
      "@jsonId" : 120,
      "x" : 4,
      "y" : 0,
      "oldColor" : [ 255, 255, 255, 255 ],
      "name" : "changeCellColor",
      "newColor" : [ 255, 0, 0, 255 ]
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.MoveBuggleOperation",
      "@jsonId" : 121,
      "buggleID" : "Snake",
      "oldX" : 4,
      "oldY" : 0,
      "newX" : 5,
      "newY" : 0,
      "name" : "moveBuggleOperation"
    }, {
      "type" : "plm.universe.bugglequest.operations.ChangeCellColor",
      "@jsonId" : 122,
      "x" : 5,
      "y" : 0,
      "oldColor" : [ 255, 255, 255, 255 ],
      "name" : "changeCellColor",
      "newColor" : [ 255, 0, 0, 255 ]
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.MoveBuggleOperation",
      "@jsonId" : 123,
      "buggleID" : "Snake",
      "oldX" : 5,
      "oldY" : 0,
      "newX" : 6,
      "newY" : 0,
      "name" : "moveBuggleOperation"
    }, {
      "type" : "plm.universe.bugglequest.operations.ChangeCellColor",
      "@jsonId" : 124,
      "x" : 6,
      "y" : 0,
      "oldColor" : [ 255, 255, 255, 255 ],
      "name" : "changeCellColor",
      "newColor" : [ 255, 0, 0, 255 ]
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.ChangeBuggleDirection",
      "@jsonId" : 125,
      "buggleID" : "Snake",
      "oldDirection" : 1,
      "newDirection" : 0,
      "name" : "changeBuggleDirection"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.ChangeBuggleDirection",
      "@jsonId" : 126,
      "buggleID" : "Snake",
      "oldDirection" : 0,
      "newDirection" : 1,
      "name" : "changeBuggleDirection"
    } ] ],
    "about" : "<!-- Please don't translate this file but l10n/missions/plm.pot (see https://github.com/oster/PLM/wiki/Working-on-translations) -->\n<h1>BuggleWorld</h1>\nThis world was invented by Lyn Turbak, at Wellesley College. It is full of\nBuggles, little animals understanding simple orders, and offers numerous\npossibilities of interaction with the world: taking or dropping objects,\npaint the ground, hit walls, etc.\n\n<h2>Methods understood by buggles</h2>\n<table border=1>\n<tr><td colspan=2 align=center><b>Moving</b><br/> (See also the note on exceptions, below)</td></tr>\n  <tr><td><b>Turn left<br/>Turn right<br/>Turn back<br/>Moving forward<br/>Moving back</b></td>\n      <td>void left()<br/>\n          void right()<br/>\n          void back()<br/>\n          void forward() or void forward(int steps)<br/>\n          void backward() or void backward(int steps)<br/></td></tr>\n  <tr><td><b>Get X coordinate<br/>Get Y coordinate<br/>Set X coordinate<br/>Set Y coordinate<br/>Set position</b></td>\n      <td>int getX()<br/>\n          int getY()<br/>\n          void setX(int x)<br/>\n          void setY(int y)<br/>\n          void setPos(int x, int y)</td></tr>\n<tr><td colspan=2>Note that the point (0,0) is on the top left corner, as it is often the case in Computer Science.</td></tr>\n\n<tr><td colspan=2 align=center><b>Information on the buggle</b></td></tr>\n  <tr><td><b>Get the color of the body<br/>Set the color of the body</b></td>\n      <td>Color getBodyColor()<br/>\n          void setBodyColor(Color c)</td></tr>\t\t\t\t\n  <tr><td><b>Look for a wall forward<br/>Look for a wall backward</b></td>\n      <td>boolean isFacingWall()<br/>\n          boolean isBackingWall()</td></tr>\t\t\t\t\n  <tr><td><b>Get heading<br/>Set heading</b><br/>valid directions are:</td>\n      <td>Direction getDirection()<br/>\n          void setDirection(Direction dir)<br/>\n          Direction.NORTH, Direction.EAST, Direction.SOUTH and Direction.WEST</td></tr>\n  <tr><td>Check whether the buggle is currently <b>selected in the interface</b></td>\n      <td>boolean isSelected()</td></tr>\n \n<tr><td colspan=2 align=center><b>About the brush</b></td></tr>\n  <tr><td><b>Brush down<br/>Brush up<br/>Get brush position</b></td>\n      <td>void brushUp()<br/>\n          void brushDown()<br/>\n          boolean isBrushDown()</td></tr>\n  <tr><td><b>Change the brush color<br/>Get the color of the brush</b></td>\n      <td>void setBrushColor(Color c)<br/>\n          Color getBrushColor()</td></tr>\n\n<tr><td colspan=2 align=center><b>Interacting with the world</b></td></tr>\n  <tr><td><b>Get the color of the ground</b></td>\n      <td>Color getGroundColor()</td></tr>\n\n  <tr><td><b>Look for a baggle on the ground<br/>Look for a baggle in bag<br/>Pickup a baggle<br/>Drop a baggle</b><br/>\n      (see the note on exceptions)</td>\n      <td>boolean isOverBaggle()<br/>\n          boolean isCarryingBaggle()<br/>\n          void pickupBaggle()<br/>\n          void dropBaggle()<br/>\n          &nbsp;</td></tr>\n\n  <tr><td><b>Look for a message<br/>Add a message<br/>Read the message<br/>Erase the message</b></td>\n      <td>boolean isOverMessage()<br/>\n          void writeMessage(String msg)<br/>\n          String readMessage()<br/>\n          void clearMessage()</td></tr>\n</table>\n\n<h2>Valid colors</h2>\n<table border=1>\n<tr><td>Name</td><td>Color</td></tr>\n<tr><td>Color.black</td>    <td BGCOLOR=\"#000000\">&nbsp;</td></tr>\n<tr><td>Color.blue</td>     <td BGCOLOR=\"#0000FF\">&nbsp;</td></tr>\n<tr><td>Color.cyan</td>     <td BGCOLOR=\"#00FFFF\">&nbsp;</td></tr>\n<tr><td>Color.darkGray</td> <td BGCOLOR=\"#404040\">&nbsp;</td></tr>\n<tr><td>Color.gray</td>     <td BGCOLOR=\"#808080\">&nbsp;</td></tr>\n<tr><td>Color.green</td>    <td BGCOLOR=\"#00FF00\">&nbsp;</td></tr>\n<tr><td>Color.lightGray</td><td BGCOLOR=\"#C0C0C0\">&nbsp;</td></tr>\n<tr><td>Color.magenta</td>  <td BGCOLOR=\"#FF00FF\">&nbsp;</td></tr>\n<tr><td>Color.orange</td>   <td BGCOLOR=\"#FFC800\">&nbsp;</td></tr>\n<tr><td>Color.pink</td>     <td BGCOLOR=\"#FFAFAF\">&nbsp;</td></tr>\n<tr><td>Color.red</td>      <td BGCOLOR=\"#FF0000\">&nbsp;</td></tr>\n<tr><td>Color.white</td>    <td BGCOLOR=\"#FFFFFF\">&nbsp;</td></tr>\n<tr><td>Color.yellow</td>   <td BGCOLOR=\"#FFFF00\">&nbsp;</td></tr>\n</table>\n\n<h2>Note on exceptions</h2>\nRegular buggles throw a BuggleWallException exception if you ask them to\ntraverse a wall.  They throw a NoBaggleUnderBuggleException exception if you\nask them to pickup a baggle from an empty cell, or a\nAlreadyHaveBaggleException exception if they already carry a baggle.  Trying\nto drop a baggle on a cell already containing one throws an\nAlreadyHaveBaggleException exception. \nDropping a baggle when you have none throws a DontHaveBaggleException.\n<p>SimpleBuggles (ie, the one used in first exercises) display an error message\non problem so that you don't need to know what an exception is.</p>\n",
    "parameters" : null,
    "cells" : [ [ {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 2,
      "x" : 0,
      "y" : 0,
      "color" : [ 255, 0, 0, 255 ],
      "msgColor" : [ 128, 128, 230, 255 ],
      "content" : "",
      "leftWall" : true,
      "topWall" : true
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 2,
      "x" : 0,
      "y" : 1,
      "color" : [ 255, 0, 0, 255 ],
      "msgColor" : [ 128, 128, 230, 255 ],
      "content" : "",
      "leftWall" : true
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 2,
      "x" : 0,
      "y" : 2,
      "color" : [ 255, 0, 0, 255 ],
      "msgColor" : [ 128, 128, 230, 255 ],
      "content" : "",
      "leftWall" : true
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 2,
      "x" : 0,
      "y" : 3,
      "color" : [ 255, 0, 0, 255 ],
      "msgColor" : [ 128, 128, 230, 255 ],
      "content" : "",
      "leftWall" : true
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 2,
      "x" : 0,
      "y" : 4,
      "color" : [ 255, 0, 0, 255 ],
      "msgColor" : [ 128, 128, 230, 255 ],
      "content" : "",
      "leftWall" : true
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 2,
      "x" : 0,
      "y" : 5,
      "color" : [ 255, 0, 0, 255 ],
      "msgColor" : [ 128, 128, 230, 255 ],
      "content" : "",
      "leftWall" : true
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 2,
      "x" : 0,
      "y" : 6,
      "color" : [ 255, 0, 0, 255 ],
      "msgColor" : [ 128, 128, 230, 255 ],
      "content" : "",
      "leftWall" : true
    } ], [ {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 2,
      "x" : 1,
      "y" : 0,
      "color" : [ 255, 0, 0, 255 ],
      "topWall" : true
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 2,
      "x" : 1,
      "y" : 1,
      "color" : [ 255, 0, 0, 255 ]
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 2,
      "x" : 1,
      "y" : 2,
      "color" : [ 255, 0, 0, 255 ]
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 2,
      "x" : 1,
      "y" : 3,
      "color" : [ 255, 0, 0, 255 ]
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 2,
      "x" : 1,
      "y" : 4,
      "color" : [ 255, 0, 0, 255 ]
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 2,
      "x" : 1,
      "y" : 5,
      "color" : [ 255, 0, 0, 255 ]
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 2,
      "x" : 1,
      "y" : 6,
      "color" : [ 255, 0, 0, 255 ]
    } ], [ {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 2,
      "x" : 2,
      "y" : 0,
      "color" : [ 255, 0, 0, 255 ],
      "topWall" : true
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 2,
      "x" : 2,
      "y" : 1,
      "color" : [ 255, 0, 0, 255 ]
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 2,
      "x" : 2,
      "y" : 2,
      "color" : [ 255, 0, 0, 255 ]
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 2,
      "x" : 2,
      "y" : 3,
      "color" : [ 255, 0, 0, 255 ]
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 2,
      "x" : 2,
      "y" : 4,
      "color" : [ 255, 0, 0, 255 ]
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 2,
      "x" : 2,
      "y" : 5,
      "color" : [ 255, 0, 0, 255 ]
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 2,
      "x" : 2,
      "y" : 6,
      "color" : [ 255, 0, 0, 255 ]
    } ], [ {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 2,
      "x" : 3,
      "y" : 0,
      "color" : [ 255, 0, 0, 255 ],
      "topWall" : true
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 2,
      "x" : 3,
      "y" : 1,
      "color" : [ 255, 0, 0, 255 ]
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 2,
      "x" : 3,
      "y" : 2,
      "color" : [ 255, 0, 0, 255 ]
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 2,
      "x" : 3,
      "y" : 3,
      "color" : [ 255, 0, 0, 255 ]
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 2,
      "x" : 3,
      "y" : 4,
      "color" : [ 255, 0, 0, 255 ]
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 2,
      "x" : 3,
      "y" : 5,
      "color" : [ 255, 0, 0, 255 ]
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 2,
      "x" : 3,
      "y" : 6,
      "color" : [ 255, 0, 0, 255 ]
    } ], [ {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 2,
      "x" : 4,
      "y" : 0,
      "color" : [ 255, 0, 0, 255 ],
      "topWall" : true
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 2,
      "x" : 4,
      "y" : 1,
      "color" : [ 255, 0, 0, 255 ]
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 2,
      "x" : 4,
      "y" : 2,
      "color" : [ 255, 0, 0, 255 ]
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 2,
      "x" : 4,
      "y" : 3,
      "color" : [ 255, 0, 0, 255 ]
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 2,
      "x" : 4,
      "y" : 4,
      "color" : [ 255, 0, 0, 255 ]
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 2,
      "x" : 4,
      "y" : 5,
      "color" : [ 255, 0, 0, 255 ]
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 2,
      "x" : 4,
      "y" : 6,
      "color" : [ 255, 0, 0, 255 ]
    } ], [ {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 2,
      "x" : 5,
      "y" : 0,
      "color" : [ 255, 0, 0, 255 ],
      "topWall" : true
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 2,
      "x" : 5,
      "y" : 1,
      "color" : [ 255, 0, 0, 255 ]
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 2,
      "x" : 5,
      "y" : 2,
      "color" : [ 255, 0, 0, 255 ]
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 2,
      "x" : 5,
      "y" : 3,
      "color" : [ 255, 0, 0, 255 ]
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 2,
      "x" : 5,
      "y" : 4,
      "color" : [ 255, 0, 0, 255 ]
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 2,
      "x" : 5,
      "y" : 5,
      "color" : [ 255, 0, 0, 255 ]
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 2,
      "x" : 5,
      "y" : 6,
      "color" : [ 255, 0, 0, 255 ]
    } ], [ {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 2,
      "x" : 6,
      "y" : 0,
      "color" : [ 255, 0, 0, 255 ],
      "topWall" : true
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 2,
      "x" : 6,
      "y" : 1,
      "color" : [ 255, 0, 0, 255 ]
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 2,
      "x" : 6,
      "y" : 2,
      "color" : [ 255, 0, 0, 255 ]
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 2,
      "x" : 6,
      "y" : 3,
      "color" : [ 255, 0, 0, 255 ]
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 2,
      "x" : 6,
      "y" : 4,
      "color" : [ 255, 0, 0, 255 ]
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 2,
      "x" : 6,
      "y" : 5,
      "color" : [ 255, 0, 0, 255 ]
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 2,
      "x" : 6,
      "y" : 6,
      "color" : [ 255, 0, 0, 255 ]
    } ] ],
    "visibleGrid" : true,
    "easter" : false
  } ],
  "instructions" : {
    "pt" : "\n<!-- Please don't translate this file but l10n/missions/plm.pot (see https://github.com/oster/PLM/wiki/Working-on-translations) -->\n<h2>Mundo das cobras</h2>\n\n<p>Agora vamos ensinar o buggle a explorar seu mundo. Sua posição inicial é o\ncanto inferior esquerdo, e ele deve visitar todas as células até o topo\n(colorindo o chão onde for passando. O loop principal de seu código é algo\nassim:</p>\n<pre>\n abaixe o pincel\n enquanto não chegar na posição final\n   se mova como uma cobra\n</pre>\n\n<p>Então nós temos que escrever dois métodos específicos: o primeiro retorna um\nbooleano indicando se nós estamos numa posição final enquanto o segundo um\n\"snake step\" para frente.</p>\n\n<p>Chegamos na posição final se e apenas se ambas as condições são verdadeiras:</p>\n<ul>\n  <li>Estamos de frente para uma parede</li>\n  <li>Existe uma parede no norte do buggle. Então, se o buggle está olhando para o\nleste, você deve verificar se existe uma parede à esquerda, e se o buggle\nestá olhando para o oeste, você deve verificar do lado direito.<br/>\n      Nós podemos obter a direção atual do buggle usando o\n<code>getDireção()</code>, e nós sabemos se ele está apontando para o leste\nusando <code>getDireção() == [!scala|python|java]Direção.[/!]LESTE</code>\n(OESTE para oeste).<br/>\n      Para verificar, não tem mágica: você tem que virar o buggle e verificar em\nseguinda se ele está olhando para uma parede.</li>\n</ul>\n\n<p>Então, um passo de cobra pode ser conseguido movendo um passo para a frente\nse nós não estivermos de cara para a parede, e movendo para a linha acima\ncaso contrário (i.e., se você olha para o oeste e está de cara para uma\nparede, tem que virar a direita, andar e virar a direita).</p>\n\n<p>Dica: o loop principal do seu código deve continuar enquanto a função de\nteste retorna falso. Existem duas formas de fazer isto:</p>\n<pre>while (testingFunction() == [!c]0) {[/!][!java|scala]false) {[/!][!python]False):[/!]</pre>\n<p>[!python]Você pode preferir escrever como:[/!] [!java|scala|c]Já que a marca\nde exclamação (!) denota a negação booleana em [!thelang], você pode\nescrever como:[/!]</p>\n<pre>while ([!java|scala|c]![/!][!python]not [/!]testingFunction())[!java|scala|c] {[/!][!python]:[/!]</pre>\n\n<p>Sua vez...</p>\n\n",
    "en" : "<!-- Please don't translate this file but l10n/missions/plm.pot (see https://github.com/oster/PLM/wiki/Working-on-translations) -->\n<h2>Snake World</h2>\n\n<p>We will now teach the buggle to explore its world. Its initial position is\nthe bottom left corner, and it should visit any cells up to the top\n(coloring the ground on its path. The main loop of your code is something like:</p>\n<pre>\n move brush down\n while we did not reach the final position\n   move like a snake\n</pre>\n\n<p>We thus have to write two specific methods: The first one\nreturns a boolean indicating whether we are on a final position while the\nsecond moves one snake step forward.</p>\n\n<p>We reached the final position if and only if both conditions are true:</p>\n<ul>\n  <li>We are facing a wall</li>\n  <li>There is a wall on the north of the buggle. So, if the buggle is facing\neast, you should check whether there is a wall on the left, and if the\nbuggle is facing west, you should check on the right side.<br/>\n      We can get the current heading of the buggle using the\n<code>getDirection()</code>, and we know whether it looks east using\n<code>getDirection() == [!scala|python|java]Direction.[/!]EAST</code> (WEST for west).<br/>\n      To check, nothing magical: you have to turn the buggle and check whether it is facing a wall afterward.</li>\n</ul>\n\n<p>Then, a snake step can be achieved by moving one step forward if we are not\nfacing a wall, and moving to the upper line else (i.e., if you look to the\nwest facing a wall, you have to turn right, forward and turn right).</p>\n\n<p>Hint: the main loop of your code must continue while the\ntesting function returns false. There is two ways of writing it:</p>\n<pre>while (testingFunction() == [!c]0) {[/!][!java|scala]false) {[/!][!python]False):[/!]</pre>\n<p>[!python]You may prefer to write it as:[/!]\n[!java|scala|c]Since the exclamation mark (!) denotes the boolean negation in [!thelang], you may write it as:[/!]</p>\n<pre>while ([!java|scala|c]![/!][!python]not [/!]testingFunction())[!java|scala|c] {[/!][!python]:[/!]</pre>\n\n<p>Your turn...</p>\n\n",
    "fr" : "\n<!-- Please don't translate this file but l10n/missions/plm.pot (see https://github.com/oster/PLM/wiki/Working-on-translations) -->\n<h2>Monde de serpents</h2>\n\n<p>Nous allons maintenant apprendre à la buggle à explorer son monde. Sa\nposition de départ est en bas à gauche, et elle doit visiter toutes les\ncases jusqu'en haut (en coloriant le sol sur son passage).  La boucle\nprincipale de votre code doit être de la forme :</p>\n<pre>\n baisser le crayon\n tant que l'on est pas à la position finale\n   avancer comme un serpent\n</pre>\n\n<p>Il faut donc écrire deux méthodes spécifiques. L'une renvoie un booléen\nindiquant si l'on se trouve à la position finale, tandis que l'autre avance\nd'un pas de serpent.</p>\n\n<p>On se trouve sur une position finale si et seulement si les deux conditions\nsuivantes sont vraies.:</p>\n<ul>\n  <li>On est face à un mur</li>\n  <li>Il y a un mur au nord de la buggle. Donc, si la buggle regarde à l'est, il\nfaut vérifier s'il y a un mur à gauche, et si la buggle regarde à l'ouest,\nil faut vérifier s'il y a un mur à droite.<br/>\n      On obtient la direction actuelle de la buggle avec la méthode\n<code>getDirection()</code>, et on sait si elle regarde à l'est avec le test\n<code>getDirection() == [!scala|python|java]Direction.[/!]EST</code> (ou\nbien OUEST).<br/>\n      Pour la vérification elle-même, rien de magique : il faut se tourner et\nregarder si on est face à un mur une fois tourné.</li>\n</ul>\n\n<p>Ensuite un pas de serpent se fait en avançant d'un pas si l'on est pas face\nà un mur, et en montant à la ligne du dessus sinon (dit autrement, si on\nregarde à l'ouest face à un mur, il faut tourner à droite, avancer, tourner\nà droite).</p>\n\n<p>Indication: la boucle principale de votre code doit continuer tant que la\nfonction adéquate renvoie faux. On peut l'écrire de deux façons:</p>\n<pre>while (fonctionTest() == [!c]0) {[/!][!java|scala]false) {[/!][!python]False):[/!]</pre>\n<p>[!python]Vous pouvez préférer l'écrire ainsi:[/!]\n[!java|scala|c]Comme le point d'exclamation (!) dénote la négation booléenne\nen [!thelang], vous pouvez aussi l'écrire:[/!]</p>\n<pre>while ([!java|scala|c]![/!][!python]not [/!]fonctionTest())[!java|scala|c] {[/!][!python]:[/!]</pre>\n\n<p>À vous de jouer...</p>\n\n"
  }
}