{
  "id" : "traversal.column.traversalbycolumn.TraversalByColumn",
  "name" : "TraversalByColumn",
  "tabName" : "ColumnByColumn",
  "defaultSourceFiles" : {
    "Java" : {
      "name" : "TraversalByColumn",
      "body" : "public void run() {\n}\n",
      "template" : "$package   import plm.core.model.I18nManager; import plm.universe.bugglequest.SimpleBuggle;  public class TraversalByColumn extends SimpleBuggle {$body \t@Override \tpublic void forward(int i)  {  \t\tthrow new RuntimeException(I18nManager.getI18n(getWorld().getLocale()).tr(\"Sorry Dave, I cannot let you use forward() in this exercise. Use setPos(x,y) instead.\")); \t} \t@Override \tpublic void forward()  { \t\tif (isInited()) \t\t\tthrow new RuntimeException(I18nManager.getI18n(getWorld().getLocale()).tr(\"Sorry Dave, I cannot let you use forward() in this exercise. Use setPos(x,y) instead.\")); \t} \t@Override \tpublic void backward(int i) { \t\tthrow new RuntimeException(I18nManager.getI18n(getWorld().getLocale()).tr(\"Sorry Dave, I cannot let you use backward() in this exercise. Use setPos(x,y) instead.\")); \t} \t@Override \tpublic void backward() { \t\tthrow new RuntimeException(I18nManager.getI18n(getWorld().getLocale()).tr(\"Sorry Dave, I cannot let you use backward() in this exercise. Use setPos(x,y) instead.\")); \t} } ",
      "offset" : 1,
      "correction" : "$package \n\nimport plm.core.model.I18nManager;\nimport plm.universe.bugglequest.AbstractBuggle;\n\npublic class TraversalByColumn extends AbstractBuggle {\n\t/* BEGIN TEMPLATE */\n\tpublic void run() {\n\t\t/* BEGIN SOLUTION */\t\n\t\tint cpt=0;\n\t\twriteMessage(cpt);\n\t\twhile (!endingPosition()) {\n\t\t\tnextStep();\n\t\t\tcpt++;\n\t\t\twriteMessage(cpt);\n\t\t}\n\t}\n\tpublic void nextStep() {\t\n\t\tint x=getX();\n\t\tint y=getY();\n\n\t\tif (y < getWorldHeight()-1) {\n\t\t\ty++;\n\t\t} else {\n\t\t\ty = 0;\n\t\t\tif (x < getWorldWidth()-1) {\n\t\t\t\tx++;\n\t\t\t} else {\n\t\t\t\tx = 0; \n\t\t\t}\n\t\t}\n\t\tsetPos(x,y);\n\t}\n\n\tpublic boolean endingPosition() {\n\t\treturn (getX() == getWorldWidth() -1) && (getY() == getWorldHeight()-1);\n\t\t/* END SOLUTION */\n\t}\n\t/* END TEMPLATE */\t\n\t@Override\n\tpublic void forward(int i)  { \n\t\tthrow new RuntimeException(I18nManager.getI18n(getWorld().getLocale()).tr(\"Sorry Dave, I cannot let you use forward() in this exercise. Use setPos(x,y) instead.\"));\n\t}\n\t@Override\n\tpublic void forward()  {\n\t\tif (isInited())\n\t\t\tthrow new RuntimeException(I18nManager.getI18n(getWorld().getLocale()).tr(\"Sorry Dave, I cannot let you use forward() in this exercise. Use setPos(x,y) instead.\"));\n\t}\n\t@Override\n\tpublic void backward(int i) {\n\t\tthrow new RuntimeException(I18nManager.getI18n(getWorld().getLocale()).tr(\"Sorry Dave, I cannot let you use backward() in this exercise. Use setPos(x,y) instead.\"));\n\t}\n\t@Override\n\tpublic void backward() {\n\t\tthrow new RuntimeException(I18nManager.getI18n(getWorld().getLocale()).tr(\"Sorry Dave, I cannot let you use backward() in this exercise. Use setPos(x,y) instead.\"));\n\t}\n}\n",
      "error" : "Error"
    },
    "Scala" : {
      "name" : "TraversalByColumn",
      "body" : "override def run() {\n}\n",
      "template" : "$package \n\nimport plm.universe.bugglequest.SimpleBuggle;\nimport plm.core.model.I18nManager\n\nclass TraversalByColumn extends SimpleBuggle {$body\n\n\toverride def forward(i:Int)  { \n\t\tthrow new RuntimeException(I18nManager.getI18n(getWorld().getLocale()).tr(\"Sorry Dave, I cannot let you use forward() in this exercise. Use setPos(x,y) instead.\"));\n\t}\n\toverride def forward()  {\n\t\tthrow new RuntimeException(I18nManager.getI18n(getWorld().getLocale()).tr(\"Sorry Dave, I cannot let you use forward() in this exercise. Use setPos(x,y) instead.\"));\n\t}\n\toverride def backward(i:Int) {\n\t\tthrow new RuntimeException(I18nManager.getI18n(getWorld().getLocale()).tr(\"Sorry Dave, I cannot let you use backward() in this exercise. Use setPos(x,y) instead.\"));\n\t}\n\toverride def backward() {\n\t\tthrow new RuntimeException(I18nManager.getI18n(getWorld().getLocale()).tr(\"Sorry Dave, I cannot let you use backward() in this exercise. Use setPos(x,y) instead.\"));\n\t}\n}\n",
      "offset" : 6,
      "correction" : "$package \n\nimport plm.universe.bugglequest.AbstractBuggle;\nimport plm.core.model.I18nManager\n\nclass TraversalByColumn extends AbstractBuggle {\n\t/* BEGIN TEMPLATE */\n\toverride def run() {\n\t\t/* BEGIN SOLUTION */\t\n\t\tvar cpt=0;\n\t\twriteMessage(cpt);\n\t\twhile (!endingPosition()) {\n\t\t\tnextStep();\n\t\t\tcpt+=1;\n\t\t\twriteMessage(cpt);\n\t\t}\n\t}\n\tdef nextStep() {\t\n\t\tvar x=getX();\n\t\tvar y=getY();\n\n\t\tif (y < getWorldHeight()-1) {\n\t\t\ty+=1;\n\t\t} else {\n\t\t\ty = 0;\n\t\t\tif (x < getWorldWidth()-1) {\n\t\t\t\tx+=1;\n\t\t\t} else {\n\t\t\t\tx = 0; \n\t\t\t}\n\t\t}\n\t\tsetPos(x,y);\n\t}\n\n\tdef endingPosition(): Boolean = {\n\t\treturn (getX() == getWorldWidth() -1) && (getY() == getWorldHeight()-1);\n\t\t/* END SOLUTION */\n\t}\n\t/* END TEMPLATE */\t\n\n\toverride def forward(i:Int)  { \n\t\tthrow new RuntimeException(I18nManager.getI18n(getWorld().getLocale()).tr(\"Sorry Dave, I cannot let you use forward() in this exercise. Use setPos(x,y) instead.\"));\n\t}\n\toverride def forward()  {\n\t\tthrow new RuntimeException(I18nManager.getI18n(getWorld().getLocale()).tr(\"Sorry Dave, I cannot let you use forward() in this exercise. Use setPos(x,y) instead.\"));\n\t}\n\toverride def backward(i:Int) {\n\t\tthrow new RuntimeException(I18nManager.getI18n(getWorld().getLocale()).tr(\"Sorry Dave, I cannot let you use backward() in this exercise. Use setPos(x,y) instead.\"));\n\t}\n\toverride def backward() {\n\t\tthrow new RuntimeException(I18nManager.getI18n(getWorld().getLocale()).tr(\"Sorry Dave, I cannot let you use backward() in this exercise. Use setPos(x,y) instead.\"));\n\t}\n}\n",
      "error" : "Error"
    },
    "Python" : {
      "name" : "TraversalByColumn",
      "body" : "",
      "template" : "def forward(i):\n\terrorMsg(\"Sorry Dave, I cannot let you use forward() in this exercise. Use setPos(x,y) instead.\")\n\ndef backward(i):\n\terrorMsg(\"Sorry Dave, I cannot let you use backward() in this exercise. Use setPos(x,y) instead.\")\n\n$body\n",
      "offset" : 5,
      "correction" : "def forward(i):\n\terrorMsg(\"Sorry Dave, I cannot let you use forward() in this exercise. Use setPos(x,y) instead.\")\n\ndef backward(i):\n\terrorMsg(\"Sorry Dave, I cannot let you use backward() in this exercise. Use setPos(x,y) instead.\")\n\n# BEGIN TEMPLATE\n# BEGIN SOLUTION\ndef nextStep():\n\tx=getX()\n\ty=getY()\n\n\tif y<getWorldHeight()-1:\n\t\ty += 1\n\telse: \n\t\ty = 0\n\t\tif x<getWorldWidth()-1:\n\t\t\tx += 1\n\t\telse:\n\t\t\tx = 0\n\tsetPos(x,y)\n\ndef endingPosition():\n\treturn (getX() == getWorldWidth() -1) and (getY() == getWorldHeight()-1)\n\ncpt = 0\nwriteMessage(cpt)\nwhile not endingPosition():\n\tnextStep()\n\tcpt += 1\n\twriteMessage(cpt)\n# END SOLUTION\n# END TEMPLATE\n",
      "error" : "Error"
    }
  },
  "helps" : {
    "pt" : "<!-- Please don't translate this file but l10n/missions/plm.pot (see https://github.com/oster/PLM/wiki/Working-on-translations) -->\n<h1>BuggleWorld</h1>\nThis world was invented by Lyn Turbak, at Wellesley College. It is full of\nBuggles, little animals understanding simple orders, and offers numerous\npossibilities of interaction with the world: taking or dropping objects,\npaint the ground, hit walls, etc.\n\n<h2>Methods understood by buggles</h2>\n<table border=1>\n<tr><td colspan=2 align=center><b>Moving</b><br/> (See also the note on exceptions, below)</td></tr>\n  <tr><td><b>Turn left<br/>Turn right<br/>Turn back<br/>Moving forward<br/>Moving back</b></td>\n      <td>[!java|c]void [/!]left()<br/>\n          [!java|c]void [/!]right()<br/>\n          [!java|c]void [/!]back()<br/>\n          [!java|c]void [/!][!python|java|scala]forward()[/!][!c]stepForward()[/!] or [!java|c]void [/!]forward([!java|c]int [/!]steps[!scala]:Int[/!])<br/>\n          [!java|c]void [/!][!python|java|scala]backward()[/!][!c]stepBackward()[/!] or [!java]void [/!]backward([!java|c]int [/!]steps[!scala]:Int[/!])<br/></td></tr>\n  <tr><td><b>Get X coordinate<br/>Get Y coordinate<br/>Set X coordinate<br/>Set Y coordinate<br/>Set position</b></td>\n      <td>[!java|c]int [/!]getX()[!scala]:Int[/!]<br/>\n          [!java|c]int [/!]getY()[!scala]:Int[/!]<br/>\n          [!java|c]void [/!]setX([!java|c]int [/!]x[!scala]:Int[/!])<br/>\n          [!java|c]void [/!]setY([!java|c]int [/!]y[!scala]:Int[/!])<br/>\n          [!java|c]void [/!]setPos([!java|c]int [/!]x[!scala]:Int[/!], [!java|c]int [/!]y[!scala]:Int[/!])</td></tr>\n<tr><td colspan=2>Note that the point (0,0) is on the top left corner, as it is often the case in Computer Science.</td></tr>\n\n<tr><td colspan=2 align=center><b>Information on the buggle</b></td></tr>\n  <tr><td><b>Get the color of the body<br/>Set the color of the body</b></td>\n      <td>[!java|c]Color [/!]getBodyColor()[!scala]:Color[/!]<br/>\n          [!java|c]void [/!]setBodyColor([!java|c]Color [/!]c[!scala]:Color[/!])</td></tr>\t\t\t\t\n  <tr><td><b>Look for a wall forward<br/>Look for a wall backward</b></td>\n      <td>[!java]boolean [/!][!c]int [/!]isFacingWall()[!scala]:Boolean[/!]<br/>\n          [!java]boolean [/!][!c]int [/!]isBackingWall()[!scala]:Boolean[/!]</td></tr>\t\t\t\t\n  <tr><td><b>Get heading<br/>Set heading</b><br/>valid directions are:</td>\n      <td>[!java|c]Direction [/!]getDirection()[!scala]:Direction[/!]<br/>\n          [!java|c]void [/!]setDirection([!java|c]Direction [/!]dir[!scala]:Direction[/!])<br/>\n          [!scala|java|python]Direction.[/!]NORTH, [!scala|java|python]Direction.[/!]EAST, [!scala|java|python]Direction.[/!]SOUTH and [!scala|java|python]Direction.[/!]WEST</td></tr>\n  <tr><td>Check whether the buggle is currently <b>selected in the interface</b></td>\n      <td>[!java]boolean [/!][!c]int [/!]isSelected()[!scala]:Boolean[/!]</td></tr>\n \n<tr><td colspan=2 align=center><b>About the brush</b></td></tr>\n  <tr><td><b>Brush down<br/>Brush up<br/>Get brush position</b></td>\n      <td>[!java|c]void [/!]brushUp()<br/>\n          [!java|c]void [/!]brushDown()<br/>\n          [!java]boolean [/!][!c]int [/!]isBrushDown()[!scala]:Boolean[/!]</td></tr>\n  <tr><td><b>Change the brush color<br/>Get the color of the brush</b></td>\n      <td>[!java|c]void [/!]setBrushColor([!java|c]Color [/!]c[!scala]:Color[/!])<br/>\n          [!java|c]Color [/!]getBrushColor()[!scala]:Color[/!]</td></tr>\n\n<tr><td colspan=2 align=center><b>Interacting with the world</b></td></tr>\n  <tr><td><b>Get the color of the ground</b></td>\n      <td>[!java|c]Color [/!]getGroundColor()[!scala]:Color[/!]</td></tr>\n\n  <tr><td><b>Look for a baggle on the ground<br/>Look for a baggle in bag<br/>Pickup a baggle<br/>Drop a baggle</b><br/>\n      (see the note on exceptions)</td>\n      <td>[!java]boolean [/!][!c]int [/!]isOverBaggle()[!scala]:Boolean[/!]<br/>\n          [!java]boolean [/!][!c]int [/!]isCarryingBaggle()[!scala]:Boolean[/!]<br/>\n          [!java]void [/!]pickupBaggle()<br/>\n          [!java]void [/!]dropBaggle()<br/>\n          &nbsp;</td></tr>\n\n  <tr><td><b>Look for a message<br/>Add a message<br/>Read the message<br/>Erase the message</b></td>\n      <td>[!java]boolean [/!][!c]int [/!]isOverMessage()[!scala]:Boolean[/!]<br/>\n          [!java]void [/!]writeMessage([!java]String [/!][!c]char* [/!]msg[!scala]:String[/!])<br/>\n          [!java]String [/!][!c]char* [/!]readMessage()[!scala]:String[/!]<br/>\n          [!java]void [/!]clearMessage()</td></tr>\n</table>\n\n<h2>Valid colors</h2>\n<table border=1>\n<tr><td>Name</td><td>Color</td></tr>\n<tr><td>[!scala|java|python]Color.[/!]black</td>    <td BGCOLOR=\"#000000\">&nbsp;</td></tr>\n<tr><td>[!scala|java|python]Color.[/!]blue</td>     <td BGCOLOR=\"#0000FF\">&nbsp;</td></tr>\n<tr><td>[!scala|java|python]Color.[/!]cyan</td>     <td BGCOLOR=\"#00FFFF\">&nbsp;</td></tr>\n<tr><td>[!scala|java|python]Color.[/!]darkGray</td> <td BGCOLOR=\"#404040\">&nbsp;</td></tr>\n<tr><td>[!scala|java|python]Color.[/!]gray</td>     <td BGCOLOR=\"#808080\">&nbsp;</td></tr>\n<tr><td>[!scala|java|python]Color.[/!]green</td>    <td BGCOLOR=\"#00FF00\">&nbsp;</td></tr>\n<tr><td>[!scala|java|python]Color.[/!]lightGray</td><td BGCOLOR=\"#C0C0C0\">&nbsp;</td></tr>\n<tr><td>[!scala|java|python]Color.[/!]magenta</td>  <td BGCOLOR=\"#FF00FF\">&nbsp;</td></tr>\n<tr><td>[!scala|java|python]Color.[/!]orange</td>   <td BGCOLOR=\"#FFC800\">&nbsp;</td></tr>\n<tr><td>[!scala|java|python]Color.[/!]pink</td>     <td BGCOLOR=\"#FFAFAF\">&nbsp;</td></tr>\n<tr><td>[!scala|java|python]Color.[/!]red</td>      <td BGCOLOR=\"#FF0000\">&nbsp;</td></tr>\n<tr><td>[!scala|java|python]Color.[/!]white</td>    <td BGCOLOR=\"#FFFFFF\">&nbsp;</td></tr>\n<tr><td>[!scala|java|python]Color.[/!]yellow</td>   <td BGCOLOR=\"#FFFF00\">&nbsp;</td></tr>\n</table>\n\n<h2>Note on exceptions</h2>\nRegular buggles throw a BuggleWallException exception if you ask them to\ntraverse a wall.  They throw a NoBaggleUnderBuggleException exception if you\nask them to pickup a baggle from an empty cell, or a\nAlreadyHaveBaggleException exception if they already carry a baggle.  Trying\nto drop a baggle on a cell already containing one throws an\nAlreadyHaveBaggleException exception. \nDropping a baggle when you have none throws a DontHaveBaggleException.\n<p>SimpleBuggles (ie, the one used in first exercises) display an error message\non problem so that you don't need to know what an exception is.</p>\n",
    "en" : "<!-- Please don't translate this file but l10n/missions/plm.pot (see https://github.com/oster/PLM/wiki/Working-on-translations) -->\n<h1>BuggleWorld</h1>\nThis world was invented by Lyn Turbak, at Wellesley College. It is full of\nBuggles, little animals understanding simple orders, and offers numerous\npossibilities of interaction with the world: taking or dropping objects,\npaint the ground, hit walls, etc.\n\n<h2>Methods understood by buggles</h2>\n<table border=1>\n<tr><td colspan=2 align=center><b>Moving</b><br/> (See also the note on exceptions, below)</td></tr>\n  <tr><td><b>Turn left<br/>Turn right<br/>Turn back<br/>Moving forward<br/>Moving back</b></td>\n      <td>[!java|c]void [/!]left()<br/>\n          [!java|c]void [/!]right()<br/>\n          [!java|c]void [/!]back()<br/>\n          [!java|c]void [/!][!python|java|scala]forward()[/!][!c]stepForward()[/!] or [!java|c]void [/!]forward([!java|c]int [/!]steps[!scala]:Int[/!])<br/>\n          [!java|c]void [/!][!python|java|scala]backward()[/!][!c]stepBackward()[/!] or [!java]void [/!]backward([!java|c]int [/!]steps[!scala]:Int[/!])<br/></td></tr>\n  <tr><td><b>Get X coordinate<br/>Get Y coordinate<br/>Set X coordinate<br/>Set Y coordinate<br/>Set position</b></td>\n      <td>[!java|c]int [/!]getX()[!scala]:Int[/!]<br/>\n          [!java|c]int [/!]getY()[!scala]:Int[/!]<br/>\n          [!java|c]void [/!]setX([!java|c]int [/!]x[!scala]:Int[/!])<br/>\n          [!java|c]void [/!]setY([!java|c]int [/!]y[!scala]:Int[/!])<br/>\n          [!java|c]void [/!]setPos([!java|c]int [/!]x[!scala]:Int[/!], [!java|c]int [/!]y[!scala]:Int[/!])</td></tr>\n<tr><td colspan=2>Note that the point (0,0) is on the top left corner, as it is often the case in Computer Science.</td></tr>\n\n<tr><td colspan=2 align=center><b>Information on the buggle</b></td></tr>\n  <tr><td><b>Get the color of the body<br/>Set the color of the body</b></td>\n      <td>[!java|c]Color [/!]getBodyColor()[!scala]:Color[/!]<br/>\n          [!java|c]void [/!]setBodyColor([!java|c]Color [/!]c[!scala]:Color[/!])</td></tr>\t\t\t\t\n  <tr><td><b>Look for a wall forward<br/>Look for a wall backward</b></td>\n      <td>[!java]boolean [/!][!c]int [/!]isFacingWall()[!scala]:Boolean[/!]<br/>\n          [!java]boolean [/!][!c]int [/!]isBackingWall()[!scala]:Boolean[/!]</td></tr>\t\t\t\t\n  <tr><td><b>Get heading<br/>Set heading</b><br/>valid directions are:</td>\n      <td>[!java|c]Direction [/!]getDirection()[!scala]:Direction[/!]<br/>\n          [!java|c]void [/!]setDirection([!java|c]Direction [/!]dir[!scala]:Direction[/!])<br/>\n          [!scala|java|python]Direction.[/!]NORTH, [!scala|java|python]Direction.[/!]EAST, [!scala|java|python]Direction.[/!]SOUTH and [!scala|java|python]Direction.[/!]WEST</td></tr>\n  <tr><td>Check whether the buggle is currently <b>selected in the interface</b></td>\n      <td>[!java]boolean [/!][!c]int [/!]isSelected()[!scala]:Boolean[/!]</td></tr>\n \n<tr><td colspan=2 align=center><b>About the brush</b></td></tr>\n  <tr><td><b>Brush down<br/>Brush up<br/>Get brush position</b></td>\n      <td>[!java|c]void [/!]brushUp()<br/>\n          [!java|c]void [/!]brushDown()<br/>\n          [!java]boolean [/!][!c]int [/!]isBrushDown()[!scala]:Boolean[/!]</td></tr>\n  <tr><td><b>Change the brush color<br/>Get the color of the brush</b></td>\n      <td>[!java|c]void [/!]setBrushColor([!java|c]Color [/!]c[!scala]:Color[/!])<br/>\n          [!java|c]Color [/!]getBrushColor()[!scala]:Color[/!]</td></tr>\n\n<tr><td colspan=2 align=center><b>Interacting with the world</b></td></tr>\n  <tr><td><b>Get the color of the ground</b></td>\n      <td>[!java|c]Color [/!]getGroundColor()[!scala]:Color[/!]</td></tr>\n\n  <tr><td><b>Look for a baggle on the ground<br/>Look for a baggle in bag<br/>Pickup a baggle<br/>Drop a baggle</b><br/>\n      (see the note on exceptions)</td>\n      <td>[!java]boolean [/!][!c]int [/!]isOverBaggle()[!scala]:Boolean[/!]<br/>\n          [!java]boolean [/!][!c]int [/!]isCarryingBaggle()[!scala]:Boolean[/!]<br/>\n          [!java]void [/!]pickupBaggle()<br/>\n          [!java]void [/!]dropBaggle()<br/>\n          &nbsp;</td></tr>\n\n  <tr><td><b>Look for a message<br/>Add a message<br/>Read the message<br/>Erase the message</b></td>\n      <td>[!java]boolean [/!][!c]int [/!]isOverMessage()[!scala]:Boolean[/!]<br/>\n          [!java]void [/!]writeMessage([!java]String [/!][!c]char* [/!]msg[!scala]:String[/!])<br/>\n          [!java]String [/!][!c]char* [/!]readMessage()[!scala]:String[/!]<br/>\n          [!java]void [/!]clearMessage()</td></tr>\n</table>\n\n<h2>Valid colors</h2>\n<table border=1>\n<tr><td>Name</td><td>Color</td></tr>\n<tr><td>[!scala|java|python]Color.[/!]black</td>    <td BGCOLOR=\"#000000\">&nbsp;</td></tr>\n<tr><td>[!scala|java|python]Color.[/!]blue</td>     <td BGCOLOR=\"#0000FF\">&nbsp;</td></tr>\n<tr><td>[!scala|java|python]Color.[/!]cyan</td>     <td BGCOLOR=\"#00FFFF\">&nbsp;</td></tr>\n<tr><td>[!scala|java|python]Color.[/!]darkGray</td> <td BGCOLOR=\"#404040\">&nbsp;</td></tr>\n<tr><td>[!scala|java|python]Color.[/!]gray</td>     <td BGCOLOR=\"#808080\">&nbsp;</td></tr>\n<tr><td>[!scala|java|python]Color.[/!]green</td>    <td BGCOLOR=\"#00FF00\">&nbsp;</td></tr>\n<tr><td>[!scala|java|python]Color.[/!]lightGray</td><td BGCOLOR=\"#C0C0C0\">&nbsp;</td></tr>\n<tr><td>[!scala|java|python]Color.[/!]magenta</td>  <td BGCOLOR=\"#FF00FF\">&nbsp;</td></tr>\n<tr><td>[!scala|java|python]Color.[/!]orange</td>   <td BGCOLOR=\"#FFC800\">&nbsp;</td></tr>\n<tr><td>[!scala|java|python]Color.[/!]pink</td>     <td BGCOLOR=\"#FFAFAF\">&nbsp;</td></tr>\n<tr><td>[!scala|java|python]Color.[/!]red</td>      <td BGCOLOR=\"#FF0000\">&nbsp;</td></tr>\n<tr><td>[!scala|java|python]Color.[/!]white</td>    <td BGCOLOR=\"#FFFFFF\">&nbsp;</td></tr>\n<tr><td>[!scala|java|python]Color.[/!]yellow</td>   <td BGCOLOR=\"#FFFF00\">&nbsp;</td></tr>\n</table>\n\n<h2>Note on exceptions</h2>\nRegular buggles throw a BuggleWallException exception if you ask them to\ntraverse a wall.  They throw a NoBaggleUnderBuggleException exception if you\nask them to pickup a baggle from an empty cell, or a\nAlreadyHaveBaggleException exception if they already carry a baggle.  Trying\nto drop a baggle on a cell already containing one throws an\nAlreadyHaveBaggleException exception. \nDropping a baggle when you have none throws a DontHaveBaggleException.\n<p>SimpleBuggles (ie, the one used in first exercises) display an error message\non problem so that you don't need to know what an exception is.</p>\n",
    "fr" : "\n<!-- Please don't translate this file but l10n/missions/plm.pot (see https://github.com/oster/PLM/wiki/Working-on-translations) -->\n<h1>Le monde des Buggles</h1>\nCe monde a été inventé par Lyn Turbak, du Wellesley College. Il est peuplé\nde Buggles, petites bêtes qui comprennent des ordres simples, et offre de\nnombreuses possibilités d'interaction avec le monde : prendre ou poser des\nobjets, colorier le sol, se cogner à des murs, etc.\n\n<h2>Méthodes comprises par les buggles</h2>\n<table border=1>\n<tr><td colspan=2 align=center><b>Bouger</b><br/> (voir aussi la note sur les exceptions, plus bas)</td></tr>\n  <tr><td><b>Tourner à gauche<br/>Tourner à droite<br/>Se retourner<br/>Avancer<br/>Reculer</b></td>\n      <td>[!java|c]void [/!]gauche()<br/>\n          [!java|c]void [/!]droite()<br/>\n          [!java|c]void [/!]retourne()<br/>\n          [!java|c]void [/!][!python|java|scala]avance()[/!][!c]avancePas()[/!] or\n[!java|c]void [/!]avance([!java|c]int [/!]nbPas[!scala]:Int[/!])<br/>\n          [!java|c]void [/!][!python|java|scala]recule()[/!][!c]reculePas()[/!] or\n[!java]void [/!]recule([!java|c]int [/!]nbPas[!scala]:Int[/!])<br/></td></tr>\n  <tr><td><b>Obtenir l'abscisse<br/>Obtenir l'ordonnée<br/>Changer l'abscisse<br/>Changer l'ordonnée<br/>Changer la position</b></td>\n      <td>[!java|c]int [/!]getX()[!scala]:Int[/!]<br/>\n          [!java|c]int [/!]getY()[!scala]:Int[/!]<br/>\n          [!java|c]void [/!]setX([!java|c]int [/!]x[!scala]:Int[/!])<br/>\n          [!java|c]void [/!]setY([!java|c]int [/!]y[!scala]:Int[/!])<br/>\n          [!java|c]void [/!]setPos([!java|c]int [/!]x[!scala]:Int[/!], [!java|c]int\n[/!]y[!scala]:Int[/!])</td></tr>\n<tr><td colspan=2>L'origine (0, 0) est dans le coin en haut à gauche, comme c'est souvent le\ncas en informatique.</td></tr>\n\n<tr><td colspan=2 align=center><b>Informations sur la buggle</b></td></tr>\n  <tr><td><b>Obtenir la couleur de la buggle</b><br/>Changer la couleur de la buggle</b></td>\n      <td>[!java|c]Color [/!]getCouleurCorps()[!scala]:Color[/!]<br/>\n          [!java|c]void [/!]setCouleurCorps([!java|c]Color [/!]c[!scala]:Color[/!])</td></tr>\t\t\t\t\n  <tr><td><b>Chercher un mur devant<br/>Chercher un mur derrière</b></td>\n      <td>[!java]boolean [/!][!c]int [/!]estFaceMur()[!scala]:Boolean[/!]<br/>\n          [!java]boolean [/!][!c]int [/!]estDosMur()[!scala]:Boolean[/!]</td></tr>\t\t\t\t\n  <tr><td><b>Obtenir la direction<br/>Changer la direction</b><br/>Les directions valides sont :</td>\n      <td>[!java|c]Direction [/!]getDirection()[!scala]:Direction[/!]<br/>\n          [!java|c]void [/!]setDirection([!java|c]Direction\n[/!]dir[!scala]:Direction[/!])<br/>\n          [!scala|java|python]Direction.[/!]NORTH (nord),\n[!scala|java|python]Direction.[/!]EAST (est),\n[!scala|java|python]Direction.[/!]SOUTH (sud) et\n[!scala|java|python]Direction.[/!]WEST (ouest)</td></tr>\n  <tr><td>Renvoi si la buggle est actuellement <b>sélectionnée dans l'interface</b></td>\n      <td>[!java]boolean [/!][!c]int [/!]estChoisie()[!scala]:Boolean[/!]</td></tr>\n \n<tr><td colspan=2 align=center><b>À propos de la brosse</b></td></tr>\n  <tr><td><b>Baisser la brosse<br/>Lever la brosse<br/>Obtenir la position de la brosse</b></td>\n      <td>[!java|c]void [/!]leveBrosse()<br/>\n          [!java|c]void [/!]baisseBrosse()<br/>\n          [!java]boolean [/!][!c]int [/!]estBrosseBaissee()[!scala]:Boolean[/!]</td></tr>\n  <tr><td><b>Modifier la couleur de la brosse<br/>Obtenir la couleur de la brosse</b></td>\n      <td>[!java|c]void [/!]setCouleurBrosse([!java|c]Color [/!]c[!scala]:Color[/!])<br/>\n          [!java|c]Color [/!]getCouleurBrosse()[!scala]:Color[/!]</td></tr>\n\n<tr><td colspan=2 align=center><b>Interagir avec le monde</b></td></tr>\n  <tr><td><b>Obtenir la couleur du sol</b></td>\n      <td>[!java|c]Color [/!]getCouleurSol()[!scala]:Color[/!]</td></tr>\n\n  <tr><td><b>Vrai si biscuit par terre<br/>Vrai si on porte un biscuit<br/>Ramasse un biscuit<br/>Poser un biscuit</b><br/>\n      (voir la note sur les exceptions)</td>\n      <td>[!java]boolean [/!][!c]int [/!]estSurBiscuit()[!scala]:Boolean[/!]<br/>\n          [!java]boolean [/!][!c]int [/!]porteBiscuit()[!scala]:Boolean[/!]<br/>\n          [!java]void [/!]prendBiscuit()<br/>\n          [!java]void [/!]poseBiscuit()<br/>\n          &nbsp;</td></tr>\n\n  <tr><td><b>Chercher un message<br/>Ajouter un message<br/>Lire le message<br/>Effacer le message</b></td>\n      <td>[!java]boolean [/!][!c]int [/!]estSurMessage()[!scala]:Boolean[/!]<br/>\n          [!java]void [/!]ecritMessage([!java]String [/!][!c]char*\n[/!]msg[!scala]:String[/!])<br/>\n          [!java]String [/!][!c]char* [/!]litMessage()[!scala]:String[/!]<br/>\n          [!java]void [/!]effaceMessage()</td></tr>\n</table>\n\n<h2>Couleurs valides</h2>\n<table border=1>\n<tr><td>Nom</td><td>Couleur</td></tr>\n<tr><td>[!scala|java|python]Color.[/!]black</td>    <td BGCOLOR=\"#000000\">&nbsp;</td></tr>\n<tr><td>[!scala|java|python]Color.[/!]blue</td>     <td BGCOLOR=\"#0000FF\">&nbsp;</td></tr>\n<tr><td>[!scala|java|python]Color.[/!]cyan</td>     <td BGCOLOR=\"#00FFFF\">&nbsp;</td></tr>\n<tr><td>[!scala|java|python]Color.[/!]darkGray</td> <td BGCOLOR=\"#404040\">&nbsp;</td></tr>\n<tr><td>[!scala|java|python]Color.[/!]gray</td>     <td BGCOLOR=\"#808080\">&nbsp;</td></tr>\n<tr><td>[!scala|java|python]Color.[/!]green</td>    <td BGCOLOR=\"#00FF00\">&nbsp;</td></tr>\n<tr><td>[!scala|java|python]Color.[/!]lightGray</td><td BGCOLOR=\"#C0C0C0\">&nbsp;</td></tr>\n<tr><td>[!scala|java|python]Color.[/!]magenta</td>  <td BGCOLOR=\"#FF00FF\">&nbsp;</td></tr>\n<tr><td>[!scala|java|python]Color.[/!]orange</td>   <td BGCOLOR=\"#FFC800\">&nbsp;</td></tr>\n<tr><td>[!scala|java|python]Color.[/!]pink</td>     <td BGCOLOR=\"#FFAFAF\">&nbsp;</td></tr>\n<tr><td>[!scala|java|python]Color.[/!]red</td>      <td BGCOLOR=\"#FF0000\">&nbsp;</td></tr>\n<tr><td>[!scala|java|python]Color.[/!]white</td>    <td BGCOLOR=\"#FFFFFF\">&nbsp;</td></tr>\n<tr><td>[!scala|java|python]Color.[/!]yellow</td>   <td BGCOLOR=\"#FFFF00\">&nbsp;</td></tr>\n</table>\n\n<h2>Note sur les exceptions</h2>\nLes buggles normales lèvent une exception BuggleWallException si on cherche\nà leur faire traverser un mur.\nElles lèvent une exception NoBaggleUnderBuggleException si vous cherchez à\nprendre un biscuit dans une case qui n'en contient pas, ou une exception\nAlreadyHaveBaggleException si vous portez déjà un biscuit.\nTenter de déposer un biscuit sur une case qui en contient déjà lève une\nexception AlreadyHaveBaggleException.\nTenter de poser un biscuit alors qu'on n'en a pas lève une exception\nDontHaveBaggleException.\n<p>Les \"SimpleBuggles\" (c.-à-d., celles utilisées dans les premiers exercices)\naffichent un message d'erreur sans que vous ayez à vous soucier de ce qu'est\nune exception.</p>\n"
  },
  "initialWorlds" : [ {
    "type" : "plm.universe.bugglequest.BuggleWorld",
    "@jsonId" : 1,
    "name" : "Grid",
    "width" : 7,
    "height" : 7,
    "entities" : [ {
      "type" : "plm.universe.bugglequest.SimpleBuggle",
      "name" : "Walker",
      "x" : 0,
      "y" : 0,
      "direction" : 0,
      "bodyColor" : [ 0, 0, 0, 255 ],
      "brushColor" : [ 255, 0, 0, 255 ],
      "world" : 1,
      "inited" : false,
      "brushDown" : false
    } ],
    "steps" : [ ],
    "about" : "<!-- Please don't translate this file but l10n/missions/plm.pot (see https://github.com/oster/PLM/wiki/Working-on-translations) -->\n<h1>BuggleWorld</h1>\nThis world was invented by Lyn Turbak, at Wellesley College. It is full of\nBuggles, little animals understanding simple orders, and offers numerous\npossibilities of interaction with the world: taking or dropping objects,\npaint the ground, hit walls, etc.\n\n<h2>Methods understood by buggles</h2>\n<table border=1>\n<tr><td colspan=2 align=center><b>Moving</b><br/> (See also the note on exceptions, below)</td></tr>\n  <tr><td><b>Turn left<br/>Turn right<br/>Turn back<br/>Moving forward<br/>Moving back</b></td>\n      <td>void left()<br/>\n          void right()<br/>\n          void back()<br/>\n          void forward() or void forward(int steps)<br/>\n          void backward() or void backward(int steps)<br/></td></tr>\n  <tr><td><b>Get X coordinate<br/>Get Y coordinate<br/>Set X coordinate<br/>Set Y coordinate<br/>Set position</b></td>\n      <td>int getX()<br/>\n          int getY()<br/>\n          void setX(int x)<br/>\n          void setY(int y)<br/>\n          void setPos(int x, int y)</td></tr>\n<tr><td colspan=2>Note that the point (0,0) is on the top left corner, as it is often the case in Computer Science.</td></tr>\n\n<tr><td colspan=2 align=center><b>Information on the buggle</b></td></tr>\n  <tr><td><b>Get the color of the body<br/>Set the color of the body</b></td>\n      <td>Color getBodyColor()<br/>\n          void setBodyColor(Color c)</td></tr>\t\t\t\t\n  <tr><td><b>Look for a wall forward<br/>Look for a wall backward</b></td>\n      <td>boolean isFacingWall()<br/>\n          boolean isBackingWall()</td></tr>\t\t\t\t\n  <tr><td><b>Get heading<br/>Set heading</b><br/>valid directions are:</td>\n      <td>Direction getDirection()<br/>\n          void setDirection(Direction dir)<br/>\n          Direction.NORTH, Direction.EAST, Direction.SOUTH and Direction.WEST</td></tr>\n  <tr><td>Check whether the buggle is currently <b>selected in the interface</b></td>\n      <td>boolean isSelected()</td></tr>\n \n<tr><td colspan=2 align=center><b>About the brush</b></td></tr>\n  <tr><td><b>Brush down<br/>Brush up<br/>Get brush position</b></td>\n      <td>void brushUp()<br/>\n          void brushDown()<br/>\n          boolean isBrushDown()</td></tr>\n  <tr><td><b>Change the brush color<br/>Get the color of the brush</b></td>\n      <td>void setBrushColor(Color c)<br/>\n          Color getBrushColor()</td></tr>\n\n<tr><td colspan=2 align=center><b>Interacting with the world</b></td></tr>\n  <tr><td><b>Get the color of the ground</b></td>\n      <td>Color getGroundColor()</td></tr>\n\n  <tr><td><b>Look for a baggle on the ground<br/>Look for a baggle in bag<br/>Pickup a baggle<br/>Drop a baggle</b><br/>\n      (see the note on exceptions)</td>\n      <td>boolean isOverBaggle()<br/>\n          boolean isCarryingBaggle()<br/>\n          void pickupBaggle()<br/>\n          void dropBaggle()<br/>\n          &nbsp;</td></tr>\n\n  <tr><td><b>Look for a message<br/>Add a message<br/>Read the message<br/>Erase the message</b></td>\n      <td>boolean isOverMessage()<br/>\n          void writeMessage(String msg)<br/>\n          String readMessage()<br/>\n          void clearMessage()</td></tr>\n</table>\n\n<h2>Valid colors</h2>\n<table border=1>\n<tr><td>Name</td><td>Color</td></tr>\n<tr><td>Color.black</td>    <td BGCOLOR=\"#000000\">&nbsp;</td></tr>\n<tr><td>Color.blue</td>     <td BGCOLOR=\"#0000FF\">&nbsp;</td></tr>\n<tr><td>Color.cyan</td>     <td BGCOLOR=\"#00FFFF\">&nbsp;</td></tr>\n<tr><td>Color.darkGray</td> <td BGCOLOR=\"#404040\">&nbsp;</td></tr>\n<tr><td>Color.gray</td>     <td BGCOLOR=\"#808080\">&nbsp;</td></tr>\n<tr><td>Color.green</td>    <td BGCOLOR=\"#00FF00\">&nbsp;</td></tr>\n<tr><td>Color.lightGray</td><td BGCOLOR=\"#C0C0C0\">&nbsp;</td></tr>\n<tr><td>Color.magenta</td>  <td BGCOLOR=\"#FF00FF\">&nbsp;</td></tr>\n<tr><td>Color.orange</td>   <td BGCOLOR=\"#FFC800\">&nbsp;</td></tr>\n<tr><td>Color.pink</td>     <td BGCOLOR=\"#FFAFAF\">&nbsp;</td></tr>\n<tr><td>Color.red</td>      <td BGCOLOR=\"#FF0000\">&nbsp;</td></tr>\n<tr><td>Color.white</td>    <td BGCOLOR=\"#FFFFFF\">&nbsp;</td></tr>\n<tr><td>Color.yellow</td>   <td BGCOLOR=\"#FFFF00\">&nbsp;</td></tr>\n</table>\n\n<h2>Note on exceptions</h2>\nRegular buggles throw a BuggleWallException exception if you ask them to\ntraverse a wall.  They throw a NoBaggleUnderBuggleException exception if you\nask them to pickup a baggle from an empty cell, or a\nAlreadyHaveBaggleException exception if they already carry a baggle.  Trying\nto drop a baggle on a cell already containing one throws an\nAlreadyHaveBaggleException exception. \nDropping a baggle when you have none throws a DontHaveBaggleException.\n<p>SimpleBuggles (ie, the one used in first exercises) display an error message\non problem so that you don't need to know what an exception is.</p>\n",
    "parameters" : null,
    "cells" : [ [ {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 1,
      "x" : 0,
      "y" : 0,
      "msgColor" : [ 128, 128, 230, 255 ],
      "content" : "",
      "leftWall" : true,
      "topWall" : true
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 1,
      "x" : 0,
      "y" : 1,
      "msgColor" : [ 128, 128, 230, 255 ],
      "content" : "",
      "leftWall" : true
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 1,
      "x" : 0,
      "y" : 2,
      "msgColor" : [ 128, 128, 230, 255 ],
      "content" : "",
      "leftWall" : true
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 1,
      "x" : 0,
      "y" : 3,
      "msgColor" : [ 128, 128, 230, 255 ],
      "content" : "",
      "leftWall" : true
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 1,
      "x" : 0,
      "y" : 4,
      "msgColor" : [ 128, 128, 230, 255 ],
      "content" : "",
      "leftWall" : true
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 1,
      "x" : 0,
      "y" : 5,
      "msgColor" : [ 128, 128, 230, 255 ],
      "content" : "",
      "leftWall" : true
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 1,
      "x" : 0,
      "y" : 6,
      "msgColor" : [ 128, 128, 230, 255 ],
      "content" : "",
      "leftWall" : true
    } ], [ {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 1,
      "x" : 1,
      "y" : 0,
      "topWall" : true
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 1,
      "x" : 1,
      "y" : 1
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 1,
      "x" : 1,
      "y" : 2
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 1,
      "x" : 1,
      "y" : 3
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 1,
      "x" : 1,
      "y" : 4
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 1,
      "x" : 1,
      "y" : 5
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 1,
      "x" : 1,
      "y" : 6
    } ], [ {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 1,
      "x" : 2,
      "y" : 0,
      "topWall" : true
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 1,
      "x" : 2,
      "y" : 1
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 1,
      "x" : 2,
      "y" : 2
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 1,
      "x" : 2,
      "y" : 3
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 1,
      "x" : 2,
      "y" : 4
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 1,
      "x" : 2,
      "y" : 5
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 1,
      "x" : 2,
      "y" : 6
    } ], [ {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 1,
      "x" : 3,
      "y" : 0,
      "topWall" : true
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 1,
      "x" : 3,
      "y" : 1
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 1,
      "x" : 3,
      "y" : 2
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 1,
      "x" : 3,
      "y" : 3
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 1,
      "x" : 3,
      "y" : 4
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 1,
      "x" : 3,
      "y" : 5
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 1,
      "x" : 3,
      "y" : 6
    } ], [ {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 1,
      "x" : 4,
      "y" : 0,
      "topWall" : true
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 1,
      "x" : 4,
      "y" : 1
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 1,
      "x" : 4,
      "y" : 2
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 1,
      "x" : 4,
      "y" : 3
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 1,
      "x" : 4,
      "y" : 4
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 1,
      "x" : 4,
      "y" : 5
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 1,
      "x" : 4,
      "y" : 6
    } ], [ {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 1,
      "x" : 5,
      "y" : 0,
      "topWall" : true
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 1,
      "x" : 5,
      "y" : 1
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 1,
      "x" : 5,
      "y" : 2
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 1,
      "x" : 5,
      "y" : 3
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 1,
      "x" : 5,
      "y" : 4
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 1,
      "x" : 5,
      "y" : 5
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 1,
      "x" : 5,
      "y" : 6
    } ], [ {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 1,
      "x" : 6,
      "y" : 0,
      "topWall" : true
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 1,
      "x" : 6,
      "y" : 1
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 1,
      "x" : 6,
      "y" : 2
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 1,
      "x" : 6,
      "y" : 3
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 1,
      "x" : 6,
      "y" : 4
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 1,
      "x" : 6,
      "y" : 5
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 1,
      "x" : 6,
      "y" : 6
    } ] ],
    "visibleGrid" : true,
    "easter" : false
  } ],
  "answerWorlds" : [ {
    "type" : "plm.universe.bugglequest.BuggleWorld",
    "@jsonId" : 2,
    "name" : "Grid",
    "width" : 7,
    "height" : 7,
    "entities" : [ {
      "type" : "plm.universe.bugglequest.SimpleBuggle",
      "name" : "Walker",
      "world" : 2,
      "inited" : true,
      "bodyColor" : [ 0, 0, 0, 255 ],
      "brushColor" : [ 255, 0, 0, 255 ],
      "x" : 6,
      "y" : 6,
      "direction" : 0,
      "brushDown" : false
    } ],
    "steps" : [ [ {
      "type" : "plm.universe.bugglequest.operations.ChangeCellContent",
      "@jsonId" : 3,
      "x" : 0,
      "y" : 0,
      "oldContent" : "",
      "newContent" : "0",
      "name" : "changeCellContent"
    }, {
      "type" : "plm.universe.bugglequest.operations.ChangeCellHasContent",
      "@jsonId" : 4,
      "x" : 0,
      "y" : 0,
      "oldHasContent" : false,
      "newHasContent" : true,
      "name" : "changeCellHasContent"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.MoveBuggleOperation",
      "@jsonId" : 5,
      "buggleID" : "Walker",
      "oldX" : 0,
      "oldY" : 0,
      "newX" : 0,
      "newY" : 1,
      "name" : "moveBuggleOperation"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.ChangeCellContent",
      "@jsonId" : 6,
      "x" : 0,
      "y" : 1,
      "oldContent" : "",
      "newContent" : "1",
      "name" : "changeCellContent"
    }, {
      "type" : "plm.universe.bugglequest.operations.ChangeCellHasContent",
      "@jsonId" : 7,
      "x" : 0,
      "y" : 1,
      "oldHasContent" : false,
      "newHasContent" : true,
      "name" : "changeCellHasContent"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.MoveBuggleOperation",
      "@jsonId" : 8,
      "buggleID" : "Walker",
      "oldX" : 0,
      "oldY" : 1,
      "newX" : 0,
      "newY" : 2,
      "name" : "moveBuggleOperation"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.ChangeCellContent",
      "@jsonId" : 9,
      "x" : 0,
      "y" : 2,
      "oldContent" : "",
      "newContent" : "2",
      "name" : "changeCellContent"
    }, {
      "type" : "plm.universe.bugglequest.operations.ChangeCellHasContent",
      "@jsonId" : 10,
      "x" : 0,
      "y" : 2,
      "oldHasContent" : false,
      "newHasContent" : true,
      "name" : "changeCellHasContent"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.MoveBuggleOperation",
      "@jsonId" : 11,
      "buggleID" : "Walker",
      "oldX" : 0,
      "oldY" : 2,
      "newX" : 0,
      "newY" : 3,
      "name" : "moveBuggleOperation"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.ChangeCellContent",
      "@jsonId" : 12,
      "x" : 0,
      "y" : 3,
      "oldContent" : "",
      "newContent" : "3",
      "name" : "changeCellContent"
    }, {
      "type" : "plm.universe.bugglequest.operations.ChangeCellHasContent",
      "@jsonId" : 13,
      "x" : 0,
      "y" : 3,
      "oldHasContent" : false,
      "newHasContent" : true,
      "name" : "changeCellHasContent"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.MoveBuggleOperation",
      "@jsonId" : 14,
      "buggleID" : "Walker",
      "oldX" : 0,
      "oldY" : 3,
      "newX" : 0,
      "newY" : 4,
      "name" : "moveBuggleOperation"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.ChangeCellContent",
      "@jsonId" : 15,
      "x" : 0,
      "y" : 4,
      "oldContent" : "",
      "newContent" : "4",
      "name" : "changeCellContent"
    }, {
      "type" : "plm.universe.bugglequest.operations.ChangeCellHasContent",
      "@jsonId" : 16,
      "x" : 0,
      "y" : 4,
      "oldHasContent" : false,
      "newHasContent" : true,
      "name" : "changeCellHasContent"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.MoveBuggleOperation",
      "@jsonId" : 17,
      "buggleID" : "Walker",
      "oldX" : 0,
      "oldY" : 4,
      "newX" : 0,
      "newY" : 5,
      "name" : "moveBuggleOperation"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.ChangeCellContent",
      "@jsonId" : 18,
      "x" : 0,
      "y" : 5,
      "oldContent" : "",
      "newContent" : "5",
      "name" : "changeCellContent"
    }, {
      "type" : "plm.universe.bugglequest.operations.ChangeCellHasContent",
      "@jsonId" : 19,
      "x" : 0,
      "y" : 5,
      "oldHasContent" : false,
      "newHasContent" : true,
      "name" : "changeCellHasContent"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.MoveBuggleOperation",
      "@jsonId" : 20,
      "buggleID" : "Walker",
      "oldX" : 0,
      "oldY" : 5,
      "newX" : 0,
      "newY" : 6,
      "name" : "moveBuggleOperation"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.ChangeCellContent",
      "@jsonId" : 21,
      "x" : 0,
      "y" : 6,
      "oldContent" : "",
      "newContent" : "6",
      "name" : "changeCellContent"
    }, {
      "type" : "plm.universe.bugglequest.operations.ChangeCellHasContent",
      "@jsonId" : 22,
      "x" : 0,
      "y" : 6,
      "oldHasContent" : false,
      "newHasContent" : true,
      "name" : "changeCellHasContent"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.MoveBuggleOperation",
      "@jsonId" : 23,
      "buggleID" : "Walker",
      "oldX" : 0,
      "oldY" : 6,
      "newX" : 1,
      "newY" : 0,
      "name" : "moveBuggleOperation"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.ChangeCellContent",
      "@jsonId" : 24,
      "x" : 1,
      "y" : 0,
      "oldContent" : "",
      "newContent" : "7",
      "name" : "changeCellContent"
    }, {
      "type" : "plm.universe.bugglequest.operations.ChangeCellHasContent",
      "@jsonId" : 25,
      "x" : 1,
      "y" : 0,
      "oldHasContent" : false,
      "newHasContent" : true,
      "name" : "changeCellHasContent"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.MoveBuggleOperation",
      "@jsonId" : 26,
      "buggleID" : "Walker",
      "oldX" : 1,
      "oldY" : 0,
      "newX" : 1,
      "newY" : 1,
      "name" : "moveBuggleOperation"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.ChangeCellContent",
      "@jsonId" : 27,
      "x" : 1,
      "y" : 1,
      "oldContent" : "",
      "newContent" : "8",
      "name" : "changeCellContent"
    }, {
      "type" : "plm.universe.bugglequest.operations.ChangeCellHasContent",
      "@jsonId" : 28,
      "x" : 1,
      "y" : 1,
      "oldHasContent" : false,
      "newHasContent" : true,
      "name" : "changeCellHasContent"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.MoveBuggleOperation",
      "@jsonId" : 29,
      "buggleID" : "Walker",
      "oldX" : 1,
      "oldY" : 1,
      "newX" : 1,
      "newY" : 2,
      "name" : "moveBuggleOperation"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.ChangeCellContent",
      "@jsonId" : 30,
      "x" : 1,
      "y" : 2,
      "oldContent" : "",
      "newContent" : "9",
      "name" : "changeCellContent"
    }, {
      "type" : "plm.universe.bugglequest.operations.ChangeCellHasContent",
      "@jsonId" : 31,
      "x" : 1,
      "y" : 2,
      "oldHasContent" : false,
      "newHasContent" : true,
      "name" : "changeCellHasContent"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.MoveBuggleOperation",
      "@jsonId" : 32,
      "buggleID" : "Walker",
      "oldX" : 1,
      "oldY" : 2,
      "newX" : 1,
      "newY" : 3,
      "name" : "moveBuggleOperation"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.ChangeCellContent",
      "@jsonId" : 33,
      "x" : 1,
      "y" : 3,
      "oldContent" : "",
      "newContent" : "10",
      "name" : "changeCellContent"
    }, {
      "type" : "plm.universe.bugglequest.operations.ChangeCellHasContent",
      "@jsonId" : 34,
      "x" : 1,
      "y" : 3,
      "oldHasContent" : false,
      "newHasContent" : true,
      "name" : "changeCellHasContent"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.MoveBuggleOperation",
      "@jsonId" : 35,
      "buggleID" : "Walker",
      "oldX" : 1,
      "oldY" : 3,
      "newX" : 1,
      "newY" : 4,
      "name" : "moveBuggleOperation"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.ChangeCellContent",
      "@jsonId" : 36,
      "x" : 1,
      "y" : 4,
      "oldContent" : "",
      "newContent" : "11",
      "name" : "changeCellContent"
    }, {
      "type" : "plm.universe.bugglequest.operations.ChangeCellHasContent",
      "@jsonId" : 37,
      "x" : 1,
      "y" : 4,
      "oldHasContent" : false,
      "newHasContent" : true,
      "name" : "changeCellHasContent"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.MoveBuggleOperation",
      "@jsonId" : 38,
      "buggleID" : "Walker",
      "oldX" : 1,
      "oldY" : 4,
      "newX" : 1,
      "newY" : 5,
      "name" : "moveBuggleOperation"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.ChangeCellContent",
      "@jsonId" : 39,
      "x" : 1,
      "y" : 5,
      "oldContent" : "",
      "newContent" : "12",
      "name" : "changeCellContent"
    }, {
      "type" : "plm.universe.bugglequest.operations.ChangeCellHasContent",
      "@jsonId" : 40,
      "x" : 1,
      "y" : 5,
      "oldHasContent" : false,
      "newHasContent" : true,
      "name" : "changeCellHasContent"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.MoveBuggleOperation",
      "@jsonId" : 41,
      "buggleID" : "Walker",
      "oldX" : 1,
      "oldY" : 5,
      "newX" : 1,
      "newY" : 6,
      "name" : "moveBuggleOperation"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.ChangeCellContent",
      "@jsonId" : 42,
      "x" : 1,
      "y" : 6,
      "oldContent" : "",
      "newContent" : "13",
      "name" : "changeCellContent"
    }, {
      "type" : "plm.universe.bugglequest.operations.ChangeCellHasContent",
      "@jsonId" : 43,
      "x" : 1,
      "y" : 6,
      "oldHasContent" : false,
      "newHasContent" : true,
      "name" : "changeCellHasContent"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.MoveBuggleOperation",
      "@jsonId" : 44,
      "buggleID" : "Walker",
      "oldX" : 1,
      "oldY" : 6,
      "newX" : 2,
      "newY" : 0,
      "name" : "moveBuggleOperation"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.ChangeCellContent",
      "@jsonId" : 45,
      "x" : 2,
      "y" : 0,
      "oldContent" : "",
      "newContent" : "14",
      "name" : "changeCellContent"
    }, {
      "type" : "plm.universe.bugglequest.operations.ChangeCellHasContent",
      "@jsonId" : 46,
      "x" : 2,
      "y" : 0,
      "oldHasContent" : false,
      "newHasContent" : true,
      "name" : "changeCellHasContent"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.MoveBuggleOperation",
      "@jsonId" : 47,
      "buggleID" : "Walker",
      "oldX" : 2,
      "oldY" : 0,
      "newX" : 2,
      "newY" : 1,
      "name" : "moveBuggleOperation"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.ChangeCellContent",
      "@jsonId" : 48,
      "x" : 2,
      "y" : 1,
      "oldContent" : "",
      "newContent" : "15",
      "name" : "changeCellContent"
    }, {
      "type" : "plm.universe.bugglequest.operations.ChangeCellHasContent",
      "@jsonId" : 49,
      "x" : 2,
      "y" : 1,
      "oldHasContent" : false,
      "newHasContent" : true,
      "name" : "changeCellHasContent"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.MoveBuggleOperation",
      "@jsonId" : 50,
      "buggleID" : "Walker",
      "oldX" : 2,
      "oldY" : 1,
      "newX" : 2,
      "newY" : 2,
      "name" : "moveBuggleOperation"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.ChangeCellContent",
      "@jsonId" : 51,
      "x" : 2,
      "y" : 2,
      "oldContent" : "",
      "newContent" : "16",
      "name" : "changeCellContent"
    }, {
      "type" : "plm.universe.bugglequest.operations.ChangeCellHasContent",
      "@jsonId" : 52,
      "x" : 2,
      "y" : 2,
      "oldHasContent" : false,
      "newHasContent" : true,
      "name" : "changeCellHasContent"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.MoveBuggleOperation",
      "@jsonId" : 53,
      "buggleID" : "Walker",
      "oldX" : 2,
      "oldY" : 2,
      "newX" : 2,
      "newY" : 3,
      "name" : "moveBuggleOperation"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.ChangeCellContent",
      "@jsonId" : 54,
      "x" : 2,
      "y" : 3,
      "oldContent" : "",
      "newContent" : "17",
      "name" : "changeCellContent"
    }, {
      "type" : "plm.universe.bugglequest.operations.ChangeCellHasContent",
      "@jsonId" : 55,
      "x" : 2,
      "y" : 3,
      "oldHasContent" : false,
      "newHasContent" : true,
      "name" : "changeCellHasContent"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.MoveBuggleOperation",
      "@jsonId" : 56,
      "buggleID" : "Walker",
      "oldX" : 2,
      "oldY" : 3,
      "newX" : 2,
      "newY" : 4,
      "name" : "moveBuggleOperation"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.ChangeCellContent",
      "@jsonId" : 57,
      "x" : 2,
      "y" : 4,
      "oldContent" : "",
      "newContent" : "18",
      "name" : "changeCellContent"
    }, {
      "type" : "plm.universe.bugglequest.operations.ChangeCellHasContent",
      "@jsonId" : 58,
      "x" : 2,
      "y" : 4,
      "oldHasContent" : false,
      "newHasContent" : true,
      "name" : "changeCellHasContent"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.MoveBuggleOperation",
      "@jsonId" : 59,
      "buggleID" : "Walker",
      "oldX" : 2,
      "oldY" : 4,
      "newX" : 2,
      "newY" : 5,
      "name" : "moveBuggleOperation"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.ChangeCellContent",
      "@jsonId" : 60,
      "x" : 2,
      "y" : 5,
      "oldContent" : "",
      "newContent" : "19",
      "name" : "changeCellContent"
    }, {
      "type" : "plm.universe.bugglequest.operations.ChangeCellHasContent",
      "@jsonId" : 61,
      "x" : 2,
      "y" : 5,
      "oldHasContent" : false,
      "newHasContent" : true,
      "name" : "changeCellHasContent"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.MoveBuggleOperation",
      "@jsonId" : 62,
      "buggleID" : "Walker",
      "oldX" : 2,
      "oldY" : 5,
      "newX" : 2,
      "newY" : 6,
      "name" : "moveBuggleOperation"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.ChangeCellContent",
      "@jsonId" : 63,
      "x" : 2,
      "y" : 6,
      "oldContent" : "",
      "newContent" : "20",
      "name" : "changeCellContent"
    }, {
      "type" : "plm.universe.bugglequest.operations.ChangeCellHasContent",
      "@jsonId" : 64,
      "x" : 2,
      "y" : 6,
      "oldHasContent" : false,
      "newHasContent" : true,
      "name" : "changeCellHasContent"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.MoveBuggleOperation",
      "@jsonId" : 65,
      "buggleID" : "Walker",
      "oldX" : 2,
      "oldY" : 6,
      "newX" : 3,
      "newY" : 0,
      "name" : "moveBuggleOperation"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.ChangeCellContent",
      "@jsonId" : 66,
      "x" : 3,
      "y" : 0,
      "oldContent" : "",
      "newContent" : "21",
      "name" : "changeCellContent"
    }, {
      "type" : "plm.universe.bugglequest.operations.ChangeCellHasContent",
      "@jsonId" : 67,
      "x" : 3,
      "y" : 0,
      "oldHasContent" : false,
      "newHasContent" : true,
      "name" : "changeCellHasContent"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.MoveBuggleOperation",
      "@jsonId" : 68,
      "buggleID" : "Walker",
      "oldX" : 3,
      "oldY" : 0,
      "newX" : 3,
      "newY" : 1,
      "name" : "moveBuggleOperation"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.ChangeCellContent",
      "@jsonId" : 69,
      "x" : 3,
      "y" : 1,
      "oldContent" : "",
      "newContent" : "22",
      "name" : "changeCellContent"
    }, {
      "type" : "plm.universe.bugglequest.operations.ChangeCellHasContent",
      "@jsonId" : 70,
      "x" : 3,
      "y" : 1,
      "oldHasContent" : false,
      "newHasContent" : true,
      "name" : "changeCellHasContent"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.MoveBuggleOperation",
      "@jsonId" : 71,
      "buggleID" : "Walker",
      "oldX" : 3,
      "oldY" : 1,
      "newX" : 3,
      "newY" : 2,
      "name" : "moveBuggleOperation"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.ChangeCellContent",
      "@jsonId" : 72,
      "x" : 3,
      "y" : 2,
      "oldContent" : "",
      "newContent" : "23",
      "name" : "changeCellContent"
    }, {
      "type" : "plm.universe.bugglequest.operations.ChangeCellHasContent",
      "@jsonId" : 73,
      "x" : 3,
      "y" : 2,
      "oldHasContent" : false,
      "newHasContent" : true,
      "name" : "changeCellHasContent"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.MoveBuggleOperation",
      "@jsonId" : 74,
      "buggleID" : "Walker",
      "oldX" : 3,
      "oldY" : 2,
      "newX" : 3,
      "newY" : 3,
      "name" : "moveBuggleOperation"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.ChangeCellContent",
      "@jsonId" : 75,
      "x" : 3,
      "y" : 3,
      "oldContent" : "",
      "newContent" : "24",
      "name" : "changeCellContent"
    }, {
      "type" : "plm.universe.bugglequest.operations.ChangeCellHasContent",
      "@jsonId" : 76,
      "x" : 3,
      "y" : 3,
      "oldHasContent" : false,
      "newHasContent" : true,
      "name" : "changeCellHasContent"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.MoveBuggleOperation",
      "@jsonId" : 77,
      "buggleID" : "Walker",
      "oldX" : 3,
      "oldY" : 3,
      "newX" : 3,
      "newY" : 4,
      "name" : "moveBuggleOperation"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.ChangeCellContent",
      "@jsonId" : 78,
      "x" : 3,
      "y" : 4,
      "oldContent" : "",
      "newContent" : "25",
      "name" : "changeCellContent"
    }, {
      "type" : "plm.universe.bugglequest.operations.ChangeCellHasContent",
      "@jsonId" : 79,
      "x" : 3,
      "y" : 4,
      "oldHasContent" : false,
      "newHasContent" : true,
      "name" : "changeCellHasContent"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.MoveBuggleOperation",
      "@jsonId" : 80,
      "buggleID" : "Walker",
      "oldX" : 3,
      "oldY" : 4,
      "newX" : 3,
      "newY" : 5,
      "name" : "moveBuggleOperation"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.ChangeCellContent",
      "@jsonId" : 81,
      "x" : 3,
      "y" : 5,
      "oldContent" : "",
      "newContent" : "26",
      "name" : "changeCellContent"
    }, {
      "type" : "plm.universe.bugglequest.operations.ChangeCellHasContent",
      "@jsonId" : 82,
      "x" : 3,
      "y" : 5,
      "oldHasContent" : false,
      "newHasContent" : true,
      "name" : "changeCellHasContent"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.MoveBuggleOperation",
      "@jsonId" : 83,
      "buggleID" : "Walker",
      "oldX" : 3,
      "oldY" : 5,
      "newX" : 3,
      "newY" : 6,
      "name" : "moveBuggleOperation"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.ChangeCellContent",
      "@jsonId" : 84,
      "x" : 3,
      "y" : 6,
      "oldContent" : "",
      "newContent" : "27",
      "name" : "changeCellContent"
    }, {
      "type" : "plm.universe.bugglequest.operations.ChangeCellHasContent",
      "@jsonId" : 85,
      "x" : 3,
      "y" : 6,
      "oldHasContent" : false,
      "newHasContent" : true,
      "name" : "changeCellHasContent"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.MoveBuggleOperation",
      "@jsonId" : 86,
      "buggleID" : "Walker",
      "oldX" : 3,
      "oldY" : 6,
      "newX" : 4,
      "newY" : 0,
      "name" : "moveBuggleOperation"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.ChangeCellContent",
      "@jsonId" : 87,
      "x" : 4,
      "y" : 0,
      "oldContent" : "",
      "newContent" : "28",
      "name" : "changeCellContent"
    }, {
      "type" : "plm.universe.bugglequest.operations.ChangeCellHasContent",
      "@jsonId" : 88,
      "x" : 4,
      "y" : 0,
      "oldHasContent" : false,
      "newHasContent" : true,
      "name" : "changeCellHasContent"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.MoveBuggleOperation",
      "@jsonId" : 89,
      "buggleID" : "Walker",
      "oldX" : 4,
      "oldY" : 0,
      "newX" : 4,
      "newY" : 1,
      "name" : "moveBuggleOperation"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.ChangeCellContent",
      "@jsonId" : 90,
      "x" : 4,
      "y" : 1,
      "oldContent" : "",
      "newContent" : "29",
      "name" : "changeCellContent"
    }, {
      "type" : "plm.universe.bugglequest.operations.ChangeCellHasContent",
      "@jsonId" : 91,
      "x" : 4,
      "y" : 1,
      "oldHasContent" : false,
      "newHasContent" : true,
      "name" : "changeCellHasContent"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.MoveBuggleOperation",
      "@jsonId" : 92,
      "buggleID" : "Walker",
      "oldX" : 4,
      "oldY" : 1,
      "newX" : 4,
      "newY" : 2,
      "name" : "moveBuggleOperation"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.ChangeCellContent",
      "@jsonId" : 93,
      "x" : 4,
      "y" : 2,
      "oldContent" : "",
      "newContent" : "30",
      "name" : "changeCellContent"
    }, {
      "type" : "plm.universe.bugglequest.operations.ChangeCellHasContent",
      "@jsonId" : 94,
      "x" : 4,
      "y" : 2,
      "oldHasContent" : false,
      "newHasContent" : true,
      "name" : "changeCellHasContent"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.MoveBuggleOperation",
      "@jsonId" : 95,
      "buggleID" : "Walker",
      "oldX" : 4,
      "oldY" : 2,
      "newX" : 4,
      "newY" : 3,
      "name" : "moveBuggleOperation"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.ChangeCellContent",
      "@jsonId" : 96,
      "x" : 4,
      "y" : 3,
      "oldContent" : "",
      "newContent" : "31",
      "name" : "changeCellContent"
    }, {
      "type" : "plm.universe.bugglequest.operations.ChangeCellHasContent",
      "@jsonId" : 97,
      "x" : 4,
      "y" : 3,
      "oldHasContent" : false,
      "newHasContent" : true,
      "name" : "changeCellHasContent"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.MoveBuggleOperation",
      "@jsonId" : 98,
      "buggleID" : "Walker",
      "oldX" : 4,
      "oldY" : 3,
      "newX" : 4,
      "newY" : 4,
      "name" : "moveBuggleOperation"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.ChangeCellContent",
      "@jsonId" : 99,
      "x" : 4,
      "y" : 4,
      "oldContent" : "",
      "newContent" : "32",
      "name" : "changeCellContent"
    }, {
      "type" : "plm.universe.bugglequest.operations.ChangeCellHasContent",
      "@jsonId" : 100,
      "x" : 4,
      "y" : 4,
      "oldHasContent" : false,
      "newHasContent" : true,
      "name" : "changeCellHasContent"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.MoveBuggleOperation",
      "@jsonId" : 101,
      "buggleID" : "Walker",
      "oldX" : 4,
      "oldY" : 4,
      "newX" : 4,
      "newY" : 5,
      "name" : "moveBuggleOperation"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.ChangeCellContent",
      "@jsonId" : 102,
      "x" : 4,
      "y" : 5,
      "oldContent" : "",
      "newContent" : "33",
      "name" : "changeCellContent"
    }, {
      "type" : "plm.universe.bugglequest.operations.ChangeCellHasContent",
      "@jsonId" : 103,
      "x" : 4,
      "y" : 5,
      "oldHasContent" : false,
      "newHasContent" : true,
      "name" : "changeCellHasContent"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.MoveBuggleOperation",
      "@jsonId" : 104,
      "buggleID" : "Walker",
      "oldX" : 4,
      "oldY" : 5,
      "newX" : 4,
      "newY" : 6,
      "name" : "moveBuggleOperation"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.ChangeCellContent",
      "@jsonId" : 105,
      "x" : 4,
      "y" : 6,
      "oldContent" : "",
      "newContent" : "34",
      "name" : "changeCellContent"
    }, {
      "type" : "plm.universe.bugglequest.operations.ChangeCellHasContent",
      "@jsonId" : 106,
      "x" : 4,
      "y" : 6,
      "oldHasContent" : false,
      "newHasContent" : true,
      "name" : "changeCellHasContent"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.MoveBuggleOperation",
      "@jsonId" : 107,
      "buggleID" : "Walker",
      "oldX" : 4,
      "oldY" : 6,
      "newX" : 5,
      "newY" : 0,
      "name" : "moveBuggleOperation"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.ChangeCellContent",
      "@jsonId" : 108,
      "x" : 5,
      "y" : 0,
      "oldContent" : "",
      "newContent" : "35",
      "name" : "changeCellContent"
    }, {
      "type" : "plm.universe.bugglequest.operations.ChangeCellHasContent",
      "@jsonId" : 109,
      "x" : 5,
      "y" : 0,
      "oldHasContent" : false,
      "newHasContent" : true,
      "name" : "changeCellHasContent"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.MoveBuggleOperation",
      "@jsonId" : 110,
      "buggleID" : "Walker",
      "oldX" : 5,
      "oldY" : 0,
      "newX" : 5,
      "newY" : 1,
      "name" : "moveBuggleOperation"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.ChangeCellContent",
      "@jsonId" : 111,
      "x" : 5,
      "y" : 1,
      "oldContent" : "",
      "newContent" : "36",
      "name" : "changeCellContent"
    }, {
      "type" : "plm.universe.bugglequest.operations.ChangeCellHasContent",
      "@jsonId" : 112,
      "x" : 5,
      "y" : 1,
      "oldHasContent" : false,
      "newHasContent" : true,
      "name" : "changeCellHasContent"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.MoveBuggleOperation",
      "@jsonId" : 113,
      "buggleID" : "Walker",
      "oldX" : 5,
      "oldY" : 1,
      "newX" : 5,
      "newY" : 2,
      "name" : "moveBuggleOperation"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.ChangeCellContent",
      "@jsonId" : 114,
      "x" : 5,
      "y" : 2,
      "oldContent" : "",
      "newContent" : "37",
      "name" : "changeCellContent"
    }, {
      "type" : "plm.universe.bugglequest.operations.ChangeCellHasContent",
      "@jsonId" : 115,
      "x" : 5,
      "y" : 2,
      "oldHasContent" : false,
      "newHasContent" : true,
      "name" : "changeCellHasContent"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.MoveBuggleOperation",
      "@jsonId" : 116,
      "buggleID" : "Walker",
      "oldX" : 5,
      "oldY" : 2,
      "newX" : 5,
      "newY" : 3,
      "name" : "moveBuggleOperation"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.ChangeCellContent",
      "@jsonId" : 117,
      "x" : 5,
      "y" : 3,
      "oldContent" : "",
      "newContent" : "38",
      "name" : "changeCellContent"
    }, {
      "type" : "plm.universe.bugglequest.operations.ChangeCellHasContent",
      "@jsonId" : 118,
      "x" : 5,
      "y" : 3,
      "oldHasContent" : false,
      "newHasContent" : true,
      "name" : "changeCellHasContent"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.MoveBuggleOperation",
      "@jsonId" : 119,
      "buggleID" : "Walker",
      "oldX" : 5,
      "oldY" : 3,
      "newX" : 5,
      "newY" : 4,
      "name" : "moveBuggleOperation"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.ChangeCellContent",
      "@jsonId" : 120,
      "x" : 5,
      "y" : 4,
      "oldContent" : "",
      "newContent" : "39",
      "name" : "changeCellContent"
    }, {
      "type" : "plm.universe.bugglequest.operations.ChangeCellHasContent",
      "@jsonId" : 121,
      "x" : 5,
      "y" : 4,
      "oldHasContent" : false,
      "newHasContent" : true,
      "name" : "changeCellHasContent"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.MoveBuggleOperation",
      "@jsonId" : 122,
      "buggleID" : "Walker",
      "oldX" : 5,
      "oldY" : 4,
      "newX" : 5,
      "newY" : 5,
      "name" : "moveBuggleOperation"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.ChangeCellContent",
      "@jsonId" : 123,
      "x" : 5,
      "y" : 5,
      "oldContent" : "",
      "newContent" : "40",
      "name" : "changeCellContent"
    }, {
      "type" : "plm.universe.bugglequest.operations.ChangeCellHasContent",
      "@jsonId" : 124,
      "x" : 5,
      "y" : 5,
      "oldHasContent" : false,
      "newHasContent" : true,
      "name" : "changeCellHasContent"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.MoveBuggleOperation",
      "@jsonId" : 125,
      "buggleID" : "Walker",
      "oldX" : 5,
      "oldY" : 5,
      "newX" : 5,
      "newY" : 6,
      "name" : "moveBuggleOperation"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.ChangeCellContent",
      "@jsonId" : 126,
      "x" : 5,
      "y" : 6,
      "oldContent" : "",
      "newContent" : "41",
      "name" : "changeCellContent"
    }, {
      "type" : "plm.universe.bugglequest.operations.ChangeCellHasContent",
      "@jsonId" : 127,
      "x" : 5,
      "y" : 6,
      "oldHasContent" : false,
      "newHasContent" : true,
      "name" : "changeCellHasContent"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.MoveBuggleOperation",
      "@jsonId" : 128,
      "buggleID" : "Walker",
      "oldX" : 5,
      "oldY" : 6,
      "newX" : 6,
      "newY" : 0,
      "name" : "moveBuggleOperation"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.ChangeCellContent",
      "@jsonId" : 129,
      "x" : 6,
      "y" : 0,
      "oldContent" : "",
      "newContent" : "42",
      "name" : "changeCellContent"
    }, {
      "type" : "plm.universe.bugglequest.operations.ChangeCellHasContent",
      "@jsonId" : 130,
      "x" : 6,
      "y" : 0,
      "oldHasContent" : false,
      "newHasContent" : true,
      "name" : "changeCellHasContent"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.MoveBuggleOperation",
      "@jsonId" : 131,
      "buggleID" : "Walker",
      "oldX" : 6,
      "oldY" : 0,
      "newX" : 6,
      "newY" : 1,
      "name" : "moveBuggleOperation"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.ChangeCellContent",
      "@jsonId" : 132,
      "x" : 6,
      "y" : 1,
      "oldContent" : "",
      "newContent" : "43",
      "name" : "changeCellContent"
    }, {
      "type" : "plm.universe.bugglequest.operations.ChangeCellHasContent",
      "@jsonId" : 133,
      "x" : 6,
      "y" : 1,
      "oldHasContent" : false,
      "newHasContent" : true,
      "name" : "changeCellHasContent"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.MoveBuggleOperation",
      "@jsonId" : 134,
      "buggleID" : "Walker",
      "oldX" : 6,
      "oldY" : 1,
      "newX" : 6,
      "newY" : 2,
      "name" : "moveBuggleOperation"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.ChangeCellContent",
      "@jsonId" : 135,
      "x" : 6,
      "y" : 2,
      "oldContent" : "",
      "newContent" : "44",
      "name" : "changeCellContent"
    }, {
      "type" : "plm.universe.bugglequest.operations.ChangeCellHasContent",
      "@jsonId" : 136,
      "x" : 6,
      "y" : 2,
      "oldHasContent" : false,
      "newHasContent" : true,
      "name" : "changeCellHasContent"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.MoveBuggleOperation",
      "@jsonId" : 137,
      "buggleID" : "Walker",
      "oldX" : 6,
      "oldY" : 2,
      "newX" : 6,
      "newY" : 3,
      "name" : "moveBuggleOperation"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.ChangeCellContent",
      "@jsonId" : 138,
      "x" : 6,
      "y" : 3,
      "oldContent" : "",
      "newContent" : "45",
      "name" : "changeCellContent"
    }, {
      "type" : "plm.universe.bugglequest.operations.ChangeCellHasContent",
      "@jsonId" : 139,
      "x" : 6,
      "y" : 3,
      "oldHasContent" : false,
      "newHasContent" : true,
      "name" : "changeCellHasContent"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.MoveBuggleOperation",
      "@jsonId" : 140,
      "buggleID" : "Walker",
      "oldX" : 6,
      "oldY" : 3,
      "newX" : 6,
      "newY" : 4,
      "name" : "moveBuggleOperation"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.ChangeCellContent",
      "@jsonId" : 141,
      "x" : 6,
      "y" : 4,
      "oldContent" : "",
      "newContent" : "46",
      "name" : "changeCellContent"
    }, {
      "type" : "plm.universe.bugglequest.operations.ChangeCellHasContent",
      "@jsonId" : 142,
      "x" : 6,
      "y" : 4,
      "oldHasContent" : false,
      "newHasContent" : true,
      "name" : "changeCellHasContent"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.MoveBuggleOperation",
      "@jsonId" : 143,
      "buggleID" : "Walker",
      "oldX" : 6,
      "oldY" : 4,
      "newX" : 6,
      "newY" : 5,
      "name" : "moveBuggleOperation"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.ChangeCellContent",
      "@jsonId" : 144,
      "x" : 6,
      "y" : 5,
      "oldContent" : "",
      "newContent" : "47",
      "name" : "changeCellContent"
    }, {
      "type" : "plm.universe.bugglequest.operations.ChangeCellHasContent",
      "@jsonId" : 145,
      "x" : 6,
      "y" : 5,
      "oldHasContent" : false,
      "newHasContent" : true,
      "name" : "changeCellHasContent"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.MoveBuggleOperation",
      "@jsonId" : 146,
      "buggleID" : "Walker",
      "oldX" : 6,
      "oldY" : 5,
      "newX" : 6,
      "newY" : 6,
      "name" : "moveBuggleOperation"
    } ], [ {
      "type" : "plm.universe.bugglequest.operations.ChangeCellContent",
      "@jsonId" : 147,
      "x" : 6,
      "y" : 6,
      "oldContent" : "",
      "newContent" : "48",
      "name" : "changeCellContent"
    }, {
      "type" : "plm.universe.bugglequest.operations.ChangeCellHasContent",
      "@jsonId" : 148,
      "x" : 6,
      "y" : 6,
      "oldHasContent" : false,
      "newHasContent" : true,
      "name" : "changeCellHasContent"
    } ] ],
    "about" : "<!-- Please don't translate this file but l10n/missions/plm.pot (see https://github.com/oster/PLM/wiki/Working-on-translations) -->\n<h1>BuggleWorld</h1>\nThis world was invented by Lyn Turbak, at Wellesley College. It is full of\nBuggles, little animals understanding simple orders, and offers numerous\npossibilities of interaction with the world: taking or dropping objects,\npaint the ground, hit walls, etc.\n\n<h2>Methods understood by buggles</h2>\n<table border=1>\n<tr><td colspan=2 align=center><b>Moving</b><br/> (See also the note on exceptions, below)</td></tr>\n  <tr><td><b>Turn left<br/>Turn right<br/>Turn back<br/>Moving forward<br/>Moving back</b></td>\n      <td>void left()<br/>\n          void right()<br/>\n          void back()<br/>\n          void forward() or void forward(int steps)<br/>\n          void backward() or void backward(int steps)<br/></td></tr>\n  <tr><td><b>Get X coordinate<br/>Get Y coordinate<br/>Set X coordinate<br/>Set Y coordinate<br/>Set position</b></td>\n      <td>int getX()<br/>\n          int getY()<br/>\n          void setX(int x)<br/>\n          void setY(int y)<br/>\n          void setPos(int x, int y)</td></tr>\n<tr><td colspan=2>Note that the point (0,0) is on the top left corner, as it is often the case in Computer Science.</td></tr>\n\n<tr><td colspan=2 align=center><b>Information on the buggle</b></td></tr>\n  <tr><td><b>Get the color of the body<br/>Set the color of the body</b></td>\n      <td>Color getBodyColor()<br/>\n          void setBodyColor(Color c)</td></tr>\t\t\t\t\n  <tr><td><b>Look for a wall forward<br/>Look for a wall backward</b></td>\n      <td>boolean isFacingWall()<br/>\n          boolean isBackingWall()</td></tr>\t\t\t\t\n  <tr><td><b>Get heading<br/>Set heading</b><br/>valid directions are:</td>\n      <td>Direction getDirection()<br/>\n          void setDirection(Direction dir)<br/>\n          Direction.NORTH, Direction.EAST, Direction.SOUTH and Direction.WEST</td></tr>\n  <tr><td>Check whether the buggle is currently <b>selected in the interface</b></td>\n      <td>boolean isSelected()</td></tr>\n \n<tr><td colspan=2 align=center><b>About the brush</b></td></tr>\n  <tr><td><b>Brush down<br/>Brush up<br/>Get brush position</b></td>\n      <td>void brushUp()<br/>\n          void brushDown()<br/>\n          boolean isBrushDown()</td></tr>\n  <tr><td><b>Change the brush color<br/>Get the color of the brush</b></td>\n      <td>void setBrushColor(Color c)<br/>\n          Color getBrushColor()</td></tr>\n\n<tr><td colspan=2 align=center><b>Interacting with the world</b></td></tr>\n  <tr><td><b>Get the color of the ground</b></td>\n      <td>Color getGroundColor()</td></tr>\n\n  <tr><td><b>Look for a baggle on the ground<br/>Look for a baggle in bag<br/>Pickup a baggle<br/>Drop a baggle</b><br/>\n      (see the note on exceptions)</td>\n      <td>boolean isOverBaggle()<br/>\n          boolean isCarryingBaggle()<br/>\n          void pickupBaggle()<br/>\n          void dropBaggle()<br/>\n          &nbsp;</td></tr>\n\n  <tr><td><b>Look for a message<br/>Add a message<br/>Read the message<br/>Erase the message</b></td>\n      <td>boolean isOverMessage()<br/>\n          void writeMessage(String msg)<br/>\n          String readMessage()<br/>\n          void clearMessage()</td></tr>\n</table>\n\n<h2>Valid colors</h2>\n<table border=1>\n<tr><td>Name</td><td>Color</td></tr>\n<tr><td>Color.black</td>    <td BGCOLOR=\"#000000\">&nbsp;</td></tr>\n<tr><td>Color.blue</td>     <td BGCOLOR=\"#0000FF\">&nbsp;</td></tr>\n<tr><td>Color.cyan</td>     <td BGCOLOR=\"#00FFFF\">&nbsp;</td></tr>\n<tr><td>Color.darkGray</td> <td BGCOLOR=\"#404040\">&nbsp;</td></tr>\n<tr><td>Color.gray</td>     <td BGCOLOR=\"#808080\">&nbsp;</td></tr>\n<tr><td>Color.green</td>    <td BGCOLOR=\"#00FF00\">&nbsp;</td></tr>\n<tr><td>Color.lightGray</td><td BGCOLOR=\"#C0C0C0\">&nbsp;</td></tr>\n<tr><td>Color.magenta</td>  <td BGCOLOR=\"#FF00FF\">&nbsp;</td></tr>\n<tr><td>Color.orange</td>   <td BGCOLOR=\"#FFC800\">&nbsp;</td></tr>\n<tr><td>Color.pink</td>     <td BGCOLOR=\"#FFAFAF\">&nbsp;</td></tr>\n<tr><td>Color.red</td>      <td BGCOLOR=\"#FF0000\">&nbsp;</td></tr>\n<tr><td>Color.white</td>    <td BGCOLOR=\"#FFFFFF\">&nbsp;</td></tr>\n<tr><td>Color.yellow</td>   <td BGCOLOR=\"#FFFF00\">&nbsp;</td></tr>\n</table>\n\n<h2>Note on exceptions</h2>\nRegular buggles throw a BuggleWallException exception if you ask them to\ntraverse a wall.  They throw a NoBaggleUnderBuggleException exception if you\nask them to pickup a baggle from an empty cell, or a\nAlreadyHaveBaggleException exception if they already carry a baggle.  Trying\nto drop a baggle on a cell already containing one throws an\nAlreadyHaveBaggleException exception. \nDropping a baggle when you have none throws a DontHaveBaggleException.\n<p>SimpleBuggles (ie, the one used in first exercises) display an error message\non problem so that you don't need to know what an exception is.</p>\n",
    "parameters" : null,
    "cells" : [ [ {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 2,
      "x" : 0,
      "y" : 0,
      "msgColor" : [ 128, 128, 230, 255 ],
      "content" : "0",
      "leftWall" : true,
      "topWall" : true
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 2,
      "x" : 0,
      "y" : 1,
      "msgColor" : [ 128, 128, 230, 255 ],
      "content" : "1",
      "leftWall" : true
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 2,
      "x" : 0,
      "y" : 2,
      "msgColor" : [ 128, 128, 230, 255 ],
      "content" : "2",
      "leftWall" : true
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 2,
      "x" : 0,
      "y" : 3,
      "msgColor" : [ 128, 128, 230, 255 ],
      "content" : "3",
      "leftWall" : true
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 2,
      "x" : 0,
      "y" : 4,
      "msgColor" : [ 128, 128, 230, 255 ],
      "content" : "4",
      "leftWall" : true
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 2,
      "x" : 0,
      "y" : 5,
      "msgColor" : [ 128, 128, 230, 255 ],
      "content" : "5",
      "leftWall" : true
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 2,
      "x" : 0,
      "y" : 6,
      "msgColor" : [ 128, 128, 230, 255 ],
      "content" : "6",
      "leftWall" : true
    } ], [ {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 2,
      "x" : 1,
      "y" : 0,
      "msgColor" : [ 128, 128, 230, 255 ],
      "content" : "7",
      "topWall" : true
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 2,
      "x" : 1,
      "y" : 1,
      "msgColor" : [ 128, 128, 230, 255 ],
      "content" : "8"
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 2,
      "x" : 1,
      "y" : 2,
      "msgColor" : [ 128, 128, 230, 255 ],
      "content" : "9"
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 2,
      "x" : 1,
      "y" : 3,
      "msgColor" : [ 128, 128, 230, 255 ],
      "content" : "10"
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 2,
      "x" : 1,
      "y" : 4,
      "msgColor" : [ 128, 128, 230, 255 ],
      "content" : "11"
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 2,
      "x" : 1,
      "y" : 5,
      "msgColor" : [ 128, 128, 230, 255 ],
      "content" : "12"
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 2,
      "x" : 1,
      "y" : 6,
      "msgColor" : [ 128, 128, 230, 255 ],
      "content" : "13"
    } ], [ {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 2,
      "x" : 2,
      "y" : 0,
      "msgColor" : [ 128, 128, 230, 255 ],
      "content" : "14",
      "topWall" : true
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 2,
      "x" : 2,
      "y" : 1,
      "msgColor" : [ 128, 128, 230, 255 ],
      "content" : "15"
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 2,
      "x" : 2,
      "y" : 2,
      "msgColor" : [ 128, 128, 230, 255 ],
      "content" : "16"
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 2,
      "x" : 2,
      "y" : 3,
      "msgColor" : [ 128, 128, 230, 255 ],
      "content" : "17"
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 2,
      "x" : 2,
      "y" : 4,
      "msgColor" : [ 128, 128, 230, 255 ],
      "content" : "18"
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 2,
      "x" : 2,
      "y" : 5,
      "msgColor" : [ 128, 128, 230, 255 ],
      "content" : "19"
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 2,
      "x" : 2,
      "y" : 6,
      "msgColor" : [ 128, 128, 230, 255 ],
      "content" : "20"
    } ], [ {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 2,
      "x" : 3,
      "y" : 0,
      "msgColor" : [ 128, 128, 230, 255 ],
      "content" : "21",
      "topWall" : true
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 2,
      "x" : 3,
      "y" : 1,
      "msgColor" : [ 128, 128, 230, 255 ],
      "content" : "22"
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 2,
      "x" : 3,
      "y" : 2,
      "msgColor" : [ 128, 128, 230, 255 ],
      "content" : "23"
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 2,
      "x" : 3,
      "y" : 3,
      "msgColor" : [ 128, 128, 230, 255 ],
      "content" : "24"
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 2,
      "x" : 3,
      "y" : 4,
      "msgColor" : [ 128, 128, 230, 255 ],
      "content" : "25"
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 2,
      "x" : 3,
      "y" : 5,
      "msgColor" : [ 128, 128, 230, 255 ],
      "content" : "26"
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 2,
      "x" : 3,
      "y" : 6,
      "msgColor" : [ 128, 128, 230, 255 ],
      "content" : "27"
    } ], [ {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 2,
      "x" : 4,
      "y" : 0,
      "msgColor" : [ 128, 128, 230, 255 ],
      "content" : "28",
      "topWall" : true
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 2,
      "x" : 4,
      "y" : 1,
      "msgColor" : [ 128, 128, 230, 255 ],
      "content" : "29"
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 2,
      "x" : 4,
      "y" : 2,
      "msgColor" : [ 128, 128, 230, 255 ],
      "content" : "30"
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 2,
      "x" : 4,
      "y" : 3,
      "msgColor" : [ 128, 128, 230, 255 ],
      "content" : "31"
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 2,
      "x" : 4,
      "y" : 4,
      "msgColor" : [ 128, 128, 230, 255 ],
      "content" : "32"
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 2,
      "x" : 4,
      "y" : 5,
      "msgColor" : [ 128, 128, 230, 255 ],
      "content" : "33"
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 2,
      "x" : 4,
      "y" : 6,
      "msgColor" : [ 128, 128, 230, 255 ],
      "content" : "34"
    } ], [ {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 2,
      "x" : 5,
      "y" : 0,
      "msgColor" : [ 128, 128, 230, 255 ],
      "content" : "35",
      "topWall" : true
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 2,
      "x" : 5,
      "y" : 1,
      "msgColor" : [ 128, 128, 230, 255 ],
      "content" : "36"
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 2,
      "x" : 5,
      "y" : 2,
      "msgColor" : [ 128, 128, 230, 255 ],
      "content" : "37"
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 2,
      "x" : 5,
      "y" : 3,
      "msgColor" : [ 128, 128, 230, 255 ],
      "content" : "38"
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 2,
      "x" : 5,
      "y" : 4,
      "msgColor" : [ 128, 128, 230, 255 ],
      "content" : "39"
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 2,
      "x" : 5,
      "y" : 5,
      "msgColor" : [ 128, 128, 230, 255 ],
      "content" : "40"
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 2,
      "x" : 5,
      "y" : 6,
      "msgColor" : [ 128, 128, 230, 255 ],
      "content" : "41"
    } ], [ {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 2,
      "x" : 6,
      "y" : 0,
      "msgColor" : [ 128, 128, 230, 255 ],
      "content" : "42",
      "topWall" : true
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 2,
      "x" : 6,
      "y" : 1,
      "msgColor" : [ 128, 128, 230, 255 ],
      "content" : "43"
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 2,
      "x" : 6,
      "y" : 2,
      "msgColor" : [ 128, 128, 230, 255 ],
      "content" : "44"
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 2,
      "x" : 6,
      "y" : 3,
      "msgColor" : [ 128, 128, 230, 255 ],
      "content" : "45"
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 2,
      "x" : 6,
      "y" : 4,
      "msgColor" : [ 128, 128, 230, 255 ],
      "content" : "46"
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 2,
      "x" : 6,
      "y" : 5,
      "msgColor" : [ 128, 128, 230, 255 ],
      "content" : "47"
    }, {
      "type" : "plm.universe.bugglequest.BuggleWorldCell",
      "world" : 2,
      "x" : 6,
      "y" : 6,
      "msgColor" : [ 128, 128, 230, 255 ],
      "content" : "48"
    } ] ],
    "visibleGrid" : true,
    "easter" : false
  } ],
  "instructions" : {
    "pt" : "\n<!-- Please don't translate this file but l10n/missions/plm.pot (see https://github.com/oster/PLM/wiki/Working-on-translations) -->\n<h2>Percorrer pelas colunas</h2>\n\n<p>O objetivo desta série de exercícios é fazer o buggle percorrer seu\nmundo. Ele deve numerar as células por onde passa para mostrar a ordem do\ncaminho.</p>\n\n<p>O loop principal de seu código deve ser algo como:</p>\n<pre>\n enquanto não estiver na posição final\n   vá para a próxima posição\n   rotule a célula com um número\n</pre>\n\n<p>Ao contrário dos exercícios que vimos até agora, não vamos usar os métodos\n<code>avançar()</code>, <code>recuar()</code> e similares. Ao invés disto,\nvamos calcular as coordenadas da próxima posição de buggle e usar o método\n<code>setPos(x, y)</code> para <i>teletransportar</i> o buggle diretamente\npara esta posição. Por exemplo, <code>setPos(3, 5)</code> teletransporta o\nbuggle para a célula onde x=3 e y=5.</p>\n\n<p>Sua primeira tarefa é escrever uma função booleana indicando se o buggle\nalcançou a posição final ou não, ou seja se ele alcançou o canto inferior\ndireito do mundo. Para isto, você pode usar <code>getLarguraDoMundo()</code>\ne <code>getAlturaDoMundo()</code> que retornam respectivamente a largura e\naltura do mundo. Seu teste deve comparar a posição atual do buggle (que você\npode acessar com <code>getX()</code> e <code>getY()</code>) com as dimensões\ndo mundo.<br/>\nCuidado, a primeira linha e coluna são numeradas com 0 e não com 1, e o\nponto (0,0) fica no canto superior esquerdo. Isto pode parecer estranho, mas\né bem comum em ciência da computação.</p>  \n\n<p>Então, você tem que escrever o código para alcançar a próxima posição. Neste\nexercício, você tem que percorrer o mundo linha após linha. Logo, se você\nestá no fundo de uma linha, você tem que se mover para o topo da próxima,\ncaso contrário você tem que se mover para a célula abaixo.</p>\n\n<p>Neste ponto, você pode lançar seu programa para verificar se o buggle\npercorre corretamente o mundo na ordem esperada, e que ele pára quando tem\nque parar. Use oo botão <b>stop</b> se o buggle não parar corretamente.</p>\n\n<p>Agora é hora de escrever os números das células. Para isto, você vai\nprecisar de um contador iniciando em zero no começo do seu código, e\nincrementar de um em cada passo (por exemplo com <code>counter +=\n1;</code>).  Então, você terá que usar <code>escreverMensagem()</code> para\nescrever o valor no chão.\n</p>\n\n<p>Você provavelmente vai precisar escrever o primeiro [!java|scala|c]ou último\n[/!]valor fora do loop principal [!java|scala|c], dependendo se você prefere\nusar um <code>while</code> ou um <code>do/while</code>[/!].</p>\n\n<p>Sua vez...</p>\n",
    "en" : "<!-- Please don't translate this file but l10n/missions/plm.pot (see https://github.com/oster/PLM/wiki/Working-on-translations) -->\n<h2>Traversal by column</h2>\n\n<p>The goal of this serie of exercises is to let the buggle traverse its\nworld. It must number the cells it walks on to show its traversal order.</p>\n\n<p>The main loop of your code should be something like:</p>\n<pre>\n while we are not on the final position\n   go to the next position\n   label the cell with its number\n</pre>\n\n<p>In contrary to the exercises we saw so far, we won't use the\n<code>forward()</code>, <code>backward()</code> and similar\nmethods. Instead, we will compute the coordinate of the next buggle position\nand use the <code>setPos(x, y)</code> method to <i>teleport</i> the\nbuggle directly to this position. For example, <code>setPos(3, 5)</code>\nteleports the buggle to the cell where x=3 and y=5.</p>\n\n<p>Your first task is thus to write a boolean function indicating whether the\nbuggle reached the final position or not, ie if it reached the bottom right corner\nof the world. For this, you can use <code>getWorldWidth()</code> and\n<code>getWorldHeight()</code> which return respectively the world's width\nand height. Your test is about comparing the buggle's current position (that\nyou can access with <code>getX()</code> and <code>getY()</code>) to the\nworld dimensions.<br/>\nBeware, the first line and column are numbered 0 and not 1, and the point (0,0) \nis on the top left corner. This may seem surprising, but it is very often so in \nComputer Science.</p>  \n\n<p>Then, you have to write the code to reach the next position. In this\nexercise, you have to traverse the world row after row. So, if you are at\nthe bottom of a row, you have to move to the top of next row. Else, you have\nto move to the cell below.</p>\n\n<p>At this point, you can launch your program to check that the buggle\ncorrectly traverse the world in the expected order, and that it stops when\nit has to. Use the <b>stop</b> button if the buggle does not stop correctly.</p>\n\n<p>It is now time to write down the cell numbers. For that, you will need a\ncounter initialiser to zero at the beginning of your code, and incremented by \none at each step (for example with <code>counter += 1;</code>). \nThen, you have to use <code>writeMessage()</code> to write the value on the ground.\n</p>\n\n<p>You probably need to write the first [!java|scala|c]or last [/!]value out of the main loop\n[!java|scala|c], depending on whether you prefer to use a <code>while</code> or a <code>do/while</code> one[/!].</p>\n\n<p>Your turn...</p>\n",
    "fr" : "\n<!-- Please don't translate this file but l10n/missions/plm.pot (see https://github.com/oster/PLM/wiki/Working-on-translations) -->\n<h2>Parcours en colonne</h2>\n\n<p>L'objectif de cette série d'exercices est de faire parcourir le monde à la\nbuggle.  Elle doit de plus numéroter les différentes cases rencontrées pour\nmontrer son ordre de parcours.</p>\n\n<p>La boucle principale du code que vous devez écrire est de la forme :</p>\n<pre>\n tant que l'on n'est pas à la position finale\n   aller à la prochaine position\n   marquer le numéro de case au sol\n</pre>\n\n<p>À la différence des exercices vus jusque là, nous n'allons pas utiliser les\nméthodes <code>avance()</code>, <code>recule()</code> et autres, mais nous\nallons calculer les coordonnées de la prochaine position de la buggle, et\nutiliser la méthode <code>setPos(x, y)</code> pour <i>téléporter</i> la\nbuggle directement à cette position. Par exemple, <code>setPos(3, 5)</code>\ntéléporte la buggle sur la case où x=3 et y=5.</p>\n\n<p>Le premier objectif est donc d'écrire une fonction booléenne indiquant si la\nbuggle a atteint la position finale ou non, càd si elle est arrivée en bas à\ndroite du monde.  Vous utiliserez pour cela les méthodes\n<code>getMondeHauteur()</code> et <code>getMondeLargeur()</code> qui\nretournent respectivement la hauteur et la largeur du monde.  Votre test est\nde comparer les coordonnées actuelles de votre buggle (que vous pouvez\nretrouver avec les méthodes <code>getX()</code> et <code>getY()</code>) aux\ndimensions du monde.<br/>\nAttention, la première ligne et la première colonne sont numérotées 0 au\nlieu de 1, et l'origine (0, 0) est dans le coin en haut à gauche. Cela peut\nsembler étonnant, mais ces choses sont traditionnelles en informatique.</p>  \n\n<p>Ensuite, il faut écrire le code pour aller à la position suivante. Dans cet\nexercice, il faut parcourir le monde colonne par colonne. Donc, si on est\ntout en bas d'une colonne, il faut aller en haut de la colonne\nsuivante. Sinon, il faut aller à la case du dessous.</p>\n\n<p>À ce point, vous pouvez lancer votre programme pour vérifier que la buggle\nparcours bien le monde dans l'ordre souhaité, et s'arrête bien quand il\nfaut. Pensez à utiliser le bouton <b>stop</b> pour arrêter l'exécution si\nvotre programme ne se termine pas correctement.</p>\n\n<p>Il est temps d'écrire au sol les numéros de case. Pour cela, vous aurez\nbesoin d'un compteur initialisé à zéro au début de votre code, et incrémenté\nà chaque pas (par exemple avec <code>cpt += 1;</code>). Ensuite, il faut\nécrire cette valeur au sol (avec <code>ecritMessage()</code>).\n</p>\n\n<p>Il est sans doute nécessaire d'écrire la valeur de la\npremière[!java|scala|c] ou dernière[/!] case en dehors de la boucle\nprincipale[!java|scala|c], selon que vous utilisez une boucle\n<code>while</code> ou <code>do/while</code>[/!].</p>\n\n<p>À vous de jouer...</p>\n"
  }
}