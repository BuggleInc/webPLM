{
  "id" : "sort.baseball.NaiveBaseball",
  "name" : "NaiveBaseball",
  "tabName" : "NaiveBaseball",
  "defaultSourceFiles" : {
    "Java" : {
      "name" : "NaiveBaseball",
      "body" : "public void run() {\n}\n",
      "template" : "$package   import plm.universe.baseball.BaseballEntity; import plm.universe.baseball.BaseballWorld;  public class NaiveBaseball extends BaseballEntity {\t $body  } ",
      "offset" : 1,
      "correction" : "$package \n\nimport plm.universe.baseball.BaseballEntity;\nimport plm.universe.baseball.BaseballWorld;\n\npublic class NaiveBaseball extends BaseballEntity {\n\t\n\t/* BEGIN TEMPLATE */\n\tpublic void run() {\n\t\t/* BEGIN SOLUTION */\n\t\twhile (!isSorted()) {\n\t\t\tint baseNext = (getHoleBase()+1) % getBasesAmount();\n\t\t\tint posNext = -1;\n\t\t\tint maxDistance = -1;\n\t\t\tfor (int pos=0;pos<getPositionsAmount();pos++) {\n\t\t\t\tint player = getPlayerColor(baseNext, pos);\n\t\t\t\tint distance = (baseNext - player + getBasesAmount()) % getBasesAmount();\n\t\t\t\tif (distance > maxDistance) {\n\t\t\t\t\tmaxDistance = distance;\n\t\t\t\t\tposNext = pos;\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tmove(baseNext,posNext);\n\t\t}\n\t\t((BaseballWorld) world).assertSorted(\"naive sort\");\n\t\t/* END SOLUTION */\n\t}\n\t/* END TEMPLATE */\n\n}\n",
      "error" : "Error"
    },
    "Scala" : {
      "name" : "NaiveBaseball",
      "body" : "override def run() {\n}\n",
      "template" : "$package \n\nimport plm.universe.baseball.BaseballWorld\nimport plm.universe.baseball.BaseballEntity\n\nclass NaiveBaseball extends BaseballEntity {\n$body\n\n}\n",
      "offset" : 6,
      "correction" : "$package \n\nimport plm.universe.baseball.BaseballWorld\nimport plm.universe.baseball.BaseballEntity\n\nclass NaiveBaseball extends BaseballEntity {\n\n\t/* BEGIN TEMPLATE */\n\toverride def run() {\n\t\t/* BEGIN SOLUTION */\n\t\twhile (!isSorted()) {\n\t\t\tval baseNext = (getHoleBase()+1) % getBasesAmount();\n\t\t\tvar posNext = -1;\n\t\t\tvar maxDistance = -1;\n\t\t\tfor (pos <- 0 to getPositionsAmount() -1) {\n\t\t\t\tval player = getPlayerColor(baseNext, pos);\n\t\t\t\tvar distance = (baseNext - player + getBasesAmount()) % getBasesAmount();\n\t\t\t\tif (distance > maxDistance) {\n\t\t\t\t\tmaxDistance = distance;\n\t\t\t\t\tposNext = pos;\n\t\t\t\t}\n//\t\t\t\tLogger.log(world.toString()+\"  baseNext:\"+baseNext+\" player:\"+player+\"  distance:\"+distance+\" (#bases:\"+getBasesAmount()+\")\");\n\t\t\t}\n//\t\t\tLogger.log(\"move \"+baseNext+\",\"+posNext);\n\t\t\tmove(baseNext,posNext);\n\t\t}\n\t\tworld.asInstanceOf[BaseballWorld].assertSorted(\"naive sort\");\n\t\t/* END SOLUTION */\n\t}\n\t/* END TEMPLATE */\n\n}\n",
      "error" : "Error"
    },
    "Python" : {
      "name" : "NaiveBaseball",
      "body" : "",
      "template" : "$body\n",
      "offset" : 1,
      "correction" : "# BEGIN SOLUTION\nwhile not isSorted():\n\tbaseNext = (getHoleBase()+1) % getBasesAmount()\n\tposNext = -1\n\tmaxDistance = -1\n\tfor pos in range(getPositionsAmount()):\n\t\tplayer = getPlayerColor(baseNext, pos)\n\t\tdistance = (baseNext - player + getBasesAmount()) % getBasesAmount()\n\t\tif distance > maxDistance:\n\t\t\tmaxDistance = distance\n\t\t\tposNext = pos\n\tmove(baseNext,posNext);\n# END SOLUTION\n",
      "error" : "Error"
    }
  },

  "initialWorlds" : [ {
    "type" : "plm.universe.baseball.BaseballWorld",
    "@jsonId" : 1,
    "name" : "Field 1",
    "entities" : [ {
      "type" : "plm.universe.baseball.BaseballEntity",
      "name" : "(noname)",
      "world" : 1,
      "inited" : false
    } ],
    "steps" : [ ],
    "about" : "<!-- Please don't translate this file but l10n/missions/plm.pot (see https://github.com/oster/PLM/wiki/Working-on-translations) -->\n<h1>Rainbow Baseball</h1>\n<p>The colors are represented by integers, between <code>0</code> and <code>amount of bases -1</code>. \nThe hole is represented by the special value <code>-1</code>. \nThe color of each base is its rank. So base <code>1</code> is of color <code>1</code>. \nIn the graphical interface, the base <code>0</code> is the dark blue\none while the base <code>1</code> is the fuscia one.</p>\n\n<p>Once every players on the field are in their home base, the hole should be in the last base, \nthat is of rank <code>getBasesAmount()-1</code>.</p>\n\n<h2>Functions to retrieve the world's dimensions</h2>\n\n<pre>int getBasesAmount() </pre>\nReturns the amount of bases on this field.\n\n<pre>int getPositionsAmount() </pre>\nReturns the amount of player's positions per base on this field.\n\n<h2>Functions to retrieve the world's state</h2>\n\n<pre>int getHoleBase() </pre>\nReturns the base in which the hole is located.\n\n<pre>int getHolePosition() </pre>\nReturns the hole position within its base\n\n<pre>int getPlayerColor(int base, int position)  </pre>\nReturns the color of the player at a given location.\n\n<pre>boolean isSorted()  </pre>\nReturns whether all players of the field are at home.\n     \n<pre>boolean isBaseSorted(int base)  </pre>\nReturns whether all players of a given base are at home.\n\n<pre>boolean isSelected()  </pre>\nReturns whether the current world is selected in the interface.\n<h2>Functions to change the world</h2>\n\n<pre>void move(int base, int position)</pre>\nMoves a given player into the hole. This throws an IllegalArgumentException if the specified player is not near the hole (at most one base away).\n",
    "parameters" : null,
    "field" : [ 2, 2, 0, 3, 1, 0, -1, 1 ],
    "basesAmount" : 4,
    "positionsAmount" : 2,
    "holeBase" : 3,
    "holePosition" : 0,
    "initialField" : [ 2, 2, 0, 3, 1, 0, -1, 1 ],
    "moveCount" : 0
  }, {
    "type" : "plm.universe.baseball.BaseballWorld",
    "@jsonId" : 2,
    "name" : "Field 2",
    "entities" : [ {
      "type" : "plm.universe.baseball.BaseballEntity",
      "name" : "(noname)",
      "world" : 2,
      "inited" : false
    } ],
    "steps" : [ ],
    "about" : "<!-- Please don't translate this file but l10n/missions/plm.pot (see https://github.com/oster/PLM/wiki/Working-on-translations) -->\n<h1>Rainbow Baseball</h1>\n<p>The colors are represented by integers, between <code>0</code> and <code>amount of bases -1</code>. \nThe hole is represented by the special value <code>-1</code>. \nThe color of each base is its rank. So base <code>1</code> is of color <code>1</code>. \nIn the graphical interface, the base <code>0</code> is the dark blue\none while the base <code>1</code> is the fuscia one.</p>\n\n<p>Once every players on the field are in their home base, the hole should be in the last base, \nthat is of rank <code>getBasesAmount()-1</code>.</p>\n\n<h2>Functions to retrieve the world's dimensions</h2>\n\n<pre>int getBasesAmount() </pre>\nReturns the amount of bases on this field.\n\n<pre>int getPositionsAmount() </pre>\nReturns the amount of player's positions per base on this field.\n\n<h2>Functions to retrieve the world's state</h2>\n\n<pre>int getHoleBase() </pre>\nReturns the base in which the hole is located.\n\n<pre>int getHolePosition() </pre>\nReturns the hole position within its base\n\n<pre>int getPlayerColor(int base, int position)  </pre>\nReturns the color of the player at a given location.\n\n<pre>boolean isSorted()  </pre>\nReturns whether all players of the field are at home.\n     \n<pre>boolean isBaseSorted(int base)  </pre>\nReturns whether all players of a given base are at home.\n\n<pre>boolean isSelected()  </pre>\nReturns whether the current world is selected in the interface.\n<h2>Functions to change the world</h2>\n\n<pre>void move(int base, int position)</pre>\nMoves a given player into the hole. This throws an IllegalArgumentException if the specified player is not near the hole (at most one base away).\n",
    "parameters" : null,
    "field" : [ 2, 2, 0, 3, 1, 0, -1, 1 ],
    "basesAmount" : 4,
    "positionsAmount" : 2,
    "holeBase" : 3,
    "holePosition" : 0,
    "initialField" : [ 2, 2, 0, 3, 1, 0, -1, 1 ],
    "moveCount" : 0
  } ],
  "answerWorlds" : [ {
    "type" : "plm.universe.baseball.BaseballWorld",
    "@jsonId" : 3,
    "name" : "Field 1",
    "entities" : [ {
      "type" : "plm.universe.baseball.BaseballEntity",
      "name" : "(noname)",
      "world" : 3,
      "inited" : true
    } ],
    "steps" : [ [ {
      "type" : "plm.universe.baseball.operations.MoveOperation",
      "@jsonId" : 4,
      "base" : 0,
      "position" : 0,
      "name" : "moveOperation"
    } ], [ {
      "type" : "plm.universe.baseball.operations.MoveOperation",
      "@jsonId" : 5,
      "base" : 1,
      "position" : 1,
      "name" : "moveOperation"
    } ], [ {
      "type" : "plm.universe.baseball.operations.MoveOperation",
      "@jsonId" : 6,
      "base" : 2,
      "position" : 1,
      "name" : "moveOperation"
    } ], [ {
      "type" : "plm.universe.baseball.operations.MoveOperation",
      "@jsonId" : 7,
      "base" : 3,
      "position" : 1,
      "name" : "moveOperation"
    } ], [ {
      "type" : "plm.universe.baseball.operations.MoveOperation",
      "@jsonId" : 8,
      "base" : 0,
      "position" : 1,
      "name" : "moveOperation"
    } ], [ {
      "type" : "plm.universe.baseball.operations.MoveOperation",
      "@jsonId" : 9,
      "base" : 1,
      "position" : 0,
      "name" : "moveOperation"
    } ], [ {
      "type" : "plm.universe.baseball.operations.MoveOperation",
      "@jsonId" : 10,
      "base" : 2,
      "position" : 0,
      "name" : "moveOperation"
    } ], [ {
      "type" : "plm.universe.baseball.operations.MoveOperation",
      "@jsonId" : 11,
      "base" : 3,
      "position" : 0,
      "name" : "moveOperation"
    } ], [ {
      "type" : "plm.universe.baseball.operations.MoveOperation",
      "@jsonId" : 12,
      "base" : 0,
      "position" : 0,
      "name" : "moveOperation"
    } ], [ {
      "type" : "plm.universe.baseball.operations.MoveOperation",
      "@jsonId" : 13,
      "base" : 1,
      "position" : 1,
      "name" : "moveOperation"
    } ], [ {
      "type" : "plm.universe.baseball.operations.MoveOperation",
      "@jsonId" : 14,
      "base" : 2,
      "position" : 1,
      "name" : "moveOperation"
    } ], [ {
      "type" : "plm.universe.baseball.operations.MoveOperation",
      "@jsonId" : 15,
      "base" : 3,
      "position" : 1,
      "name" : "moveOperation"
    } ] ],
    "about" : "<!-- Please don't translate this file but l10n/missions/plm.pot (see https://github.com/oster/PLM/wiki/Working-on-translations) -->\n<h1>Rainbow Baseball</h1>\n<p>The colors are represented by integers, between <code>0</code> and <code>amount of bases -1</code>. \nThe hole is represented by the special value <code>-1</code>. \nThe color of each base is its rank. So base <code>1</code> is of color <code>1</code>. \nIn the graphical interface, the base <code>0</code> is the dark blue\none while the base <code>1</code> is the fuscia one.</p>\n\n<p>Once every players on the field are in their home base, the hole should be in the last base, \nthat is of rank <code>getBasesAmount()-1</code>.</p>\n\n<h2>Functions to retrieve the world's dimensions</h2>\n\n<pre>int getBasesAmount() </pre>\nReturns the amount of bases on this field.\n\n<pre>int getPositionsAmount() </pre>\nReturns the amount of player's positions per base on this field.\n\n<h2>Functions to retrieve the world's state</h2>\n\n<pre>int getHoleBase() </pre>\nReturns the base in which the hole is located.\n\n<pre>int getHolePosition() </pre>\nReturns the hole position within its base\n\n<pre>int getPlayerColor(int base, int position)  </pre>\nReturns the color of the player at a given location.\n\n<pre>boolean isSorted()  </pre>\nReturns whether all players of the field are at home.\n     \n<pre>boolean isBaseSorted(int base)  </pre>\nReturns whether all players of a given base are at home.\n\n<pre>boolean isSelected()  </pre>\nReturns whether the current world is selected in the interface.\n<h2>Functions to change the world</h2>\n\n<pre>void move(int base, int position)</pre>\nMoves a given player into the hole. This throws an IllegalArgumentException if the specified player is not near the hole (at most one base away).\n",
    "parameters" : null,
    "field" : [ 0, 0, 1, 1, 2, 2, 3, -1 ],
    "basesAmount" : 4,
    "positionsAmount" : 2,
    "holeBase" : 3,
    "holePosition" : 1,
    "initialField" : [ 2, 2, 0, 3, 1, 0, -1, 1 ],
    "moveCount" : 12
  }, {
    "type" : "plm.universe.baseball.BaseballWorld",
    "@jsonId" : 16,
    "name" : "Field 2",
    "entities" : [ {
      "type" : "plm.universe.baseball.BaseballEntity",
      "name" : "(noname)",
      "world" : 16,
      "inited" : true
    } ],
    "steps" : [ [ {
      "type" : "plm.universe.baseball.operations.MoveOperation",
      "@jsonId" : 17,
      "base" : 0,
      "position" : 0,
      "name" : "moveOperation"
    } ], [ {
      "type" : "plm.universe.baseball.operations.MoveOperation",
      "@jsonId" : 18,
      "base" : 1,
      "position" : 1,
      "name" : "moveOperation"
    } ], [ {
      "type" : "plm.universe.baseball.operations.MoveOperation",
      "@jsonId" : 19,
      "base" : 2,
      "position" : 1,
      "name" : "moveOperation"
    } ], [ {
      "type" : "plm.universe.baseball.operations.MoveOperation",
      "@jsonId" : 20,
      "base" : 3,
      "position" : 1,
      "name" : "moveOperation"
    } ], [ {
      "type" : "plm.universe.baseball.operations.MoveOperation",
      "@jsonId" : 21,
      "base" : 0,
      "position" : 1,
      "name" : "moveOperation"
    } ], [ {
      "type" : "plm.universe.baseball.operations.MoveOperation",
      "@jsonId" : 22,
      "base" : 1,
      "position" : 0,
      "name" : "moveOperation"
    } ], [ {
      "type" : "plm.universe.baseball.operations.MoveOperation",
      "@jsonId" : 23,
      "base" : 2,
      "position" : 0,
      "name" : "moveOperation"
    } ], [ {
      "type" : "plm.universe.baseball.operations.MoveOperation",
      "@jsonId" : 24,
      "base" : 3,
      "position" : 0,
      "name" : "moveOperation"
    } ], [ {
      "type" : "plm.universe.baseball.operations.MoveOperation",
      "@jsonId" : 25,
      "base" : 0,
      "position" : 0,
      "name" : "moveOperation"
    } ], [ {
      "type" : "plm.universe.baseball.operations.MoveOperation",
      "@jsonId" : 26,
      "base" : 1,
      "position" : 1,
      "name" : "moveOperation"
    } ], [ {
      "type" : "plm.universe.baseball.operations.MoveOperation",
      "@jsonId" : 27,
      "base" : 2,
      "position" : 1,
      "name" : "moveOperation"
    } ], [ {
      "type" : "plm.universe.baseball.operations.MoveOperation",
      "@jsonId" : 28,
      "base" : 3,
      "position" : 1,
      "name" : "moveOperation"
    } ] ],
    "about" : "<!-- Please don't translate this file but l10n/missions/plm.pot (see https://github.com/oster/PLM/wiki/Working-on-translations) -->\n<h1>Rainbow Baseball</h1>\n<p>The colors are represented by integers, between <code>0</code> and <code>amount of bases -1</code>. \nThe hole is represented by the special value <code>-1</code>. \nThe color of each base is its rank. So base <code>1</code> is of color <code>1</code>. \nIn the graphical interface, the base <code>0</code> is the dark blue\none while the base <code>1</code> is the fuscia one.</p>\n\n<p>Once every players on the field are in their home base, the hole should be in the last base, \nthat is of rank <code>getBasesAmount()-1</code>.</p>\n\n<h2>Functions to retrieve the world's dimensions</h2>\n\n<pre>int getBasesAmount() </pre>\nReturns the amount of bases on this field.\n\n<pre>int getPositionsAmount() </pre>\nReturns the amount of player's positions per base on this field.\n\n<h2>Functions to retrieve the world's state</h2>\n\n<pre>int getHoleBase() </pre>\nReturns the base in which the hole is located.\n\n<pre>int getHolePosition() </pre>\nReturns the hole position within its base\n\n<pre>int getPlayerColor(int base, int position)  </pre>\nReturns the color of the player at a given location.\n\n<pre>boolean isSorted()  </pre>\nReturns whether all players of the field are at home.\n     \n<pre>boolean isBaseSorted(int base)  </pre>\nReturns whether all players of a given base are at home.\n\n<pre>boolean isSelected()  </pre>\nReturns whether the current world is selected in the interface.\n<h2>Functions to change the world</h2>\n\n<pre>void move(int base, int position)</pre>\nMoves a given player into the hole. This throws an IllegalArgumentException if the specified player is not near the hole (at most one base away).\n",
    "parameters" : null,
    "field" : [ 0, 0, 1, 1, 2, 2, 3, -1 ],
    "basesAmount" : 4,
    "positionsAmount" : 2,
    "holeBase" : 3,
    "holePosition" : 1,
    "initialField" : [ 2, 2, 0, 3, 1, 0, -1, 1 ],
    "moveCount" : 12
  } ] 
}