{
  "id" : "sort.pancake.CohenPancake",
  "name" : "CohenPancake",
  "tabName" : "CohenPancake",
  "defaultSourceFiles" : {
    "Java" : {
      "name" : "CohenPancake",
      "body" : "public void solve() {\n}\n",
      "template" : "$package   import plm.core.log.Logger; import plm.universe.pancake.PancakeEntity;  public class CohenPancake extends PancakeEntity {\t \tpublic void run() { \t\tthis.solve(); \t}  \t/* BEGIN HIDDEN */ \tint getRankOf(int size) { \t\tfor (int rank=0;rank<getStackSize();rank++) \t\t\tif (getPancakeRadius(rank) == size) \t\t\t\treturn rank; \t\treturn -99;  \t} \tint debug=0;  \tvoid showStack(boolean nl) { \t\tif (debug>0) { \t\t\tSystem.out.print(\"{\"); \t\t\tfor (int rank=0; rank < getStackSize(); rank++)  \t\t\t\tSystem.out.print( (isPancakeUpsideDown(rank)?\"-\":\"\") + getPancakeRadius(rank)+\", \"); \t\t\tSystem.out.print(\"}  \"); \t\t\tif (nl) \t\t\t\tLogger.log(\"\"); \t\t} \t} \t/* END HIDDEN */  $body  } ",
      "offset" : 1,
      "correction" : "$package \n\nimport plm.core.log.Logger;\nimport plm.universe.pancake.PancakeEntity;\n\npublic class CohenPancake extends PancakeEntity {\n\t\n\tpublic void run() {\n\t\tthis.solve();\n\t}\n\n\t/* BEGIN HIDDEN */\n\tint getRankOf(int size) {\n\t\tfor (int rank=0;rank<getStackSize();rank++)\n\t\t\tif (getPancakeRadius(rank) == size)\n\t\t\t\treturn rank;\n\t\treturn -99; \n\t}\n\tint debug=0; \n\tvoid showStack(boolean nl) {\n\t\tif (debug>0) {\n\t\t\tSystem.out.print(\"{\");\n\t\t\tfor (int rank=0; rank < getStackSize(); rank++) \n\t\t\t\tSystem.out.print( (isPancakeUpsideDown(rank)?\"-\":\"\") + getPancakeRadius(rank)+\", \");\n\t\t\tSystem.out.print(\"}  \");\n\t\t\tif (nl)\n\t\t\t\tLogger.log(\"\");\n\t\t}\n\t}\n\t/* END HIDDEN */\n\n\t/* BEGIN TEMPLATE */\n\tpublic void solve() {\n\t\t/* BEGIN SOLUTION */\n\t\tint maxPos = getStackSize();\n\t\twhile (true) {\n\t\t\t\t\t\n\t\t\tif (debug>0)\n\t\t\t\tSystem.out.print(\"maxPos:\"+maxPos+\" \");\n\t\t\tshowStack(false);\n\t\t\t\n\t\t\tint maxupside = -1, maxupsidePos = -1;\n\t\t\tboolean sorted = true;\n\t\t\tfor (int pos=0; pos<getStackSize(); pos++) {\n\t\t\t\tif (getPancakeRadius(pos) != pos+1 || isPancakeUpsideDown(pos))\n\t\t\t\t\tsorted = false;\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tif (pos<maxPos && !isPancakeUpsideDown(pos) && (maxupside < getPancakeRadius(pos))) {\n\t\t\t\t\tmaxupside = getPancakeRadius(pos);\n\t\t\t\t\tmaxupsidePos = pos;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (sorted) { \n\t\t\t\tif (debug > 0) \n\t\t\t\t\tLogger.log(\"It's sorted now. Get out of here\\n\");\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\tif (maxupside != -1) { \n\t\t\t\tif (maxupside == maxPos) { \n\t\t\t\t\tif (debug > 0) \n\t\t\t\t\t\tLogger.log(\"Case 1.C; maxupsidePos = \"+maxupsidePos+\", maxupside = \"+maxupside);\n\t\t\t\t\tif (maxupsidePos+1 != maxPos) {\n\t\t\t\t\t\tflip(maxupsidePos+1);\n\t\t\t\t\t\tflip(maxPos);\n\t\t\t\t\t}\n\t\t\t\t\tmaxPos--;\n\t\t\t\t} else {\n\t\t\t\t\tint pPlus1 = getRankOf(maxupside+1);\n\t\t\t\t\tif (pPlus1 > maxupsidePos) {\n\t\t\t\t\t\tif (debug > 0) \n\t\t\t\t\t\t\tLogger.log(\"Case 1.A; maxupsidePos = \"+maxupsidePos+\", maxupside = \"+maxupside+\", pPlus1 = \"+pPlus1);\n\t\t\t\t\t\tflip(pPlus1+1);showStack(true);\n\t\t\t\t\t\tflip(pPlus1-maxupsidePos);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (debug > 0) \n\t\t\t\t\t\t\tLogger.log(\"Case 1.B; maxupsidePos = \"+maxupsidePos+\", maxupside = \"+maxupside+\", pPlus1 = \"+pPlus1);\t\t\t\t\t\t\n\t\t\t\t\t\tflip(maxupsidePos+1);\n\t\t\t\t\t\tflip(maxupsidePos-pPlus1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else { \n\t\t\t\tboolean reverted = true;\n\t\t\t\tfor (int pos=0; reverted && pos<maxPos; pos++) \n\t\t\t\t\tif (getPancakeRadius(pos)!=pos+1)\n\t\t\t\t\t\treverted = false;\n\t\t\t\t\n\t\t\t\tif (reverted) {\n\t\t\t\t\tif (debug > 0) \n\t\t\t\t\t\tLogger.log(\"Case 2.B\");\n\t\t\t\t\tfor (int i=0; i<maxPos; i++) {\n\t\t\t\t\t\tflip(maxPos);\n\t\t\t\t\t\tif (maxPos>1)\n\t\t\t\t\t\t\tflip(maxPos-1);\n\t\t\t\t\t\tshowStack(true);\n\t\t\t\t\t}\n\t\t\t\t} else { \n\t\t\t\t\t\n\t\t\t\t\tint pPlus1 = getRankOf(getStackSize()+1);\n\t\t\t\t\tint p;\n\t\t\t\t\tfor (int radius=maxPos; radius > 0; radius--) {\n\t\t\t\t\t\tp = getRankOf(radius);\n\t\t\t\t\t\tif (p>maxPos)\n\t\t\t\t\t\t\tp=-99;\n\t\t\t\t\t\tif (pPlus1!=-99 && pPlus1<p) { \n\t\t\t\t\t\t\tif (debug > 0) \n\t\t\t\t\t\t\t\tLogger.log(\"Case 2.A; p=\"+p+\", radius=\"+radius+\", pPlus1=\"+pPlus1);\n\t\t\t\t\t\t\tflip(p+1);\n\t\t\t\t\t\t\tif (pPlus1!=0)\n\t\t\t\t\t\t\t\tflip(pPlus1+1);\n\t\t\t\t\t\t\tradius = -1; \n\t\t\t\t\t\t}\n\t\t\t\t\t\tpPlus1 = p; \n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t/* END SOLUTION */\n\t}\n\t/* END TEMPLATE */\n\n}\n",
      "error" : "Error"
    },
    "Scala" : {
      "name" : "CohenPancake",
      "body" : "def solve() {\n}\n",
      "template" : "$package \n\nimport plm.universe.pancake.PancakeEntity\nimport plm.core.log.Logger\n\nclass CohenPancake extends PancakeEntity {\n\toverride def run() {\n\t\tsolve();\n\t}\n\n\t/* BEGIN HIDDEN */\n\tdef getRankOf(size: Integer):Integer = {\n\t\t\tfor (rank <- 0 to getStackSize()-1)\n\t\t\t\tif (getPancakeRadius(rank) == size)\n\t\t\t\t\treturn rank;\n\t\t\t\t\treturn -99; // Well, be robust to border cases \n\t}\n\tvar debug=false; \n\tdef showStack(nl:Boolean) {\n\t\tif (debug) {\n\t\t\tSystem.out.print(\"{\");\n\t\t\tfor (rank <- 0 to getStackSize()-1) {\n\t\t\t\tif (isPancakeUpsideDown(rank))\n\t\t\t\t\tSystem.out.print(\"-\")\n\t\t\t\t\tSystem.out.print(getPancakeRadius(rank)+\", \");\n\t\t\t}  \n\t\t\tSystem.out.print(\"}  \");\n\t\t\tif (nl)\n\t\t\t\tLogger.log(\"\");\n\t\t}\n\t}\n\t/* END HIDDEN */\n\n$body\n}\n",
      "offset" : 32,
      "correction" : "$package \n\nimport plm.universe.pancake.PancakeEntity\nimport plm.core.log.Logger\n\nclass CohenPancake extends PancakeEntity {\n\n\toverride def run() {\n\t\tsolve();\n\t}\n\n\t/* BEGIN HIDDEN */\n\tdef getRankOf(size: Integer):Integer = {\n\t\t\tfor (rank <- 0 to getStackSize()-1)\n\t\t\t\tif (getPancakeRadius(rank) == size)\n\t\t\t\t\treturn rank;\n\t\t\t\t\treturn -99; // Well, be robust to border cases \n\t}\n\tvar debug=false; \n\tdef showStack(nl:Boolean) {\n\t\tif (debug) {\n\t\t\tSystem.out.print(\"{\");\n\t\t\tfor (rank <- 0 to getStackSize()-1) {\n\t\t\t\tif (isPancakeUpsideDown(rank))\n\t\t\t\t\tSystem.out.print(\"-\")\n\t\t\t\t\tSystem.out.print(getPancakeRadius(rank)+\", \");\n\t\t\t}  \n\t\t\tSystem.out.print(\"}  \");\n\t\t\tif (nl)\n\t\t\t\tLogger.log(\"\");\n\t\t}\n\t}\n\t/* END HIDDEN */\n\n\t/* BEGIN TEMPLATE */\n\tdef solve() {\n\t\t/* BEGIN SOLUTION */\n\t\tvar maxPos = getStackSize();\n\t\twhile (true) {\n\n\t\t\tif (debug)\n\t\t\t\tSystem.out.print(\"maxPos:\"+maxPos+\" \");\n\t\t\tshowStack(false);\n\n\t\t\tvar maxupside = -1\n\t\t\t\t\tvar maxupsidePos = -1\n\t\t\t\t\tvar sorted = true\n\t\t\t\t\tfor (pos <- 0 to getStackSize()-1) {\n\t\t\t\t\t\tif (getPancakeRadius(pos) != pos+1 || isPancakeUpsideDown(pos))\n\t\t\t\t\t\t\tsorted = false;\n\n\t\t\t\t\t\t// Search if we are in case 1 on the considered interval\n\t\t\t\t\t\tif (pos<maxPos && !isPancakeUpsideDown(pos) && (maxupside < getPancakeRadius(pos))) {\n\t\t\t\t\t\t\tmaxupside = getPancakeRadius(pos);\n\t\t\t\t\t\t\tmaxupsidePos = pos;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\tif (sorted) { // we are done, no need to continue\n\t\t\t\tif (debug) \n\t\t\t\t\tLogger.log(\"It's sorted now. Get out of here\\n\");\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (maxupside != -1) { // Case 1. \n\t\t\t\tif (maxupside == maxPos) { // Case 1.C\n\t\t\t\t\tif (debug) \n\t\t\t\t\t\tLogger.log(\"Case 1.C; maxupsidePos = \"+maxupsidePos+\", maxupside = \"+maxupside);\n\t\t\t\t\tif (maxupsidePos+1 != maxPos) {\n\t\t\t\t\t\tflip(maxupsidePos+1);\n\t\t\t\t\t\tflip(maxPos);\n\t\t\t\t\t}\n\t\t\t\t\tmaxPos = maxPos - 1;\n\t\t\t\t} else {\n\t\t\t\t\tval pPlus1 = getRankOf(maxupside+1);\n\t\t\t\t\tif (pPlus1 > maxupsidePos) {\n\t\t\t\t\t\tif (debug) \n\t\t\t\t\t\t\tLogger.log(\"Case 1.A; maxupsidePos = \"+maxupsidePos+\", maxupside = \"+maxupside+\", pPlus1 = \"+pPlus1);\n\t\t\t\t\t\tflip(pPlus1+1);showStack(true);\n\t\t\t\t\t\tflip(pPlus1-maxupsidePos);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (debug) \n\t\t\t\t\t\t\tLogger.log(\"Case 1.B; maxupsidePos = \"+maxupsidePos+\", maxupside = \"+maxupside+\", pPlus1 = \"+pPlus1);\t\t\t\t\t\t\n\t\t\t\t\t\tflip(maxupsidePos+1);\n\t\t\t\t\t\tflip(maxupsidePos-pPlus1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else { // Case 2. All pancakes are upside down.\n\t\t\t\tvar reverted = true;\n\t\t\t\tfor (pos <- 0 to maxPos-1) \n\t\t\t\t\tif (getPancakeRadius(pos)!=pos+1)\n\t\t\t\t\t\treverted = false;\n\n\t\t\t\t\t\tif (reverted) {\n\t\t\t\t\t\t\tif (debug) \n\t\t\t\t\t\t\t\tLogger.log(\"Case 2.B\");\n\t\t\t\t\t\t\tfor (i <- 1 to maxPos) {\n\t\t\t\t\t\t\t\tflip(maxPos);\n\t\t\t\t\t\t\t\tshowStack(true)\n\t\t\t\t\t\t\t\tif (maxPos>1)\n\t\t\t\t\t\t\t\t\tflip(maxPos-1);\n\t\t\t\t\t\t\t\tshowStack(true);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else { \n\n\t\t\t\t\t\t\tvar pPlus1 = getRankOf(getStackSize()+1)\n\t\t\t\t\t\t\t\t\tvar p = -1\n\t\t\t\t\t\t\t\t\tvar found = false\n\t\t\t\t\t\t\t\t\tfor (radius <- maxPos to 0 by -1) {\n\t\t\t\t\t\t\t\t\t\tif (!found) {\n\t\t\t\t\t\t\t\t\t\t\tp = getRankOf(radius);\n\t\t\t\t\t\t\t\t\t\t\tif (p>maxPos)\n\t\t\t\t\t\t\t\t\t\t\t\tp = -99\n\t\t\t\t\t\t\t\t\t\t\t\tif (pPlus1 != -99 && pPlus1<p) { // we've got the larger p such that p+1 is above p and both are upsideof\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (debug) \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tLogger.log(\"Case 2.A; p=\"+p+\", radius=\"+radius+\", pPlus1=\"+pPlus1);\n\t\t\t\t\t\t\t\t\t\t\t\t\tflip(p+1);\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (pPlus1!=0)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tflip(pPlus1+1);\n\t\t\t\t\t\t\t\t\t\t\t\t\tfound = true\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tpPlus1 = p; // shift downward\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t}\n\t\t}\t\t\n\t\t/* END SOLUTION */\n\t}\n\t/* END TEMPLATE */\n}\n",
      "error" : "Error"
    },
    "Python" : {
      "name" : "CohenPancake",
      "body" : "",
      "template" : "$body\n",
      "offset" : 1,
      "correction" : "# BEGIN SOLUTION\ndef getRankOf(size):\n    for rank in range(getStackSize()):\n        if getPancakeRadius(rank) == size:\n            return rank\n    return -99 # be robust to border cases\n\ndebug = False\ndef showStack():\n    if debug:\n        s = \"maxPos:\"+str(maxPos)+\" {\"\n        for rank in range(getStackSize()):\n            if isPancakeUpsideDown(rank):\n                s = s + \"-\"\n            s = s + str(getPancakeRadius(rank)) + \", \"\n        s = s + \"}\"\n        print(s)\n\nmaxPos = getStackSize()\nkeepGoing = True\nwhile keepGoing:\n    if isSelected() and debug:\n        showStack()\n        \n    maxupside = -1\n    maxupsidePos = -1\n    sorted = True\n    for pos in range(getStackSize()):\n        if getPancakeRadius(pos) != pos+1 or isPancakeUpsideDown(pos):\n            sorted = False\n            \n        # Search if we are in case 1 on the considered interval\n        if (pos<maxPos and not isPancakeUpsideDown(pos) and (maxupside < getPancakeRadius(pos))):\n                maxupside = getPancakeRadius(pos)\n                maxupsidePos = pos;\n\n    if sorted: # we are done, no need to continue\n        if debug:\n            print(\"It's sorted now. Get out of here\\n\");\n        break;\n\n    if maxupside != -1: # Case 1. \n        pPlus1 = getRankOf(maxupside+1)\n        if maxupside == maxPos: # Case 1.C\n            if debug:\n                print(\"Case 1.C; maxupsidePos = \"+str(maxupsidePos)+\", maxupside = \"+str(maxupside))\n            if maxupsidePos+1 != maxPos:\n                flip(maxupsidePos+1);\n                flip(maxPos);\n            maxPos -= 1\n        elif pPlus1 > maxupsidePos:\n            if debug:\n                print(\"Case 1.A; maxupsidePos = \"+str(maxupsidePos)+\", maxupside = \"+str(maxupside)+\", pPlus1 = \"+str(pPlus1))\n            flip(pPlus1+1)\n            flip(pPlus1-maxupsidePos);\n        else:\n            if debug:\n                print(\"Case 1.B; maxupsidePos = \"+str(maxupsidePos)+\", maxupside = \"+str(maxupside)+\", pPlus1 = \"+str(pPlus1));\n            flip(maxupsidePos+1);\n            flip(maxupsidePos-pPlus1);\n    else: # Case 2. All pancakes are upside down.\n        reverted = True   \n        for pos in range(maxPos):\n            if getPancakeRadius(pos)!=pos+1:\n                reverted = False\n                \n        if reverted:\n            if debug:\n                print(\"Case 2.B\")\n            for i in range(maxPos):\n                flip(maxPos)\n                if maxPos>1:\n                    flip(maxPos-1)\n                showStack()\n            keepGoing = False\n        else:\n            pPlus1 = getRankOf(getStackSize()+1)\n            p = 0\n            for radius in range(maxPos,0,-1):\n                p = getRankOf(radius);\n                if p>maxPos:\n                    p=-99\n                if (pPlus1!=-99 and pPlus1<p): # we've got the larger p such that p+1 is above p and both are upsideof\n                    if debug:\n                        print(\"Case 2.A; p=\"+str(p)+\", radius=\"+str(radius)+\", pPlus1=\"+str(pPlus1))\n                    flip(p+1)\n                    if pPlus1!=0:\n                        flip(pPlus1+1)\n                    radius = -1 # We're done with this iteration of the loop\n                pPlus1 = p # look downward\n# END SOLUTION\n",
      "error" : "Error"
    }
  },

  "initialWorlds" : [ {
    "type" : "plm.universe.pancake.PancakeWorld",
    "@jsonId" : 1,
    "name" : "5 pancakes",
    "entities" : [ {
      "type" : "plm.universe.pancake.PancakeEntity",
      "name" : "Bill",
      "world" : 1,
      "inited" : false
    } ],
    "steps" : [ ],
    "about" : "<!-- Please don't translate this file but l10n/missions/plm.pot (see https://github.com/oster/PLM/wiki/Working-on-translations) -->\n<h1>PancakeWorld</h1>\n\n<p>This universe is very simple, with only five functions provided.</p>\n\n<pre>int getStackSize()  </pre>\nReturns the size of the stack, that is the amount of pancakes it contains.\n\n<pre>int getPancakeRadius(int rank)  </pre>\nReturns the radius of the pancake passed as argument, with the rank of the top-most pancake being 0.\n\n<pre>boolean isPancakeUpsideDown(int rank)   </pre>\nReturns whether the pancake passed as argument upside-down, that is, if its burned side is on top. As usual, the top-most pancake is of rank 0.\n\n<pre>void flip(int amount)</pre>\nFlips the <code>amount</code> first pancakes composing the stack, from the top of it.\n\n<pre>boolean isSorted()   </pre>\nReturns whether the pancake stack is correctly sorted.\n\n<pre>boolean isSelected()   </pre>\nReturns whether the current world is selected in the graphical interface.  \n",
    "parameters" : null,
    "moveCount" : 0,
    "selected" : -1,
    "burnedWorld" : true,
    "pancakeStack" : [ {
      "radius" : 2
    }, {
      "radius" : 4
    }, {
      "radius" : 5
    }, {
      "radius" : 3
    }, {
      "radius" : 1
    } ]
  }, {
    "type" : "plm.universe.pancake.PancakeWorld",
    "@jsonId" : 2,
    "name" : "upside down",
    "entities" : [ {
      "type" : "plm.universe.pancake.PancakeEntity",
      "name" : "Bill",
      "world" : 2,
      "inited" : false
    } ],
    "steps" : [ ],
    "about" : "<!-- Please don't translate this file but l10n/missions/plm.pot (see https://github.com/oster/PLM/wiki/Working-on-translations) -->\n<h1>PancakeWorld</h1>\n\n<p>This universe is very simple, with only five functions provided.</p>\n\n<pre>int getStackSize()  </pre>\nReturns the size of the stack, that is the amount of pancakes it contains.\n\n<pre>int getPancakeRadius(int rank)  </pre>\nReturns the radius of the pancake passed as argument, with the rank of the top-most pancake being 0.\n\n<pre>boolean isPancakeUpsideDown(int rank)   </pre>\nReturns whether the pancake passed as argument upside-down, that is, if its burned side is on top. As usual, the top-most pancake is of rank 0.\n\n<pre>void flip(int amount)</pre>\nFlips the <code>amount</code> first pancakes composing the stack, from the top of it.\n\n<pre>boolean isSorted()   </pre>\nReturns whether the pancake stack is correctly sorted.\n\n<pre>boolean isSelected()   </pre>\nReturns whether the current world is selected in the graphical interface.  \n",
    "parameters" : null,
    "moveCount" : 0,
    "selected" : -1,
    "burnedWorld" : true,
    "pancakeStack" : [ {
      "radius" : 1
    }, {
      "radius" : 2
    }, {
      "radius" : 3
    }, {
      "radius" : 4
    }, {
      "radius" : 5
    }, {
      "radius" : 6
    }, {
      "radius" : 7
    }, {
      "radius" : 8
    }, {
      "radius" : 9
    }, {
      "radius" : 10
    } ]
  }, {
    "type" : "plm.universe.pancake.PancakeWorld",
    "@jsonId" : 3,
    "name" : "7 pancakes",
    "entities" : [ {
      "type" : "plm.universe.pancake.PancakeEntity",
      "name" : "Bill",
      "world" : 3,
      "inited" : false
    } ],
    "steps" : [ ],
    "about" : "<!-- Please don't translate this file but l10n/missions/plm.pot (see https://github.com/oster/PLM/wiki/Working-on-translations) -->\n<h1>PancakeWorld</h1>\n\n<p>This universe is very simple, with only five functions provided.</p>\n\n<pre>int getStackSize()  </pre>\nReturns the size of the stack, that is the amount of pancakes it contains.\n\n<pre>int getPancakeRadius(int rank)  </pre>\nReturns the radius of the pancake passed as argument, with the rank of the top-most pancake being 0.\n\n<pre>boolean isPancakeUpsideDown(int rank)   </pre>\nReturns whether the pancake passed as argument upside-down, that is, if its burned side is on top. As usual, the top-most pancake is of rank 0.\n\n<pre>void flip(int amount)</pre>\nFlips the <code>amount</code> first pancakes composing the stack, from the top of it.\n\n<pre>boolean isSorted()   </pre>\nReturns whether the pancake stack is correctly sorted.\n\n<pre>boolean isSelected()   </pre>\nReturns whether the current world is selected in the graphical interface.  \n",
    "parameters" : null,
    "moveCount" : 0,
    "selected" : -1,
    "burnedWorld" : true,
    "pancakeStack" : [ {
      "radius" : 3
    }, {
      "radius" : 6
    }, {
      "radius" : 1
    }, {
      "radius" : 2
    }, {
      "radius" : 5
    }, {
      "radius" : 4
    }, {
      "radius" : 7
    } ]
  }, {
    "type" : "plm.universe.pancake.PancakeWorld",
    "@jsonId" : 4,
    "name" : "8 pancakes",
    "entities" : [ {
      "type" : "plm.universe.pancake.PancakeEntity",
      "name" : "Bill",
      "world" : 4,
      "inited" : false
    } ],
    "steps" : [ ],
    "about" : "<!-- Please don't translate this file but l10n/missions/plm.pot (see https://github.com/oster/PLM/wiki/Working-on-translations) -->\n<h1>PancakeWorld</h1>\n\n<p>This universe is very simple, with only five functions provided.</p>\n\n<pre>int getStackSize()  </pre>\nReturns the size of the stack, that is the amount of pancakes it contains.\n\n<pre>int getPancakeRadius(int rank)  </pre>\nReturns the radius of the pancake passed as argument, with the rank of the top-most pancake being 0.\n\n<pre>boolean isPancakeUpsideDown(int rank)   </pre>\nReturns whether the pancake passed as argument upside-down, that is, if its burned side is on top. As usual, the top-most pancake is of rank 0.\n\n<pre>void flip(int amount)</pre>\nFlips the <code>amount</code> first pancakes composing the stack, from the top of it.\n\n<pre>boolean isSorted()   </pre>\nReturns whether the pancake stack is correctly sorted.\n\n<pre>boolean isSelected()   </pre>\nReturns whether the current world is selected in the graphical interface.  \n",
    "parameters" : null,
    "moveCount" : 0,
    "selected" : -1,
    "burnedWorld" : true,
    "pancakeStack" : [ {
      "radius" : 5
    }, {
      "radius" : 2
    }, {
      "radius" : 7
    }, {
      "radius" : 4
    }, {
      "radius" : 1
    }, {
      "radius" : 6
    }, {
      "radius" : 8
    }, {
      "radius" : 3
    } ]
  }, {
    "type" : "plm.universe.pancake.PancakeWorld",
    "@jsonId" : 5,
    "name" : "9 pancakes",
    "entities" : [ {
      "type" : "plm.universe.pancake.PancakeEntity",
      "name" : "Bill",
      "world" : 5,
      "inited" : false
    } ],
    "steps" : [ ],
    "about" : "<!-- Please don't translate this file but l10n/missions/plm.pot (see https://github.com/oster/PLM/wiki/Working-on-translations) -->\n<h1>PancakeWorld</h1>\n\n<p>This universe is very simple, with only five functions provided.</p>\n\n<pre>int getStackSize()  </pre>\nReturns the size of the stack, that is the amount of pancakes it contains.\n\n<pre>int getPancakeRadius(int rank)  </pre>\nReturns the radius of the pancake passed as argument, with the rank of the top-most pancake being 0.\n\n<pre>boolean isPancakeUpsideDown(int rank)   </pre>\nReturns whether the pancake passed as argument upside-down, that is, if its burned side is on top. As usual, the top-most pancake is of rank 0.\n\n<pre>void flip(int amount)</pre>\nFlips the <code>amount</code> first pancakes composing the stack, from the top of it.\n\n<pre>boolean isSorted()   </pre>\nReturns whether the pancake stack is correctly sorted.\n\n<pre>boolean isSelected()   </pre>\nReturns whether the current world is selected in the graphical interface.  \n",
    "parameters" : null,
    "moveCount" : 0,
    "selected" : -1,
    "burnedWorld" : true,
    "pancakeStack" : [ {
      "radius" : 4
    }, {
      "radius" : 2
    }, {
      "radius" : 3
    }, {
      "radius" : 7
    }, {
      "radius" : 9
    }, {
      "radius" : 1
    }, {
      "radius" : 5
    }, {
      "radius" : 6
    }, {
      "radius" : 8
    } ]
  }, {
    "type" : "plm.universe.pancake.PancakeWorld",
    "@jsonId" : 6,
    "name" : "15 pancackes",
    "entities" : [ {
      "type" : "plm.universe.pancake.PancakeEntity",
      "name" : "Bill",
      "world" : 6,
      "inited" : false
    } ],
    "steps" : [ ],
    "about" : "<!-- Please don't translate this file but l10n/missions/plm.pot (see https://github.com/oster/PLM/wiki/Working-on-translations) -->\n<h1>PancakeWorld</h1>\n\n<p>This universe is very simple, with only five functions provided.</p>\n\n<pre>int getStackSize()  </pre>\nReturns the size of the stack, that is the amount of pancakes it contains.\n\n<pre>int getPancakeRadius(int rank)  </pre>\nReturns the radius of the pancake passed as argument, with the rank of the top-most pancake being 0.\n\n<pre>boolean isPancakeUpsideDown(int rank)   </pre>\nReturns whether the pancake passed as argument upside-down, that is, if its burned side is on top. As usual, the top-most pancake is of rank 0.\n\n<pre>void flip(int amount)</pre>\nFlips the <code>amount</code> first pancakes composing the stack, from the top of it.\n\n<pre>boolean isSorted()   </pre>\nReturns whether the pancake stack is correctly sorted.\n\n<pre>boolean isSelected()   </pre>\nReturns whether the current world is selected in the graphical interface.  \n",
    "parameters" : null,
    "moveCount" : 0,
    "selected" : -1,
    "burnedWorld" : true,
    "pancakeStack" : [ {
      "radius" : 7
    }, {
      "radius" : 2
    }, {
      "radius" : 3
    }, {
      "radius" : 14
    }, {
      "radius" : 9
    }, {
      "radius" : 5
    }, {
      "radius" : 1
    }, {
      "radius" : 8
    }, {
      "radius" : 10
    }, {
      "radius" : 11
    }, {
      "radius" : 6
    }, {
      "radius" : 12
    }, {
      "radius" : 15
    }, {
      "radius" : 4
    }, {
      "radius" : 13
    } ]
  }, {
    "type" : "plm.universe.pancake.PancakeWorld",
    "@jsonId" : 7,
    "name" : "random 15 pancakes",
    "entities" : [ {
      "type" : "plm.universe.pancake.PancakeEntity",
      "name" : "Bill",
      "world" : 7,
      "inited" : false
    } ],
    "steps" : [ ],
    "about" : "<!-- Please don't translate this file but l10n/missions/plm.pot (see https://github.com/oster/PLM/wiki/Working-on-translations) -->\n<h1>PancakeWorld</h1>\n\n<p>This universe is very simple, with only five functions provided.</p>\n\n<pre>int getStackSize()  </pre>\nReturns the size of the stack, that is the amount of pancakes it contains.\n\n<pre>int getPancakeRadius(int rank)  </pre>\nReturns the radius of the pancake passed as argument, with the rank of the top-most pancake being 0.\n\n<pre>boolean isPancakeUpsideDown(int rank)   </pre>\nReturns whether the pancake passed as argument upside-down, that is, if its burned side is on top. As usual, the top-most pancake is of rank 0.\n\n<pre>void flip(int amount)</pre>\nFlips the <code>amount</code> first pancakes composing the stack, from the top of it.\n\n<pre>boolean isSorted()   </pre>\nReturns whether the pancake stack is correctly sorted.\n\n<pre>boolean isSelected()   </pre>\nReturns whether the current world is selected in the graphical interface.  \n",
    "parameters" : null,
    "moveCount" : 0,
    "selected" : -1,
    "burnedWorld" : true,
    "pancakeStack" : [ {
      "radius" : 4
    }, {
      "radius" : 2
    }, {
      "radius" : 3
    }, {
      "radius" : 1
    }, {
      "radius" : 8
    }, {
      "radius" : 6
    }, {
      "radius" : 14
    }, {
      "radius" : 5
    }, {
      "radius" : 9
    }, {
      "radius" : 13
    }, {
      "radius" : 11
    }, {
      "radius" : 7
    }, {
      "radius" : 10
    }, {
      "radius" : 15
    }, {
      "radius" : 12
    } ]
  }, {
    "type" : "plm.universe.pancake.PancakeWorld",
    "@jsonId" : 8,
    "name" : "30 pancakes",
    "entities" : [ {
      "type" : "plm.universe.pancake.PancakeEntity",
      "name" : "Bill",
      "world" : 8,
      "inited" : false
    } ],
    "steps" : [ ],
    "about" : "<!-- Please don't translate this file but l10n/missions/plm.pot (see https://github.com/oster/PLM/wiki/Working-on-translations) -->\n<h1>PancakeWorld</h1>\n\n<p>This universe is very simple, with only five functions provided.</p>\n\n<pre>int getStackSize()  </pre>\nReturns the size of the stack, that is the amount of pancakes it contains.\n\n<pre>int getPancakeRadius(int rank)  </pre>\nReturns the radius of the pancake passed as argument, with the rank of the top-most pancake being 0.\n\n<pre>boolean isPancakeUpsideDown(int rank)   </pre>\nReturns whether the pancake passed as argument upside-down, that is, if its burned side is on top. As usual, the top-most pancake is of rank 0.\n\n<pre>void flip(int amount)</pre>\nFlips the <code>amount</code> first pancakes composing the stack, from the top of it.\n\n<pre>boolean isSorted()   </pre>\nReturns whether the pancake stack is correctly sorted.\n\n<pre>boolean isSelected()   </pre>\nReturns whether the current world is selected in the graphical interface.  \n",
    "parameters" : null,
    "moveCount" : 0,
    "selected" : -1,
    "burnedWorld" : true,
    "pancakeStack" : [ {
      "radius" : 1
    }, {
      "radius" : 5
    }, {
      "radius" : 17
    }, {
      "radius" : 8
    }, {
      "radius" : 24
    }, {
      "radius" : 27
    }, {
      "radius" : 14
    }, {
      "radius" : 4
    }, {
      "radius" : 11
    }, {
      "radius" : 10
    }, {
      "radius" : 28
    }, {
      "radius" : 2
    }, {
      "radius" : 29
    }, {
      "radius" : 25
    }, {
      "radius" : 15
    }, {
      "radius" : 20
    }, {
      "radius" : 3
    }, {
      "radius" : 18
    }, {
      "radius" : 19
    }, {
      "radius" : 7
    }, {
      "radius" : 21
    }, {
      "radius" : 12
    }, {
      "radius" : 23
    }, {
      "radius" : 22
    }, {
      "radius" : 16
    }, {
      "radius" : 26
    }, {
      "radius" : 6
    }, {
      "radius" : 9
    }, {
      "radius" : 13
    }, {
      "radius" : 30
    } ]
  } ],
  "answerWorlds" : [ {
    "type" : "plm.universe.pancake.PancakeWorld",
    "@jsonId" : 9,
    "name" : "5 pancakes",
    "entities" : [ {
      "type" : "plm.universe.pancake.PancakeEntity",
      "name" : "Bill",
      "world" : 9,
      "inited" : true
    } ],
    "steps" : [ [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 10,
      "number" : 3,
      "oldNumber" : -1,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 11,
      "number" : 5,
      "oldNumber" : 3,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 12,
      "number" : 3,
      "oldNumber" : 5,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 13,
      "number" : 1,
      "oldNumber" : 3,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 14,
      "number" : 2,
      "oldNumber" : 1,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 15,
      "number" : 3,
      "oldNumber" : 2,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 16,
      "number" : 1,
      "oldNumber" : 3,
      "name" : "flipOperation"
    } ] ],
    "about" : "<!-- Please don't translate this file but l10n/missions/plm.pot (see https://github.com/oster/PLM/wiki/Working-on-translations) -->\n<h1>PancakeWorld</h1>\n\n<p>This universe is very simple, with only five functions provided.</p>\n\n<pre>int getStackSize()  </pre>\nReturns the size of the stack, that is the amount of pancakes it contains.\n\n<pre>int getPancakeRadius(int rank)  </pre>\nReturns the radius of the pancake passed as argument, with the rank of the top-most pancake being 0.\n\n<pre>boolean isPancakeUpsideDown(int rank)   </pre>\nReturns whether the pancake passed as argument upside-down, that is, if its burned side is on top. As usual, the top-most pancake is of rank 0.\n\n<pre>void flip(int amount)</pre>\nFlips the <code>amount</code> first pancakes composing the stack, from the top of it.\n\n<pre>boolean isSorted()   </pre>\nReturns whether the pancake stack is correctly sorted.\n\n<pre>boolean isSelected()   </pre>\nReturns whether the current world is selected in the graphical interface.  \n",
    "parameters" : null,
    "moveCount" : 7,
    "selected" : -1,
    "burnedWorld" : true,
    "pancakeStack" : [ {
      "radius" : 1
    }, {
      "radius" : 2
    }, {
      "radius" : 3
    }, {
      "radius" : 4
    }, {
      "radius" : 5
    } ]
  }, {
    "type" : "plm.universe.pancake.PancakeWorld",
    "@jsonId" : 17,
    "name" : "upside down",
    "entities" : [ {
      "type" : "plm.universe.pancake.PancakeEntity",
      "name" : "Bill",
      "world" : 17,
      "inited" : true
    } ],
    "steps" : [ [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 18,
      "number" : 10,
      "oldNumber" : -1,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 19,
      "number" : 9,
      "oldNumber" : 10,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 20,
      "number" : 10,
      "oldNumber" : 9,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 21,
      "number" : 9,
      "oldNumber" : 10,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 22,
      "number" : 10,
      "oldNumber" : 9,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 23,
      "number" : 9,
      "oldNumber" : 10,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 24,
      "number" : 10,
      "oldNumber" : 9,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 25,
      "number" : 9,
      "oldNumber" : 10,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 26,
      "number" : 10,
      "oldNumber" : 9,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 27,
      "number" : 9,
      "oldNumber" : 10,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 28,
      "number" : 10,
      "oldNumber" : 9,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 29,
      "number" : 9,
      "oldNumber" : 10,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 30,
      "number" : 10,
      "oldNumber" : 9,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 31,
      "number" : 9,
      "oldNumber" : 10,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 32,
      "number" : 10,
      "oldNumber" : 9,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 33,
      "number" : 9,
      "oldNumber" : 10,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 34,
      "number" : 10,
      "oldNumber" : 9,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 35,
      "number" : 9,
      "oldNumber" : 10,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 36,
      "number" : 10,
      "oldNumber" : 9,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 37,
      "number" : 9,
      "oldNumber" : 10,
      "name" : "flipOperation"
    } ] ],
    "about" : "<!-- Please don't translate this file but l10n/missions/plm.pot (see https://github.com/oster/PLM/wiki/Working-on-translations) -->\n<h1>PancakeWorld</h1>\n\n<p>This universe is very simple, with only five functions provided.</p>\n\n<pre>int getStackSize()  </pre>\nReturns the size of the stack, that is the amount of pancakes it contains.\n\n<pre>int getPancakeRadius(int rank)  </pre>\nReturns the radius of the pancake passed as argument, with the rank of the top-most pancake being 0.\n\n<pre>boolean isPancakeUpsideDown(int rank)   </pre>\nReturns whether the pancake passed as argument upside-down, that is, if its burned side is on top. As usual, the top-most pancake is of rank 0.\n\n<pre>void flip(int amount)</pre>\nFlips the <code>amount</code> first pancakes composing the stack, from the top of it.\n\n<pre>boolean isSorted()   </pre>\nReturns whether the pancake stack is correctly sorted.\n\n<pre>boolean isSelected()   </pre>\nReturns whether the current world is selected in the graphical interface.  \n",
    "parameters" : null,
    "moveCount" : 20,
    "selected" : -1,
    "burnedWorld" : true,
    "pancakeStack" : [ {
      "radius" : 1
    }, {
      "radius" : 2
    }, {
      "radius" : 3
    }, {
      "radius" : 4
    }, {
      "radius" : 5
    }, {
      "radius" : 6
    }, {
      "radius" : 7
    }, {
      "radius" : 8
    }, {
      "radius" : 9
    }, {
      "radius" : 10
    } ]
  }, {
    "type" : "plm.universe.pancake.PancakeWorld",
    "@jsonId" : 38,
    "name" : "7 pancakes",
    "entities" : [ {
      "type" : "plm.universe.pancake.PancakeEntity",
      "name" : "Bill",
      "world" : 38,
      "inited" : true
    } ],
    "steps" : [ [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 39,
      "number" : 2,
      "oldNumber" : -1,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 40,
      "number" : 6,
      "oldNumber" : 2,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 41,
      "number" : 5,
      "oldNumber" : 6,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 42,
      "number" : 4,
      "oldNumber" : 5,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 43,
      "number" : 5,
      "oldNumber" : 4,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 44,
      "number" : 4,
      "oldNumber" : 5,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 45,
      "number" : 2,
      "oldNumber" : 4,
      "name" : "flipOperation"
    } ] ],
    "about" : "<!-- Please don't translate this file but l10n/missions/plm.pot (see https://github.com/oster/PLM/wiki/Working-on-translations) -->\n<h1>PancakeWorld</h1>\n\n<p>This universe is very simple, with only five functions provided.</p>\n\n<pre>int getStackSize()  </pre>\nReturns the size of the stack, that is the amount of pancakes it contains.\n\n<pre>int getPancakeRadius(int rank)  </pre>\nReturns the radius of the pancake passed as argument, with the rank of the top-most pancake being 0.\n\n<pre>boolean isPancakeUpsideDown(int rank)   </pre>\nReturns whether the pancake passed as argument upside-down, that is, if its burned side is on top. As usual, the top-most pancake is of rank 0.\n\n<pre>void flip(int amount)</pre>\nFlips the <code>amount</code> first pancakes composing the stack, from the top of it.\n\n<pre>boolean isSorted()   </pre>\nReturns whether the pancake stack is correctly sorted.\n\n<pre>boolean isSelected()   </pre>\nReturns whether the current world is selected in the graphical interface.  \n",
    "parameters" : null,
    "moveCount" : 7,
    "selected" : -1,
    "burnedWorld" : true,
    "pancakeStack" : [ {
      "radius" : 1
    }, {
      "radius" : 2
    }, {
      "radius" : 3
    }, {
      "radius" : 4
    }, {
      "radius" : 5
    }, {
      "radius" : 6
    }, {
      "radius" : 7
    } ]
  }, {
    "type" : "plm.universe.pancake.PancakeWorld",
    "@jsonId" : 46,
    "name" : "8 pancakes",
    "entities" : [ {
      "type" : "plm.universe.pancake.PancakeEntity",
      "name" : "Bill",
      "world" : 46,
      "inited" : true
    } ],
    "steps" : [ [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 47,
      "number" : 7,
      "oldNumber" : -1,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 48,
      "number" : 8,
      "oldNumber" : 7,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 49,
      "number" : 4,
      "oldNumber" : 8,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 50,
      "number" : 7,
      "oldNumber" : 4,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 51,
      "number" : 5,
      "oldNumber" : 7,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 52,
      "number" : 4,
      "oldNumber" : 5,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 53,
      "number" : 5,
      "oldNumber" : 4,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 54,
      "number" : 6,
      "oldNumber" : 5,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 55,
      "number" : 4,
      "oldNumber" : 6,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 56,
      "number" : 3,
      "oldNumber" : 4,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 57,
      "number" : 4,
      "oldNumber" : 3,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 58,
      "number" : 1,
      "oldNumber" : 4,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 59,
      "number" : 3,
      "oldNumber" : 1,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 60,
      "number" : 4,
      "oldNumber" : 3,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 61,
      "number" : 1,
      "oldNumber" : 4,
      "name" : "flipOperation"
    } ] ],
    "about" : "<!-- Please don't translate this file but l10n/missions/plm.pot (see https://github.com/oster/PLM/wiki/Working-on-translations) -->\n<h1>PancakeWorld</h1>\n\n<p>This universe is very simple, with only five functions provided.</p>\n\n<pre>int getStackSize()  </pre>\nReturns the size of the stack, that is the amount of pancakes it contains.\n\n<pre>int getPancakeRadius(int rank)  </pre>\nReturns the radius of the pancake passed as argument, with the rank of the top-most pancake being 0.\n\n<pre>boolean isPancakeUpsideDown(int rank)   </pre>\nReturns whether the pancake passed as argument upside-down, that is, if its burned side is on top. As usual, the top-most pancake is of rank 0.\n\n<pre>void flip(int amount)</pre>\nFlips the <code>amount</code> first pancakes composing the stack, from the top of it.\n\n<pre>boolean isSorted()   </pre>\nReturns whether the pancake stack is correctly sorted.\n\n<pre>boolean isSelected()   </pre>\nReturns whether the current world is selected in the graphical interface.  \n",
    "parameters" : null,
    "moveCount" : 15,
    "selected" : -1,
    "burnedWorld" : true,
    "pancakeStack" : [ {
      "radius" : 1
    }, {
      "radius" : 2
    }, {
      "radius" : 3
    }, {
      "radius" : 4
    }, {
      "radius" : 5
    }, {
      "radius" : 6
    }, {
      "radius" : 7
    }, {
      "radius" : 8
    } ]
  }, {
    "type" : "plm.universe.pancake.PancakeWorld",
    "@jsonId" : 62,
    "name" : "9 pancakes",
    "entities" : [ {
      "type" : "plm.universe.pancake.PancakeEntity",
      "name" : "Bill",
      "world" : 62,
      "inited" : true
    } ],
    "steps" : [ [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 63,
      "number" : 5,
      "oldNumber" : -1,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 64,
      "number" : 9,
      "oldNumber" : 5,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 65,
      "number" : 8,
      "oldNumber" : 9,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 66,
      "number" : 7,
      "oldNumber" : 8,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 67,
      "number" : 4,
      "oldNumber" : 7,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 68,
      "number" : 2,
      "oldNumber" : 4,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 69,
      "number" : 4,
      "oldNumber" : 2,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 70,
      "number" : 6,
      "oldNumber" : 4,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 71,
      "number" : 2,
      "oldNumber" : 6,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 72,
      "number" : 2,
      "oldNumber" : 2,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 73,
      "number" : 3,
      "oldNumber" : 2,
      "name" : "flipOperation"
    } ] ],
    "about" : "<!-- Please don't translate this file but l10n/missions/plm.pot (see https://github.com/oster/PLM/wiki/Working-on-translations) -->\n<h1>PancakeWorld</h1>\n\n<p>This universe is very simple, with only five functions provided.</p>\n\n<pre>int getStackSize()  </pre>\nReturns the size of the stack, that is the amount of pancakes it contains.\n\n<pre>int getPancakeRadius(int rank)  </pre>\nReturns the radius of the pancake passed as argument, with the rank of the top-most pancake being 0.\n\n<pre>boolean isPancakeUpsideDown(int rank)   </pre>\nReturns whether the pancake passed as argument upside-down, that is, if its burned side is on top. As usual, the top-most pancake is of rank 0.\n\n<pre>void flip(int amount)</pre>\nFlips the <code>amount</code> first pancakes composing the stack, from the top of it.\n\n<pre>boolean isSorted()   </pre>\nReturns whether the pancake stack is correctly sorted.\n\n<pre>boolean isSelected()   </pre>\nReturns whether the current world is selected in the graphical interface.  \n",
    "parameters" : null,
    "moveCount" : 11,
    "selected" : -1,
    "burnedWorld" : true,
    "pancakeStack" : [ {
      "radius" : 1
    }, {
      "radius" : 2
    }, {
      "radius" : 3
    }, {
      "radius" : 4
    }, {
      "radius" : 5
    }, {
      "radius" : 6
    }, {
      "radius" : 7
    }, {
      "radius" : 8
    }, {
      "radius" : 9
    } ]
  }, {
    "type" : "plm.universe.pancake.PancakeWorld",
    "@jsonId" : 74,
    "name" : "15 pancackes",
    "entities" : [ {
      "type" : "plm.universe.pancake.PancakeEntity",
      "name" : "Bill",
      "world" : 74,
      "inited" : true
    } ],
    "steps" : [ [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 75,
      "number" : 13,
      "oldNumber" : -1,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 76,
      "number" : 15,
      "oldNumber" : 13,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 77,
      "number" : 6,
      "oldNumber" : 15,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 78,
      "number" : 14,
      "oldNumber" : 6,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 79,
      "number" : 11,
      "oldNumber" : 14,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 80,
      "number" : 6,
      "oldNumber" : 11,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 81,
      "number" : 11,
      "oldNumber" : 6,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 82,
      "number" : 7,
      "oldNumber" : 11,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 83,
      "number" : 8,
      "oldNumber" : 7,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 84,
      "number" : 13,
      "oldNumber" : 8,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 85,
      "number" : 10,
      "oldNumber" : 13,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 86,
      "number" : 11,
      "oldNumber" : 10,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 87,
      "number" : 9,
      "oldNumber" : 11,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 88,
      "number" : 3,
      "oldNumber" : 9,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 89,
      "number" : 4,
      "oldNumber" : 3,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 90,
      "number" : 9,
      "oldNumber" : 4,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 91,
      "number" : 5,
      "oldNumber" : 9,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 92,
      "number" : 5,
      "oldNumber" : 5,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 93,
      "number" : 6,
      "oldNumber" : 5,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 94,
      "number" : 2,
      "oldNumber" : 6,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 95,
      "number" : 5,
      "oldNumber" : 2,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 96,
      "number" : 2,
      "oldNumber" : 5,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 97,
      "number" : 2,
      "oldNumber" : 2,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 98,
      "number" : 3,
      "oldNumber" : 2,
      "name" : "flipOperation"
    } ] ],
    "about" : "<!-- Please don't translate this file but l10n/missions/plm.pot (see https://github.com/oster/PLM/wiki/Working-on-translations) -->\n<h1>PancakeWorld</h1>\n\n<p>This universe is very simple, with only five functions provided.</p>\n\n<pre>int getStackSize()  </pre>\nReturns the size of the stack, that is the amount of pancakes it contains.\n\n<pre>int getPancakeRadius(int rank)  </pre>\nReturns the radius of the pancake passed as argument, with the rank of the top-most pancake being 0.\n\n<pre>boolean isPancakeUpsideDown(int rank)   </pre>\nReturns whether the pancake passed as argument upside-down, that is, if its burned side is on top. As usual, the top-most pancake is of rank 0.\n\n<pre>void flip(int amount)</pre>\nFlips the <code>amount</code> first pancakes composing the stack, from the top of it.\n\n<pre>boolean isSorted()   </pre>\nReturns whether the pancake stack is correctly sorted.\n\n<pre>boolean isSelected()   </pre>\nReturns whether the current world is selected in the graphical interface.  \n",
    "parameters" : null,
    "moveCount" : 24,
    "selected" : -1,
    "burnedWorld" : true,
    "pancakeStack" : [ {
      "radius" : 1
    }, {
      "radius" : 2
    }, {
      "radius" : 3
    }, {
      "radius" : 4
    }, {
      "radius" : 5
    }, {
      "radius" : 6
    }, {
      "radius" : 7
    }, {
      "radius" : 8
    }, {
      "radius" : 9
    }, {
      "radius" : 10
    }, {
      "radius" : 11
    }, {
      "radius" : 12
    }, {
      "radius" : 13
    }, {
      "radius" : 14
    }, {
      "radius" : 15
    } ]
  }, {
    "type" : "plm.universe.pancake.PancakeWorld",
    "@jsonId" : 99,
    "name" : "random 15 pancakes",
    "entities" : [ {
      "type" : "plm.universe.pancake.PancakeEntity",
      "name" : "Bill",
      "world" : 99,
      "inited" : true
    } ],
    "steps" : [ [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 100,
      "number" : 14,
      "oldNumber" : -1,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 101,
      "number" : 15,
      "oldNumber" : 14,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 102,
      "number" : 8,
      "oldNumber" : 15,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 103,
      "number" : 14,
      "oldNumber" : 8,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 104,
      "number" : 12,
      "oldNumber" : 14,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 105,
      "number" : 10,
      "oldNumber" : 12,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 106,
      "number" : 12,
      "oldNumber" : 10,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 107,
      "number" : 11,
      "oldNumber" : 12,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 108,
      "number" : 12,
      "oldNumber" : 11,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 109,
      "number" : 8,
      "oldNumber" : 12,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 110,
      "number" : 12,
      "oldNumber" : 8,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 111,
      "number" : 13,
      "oldNumber" : 12,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 112,
      "number" : 10,
      "oldNumber" : 13,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 113,
      "number" : 12,
      "oldNumber" : 10,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 114,
      "number" : 4,
      "oldNumber" : 12,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 115,
      "number" : 2,
      "oldNumber" : 4,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 116,
      "number" : 4,
      "oldNumber" : 2,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 117,
      "number" : 9,
      "oldNumber" : 4,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 118,
      "number" : 2,
      "oldNumber" : 9,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 119,
      "number" : 8,
      "oldNumber" : 2,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 120,
      "number" : 3,
      "oldNumber" : 8,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 121,
      "number" : 6,
      "oldNumber" : 3,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 122,
      "number" : 5,
      "oldNumber" : 6,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 123,
      "number" : 3,
      "oldNumber" : 5,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 124,
      "number" : 4,
      "oldNumber" : 3,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 125,
      "number" : 3,
      "oldNumber" : 4,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 126,
      "number" : 5,
      "oldNumber" : 3,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 127,
      "number" : 1,
      "oldNumber" : 5,
      "name" : "flipOperation"
    } ] ],
    "about" : "<!-- Please don't translate this file but l10n/missions/plm.pot (see https://github.com/oster/PLM/wiki/Working-on-translations) -->\n<h1>PancakeWorld</h1>\n\n<p>This universe is very simple, with only five functions provided.</p>\n\n<pre>int getStackSize()  </pre>\nReturns the size of the stack, that is the amount of pancakes it contains.\n\n<pre>int getPancakeRadius(int rank)  </pre>\nReturns the radius of the pancake passed as argument, with the rank of the top-most pancake being 0.\n\n<pre>boolean isPancakeUpsideDown(int rank)   </pre>\nReturns whether the pancake passed as argument upside-down, that is, if its burned side is on top. As usual, the top-most pancake is of rank 0.\n\n<pre>void flip(int amount)</pre>\nFlips the <code>amount</code> first pancakes composing the stack, from the top of it.\n\n<pre>boolean isSorted()   </pre>\nReturns whether the pancake stack is correctly sorted.\n\n<pre>boolean isSelected()   </pre>\nReturns whether the current world is selected in the graphical interface.  \n",
    "parameters" : null,
    "moveCount" : 28,
    "selected" : -1,
    "burnedWorld" : true,
    "pancakeStack" : [ {
      "radius" : 1
    }, {
      "radius" : 2
    }, {
      "radius" : 3
    }, {
      "radius" : 4
    }, {
      "radius" : 5
    }, {
      "radius" : 6
    }, {
      "radius" : 7
    }, {
      "radius" : 8
    }, {
      "radius" : 9
    }, {
      "radius" : 10
    }, {
      "radius" : 11
    }, {
      "radius" : 12
    }, {
      "radius" : 13
    }, {
      "radius" : 14
    }, {
      "radius" : 15
    } ]
  }, {
    "type" : "plm.universe.pancake.PancakeWorld",
    "@jsonId" : 128,
    "name" : "30 pancakes",
    "entities" : [ {
      "type" : "plm.universe.pancake.PancakeEntity",
      "name" : "Bill",
      "world" : 128,
      "inited" : true
    } ],
    "steps" : [ [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 129,
      "number" : 13,
      "oldNumber" : -1,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 130,
      "number" : 29,
      "oldNumber" : 13,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 131,
      "number" : 27,
      "oldNumber" : 29,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 132,
      "number" : 28,
      "oldNumber" : 27,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 133,
      "number" : 23,
      "oldNumber" : 28,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 134,
      "number" : 27,
      "oldNumber" : 23,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 135,
      "number" : 26,
      "oldNumber" : 27,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 136,
      "number" : 5,
      "oldNumber" : 26,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 137,
      "number" : 18,
      "oldNumber" : 5,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 138,
      "number" : 26,
      "oldNumber" : 18,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 139,
      "number" : 14,
      "oldNumber" : 26,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 140,
      "number" : 25,
      "oldNumber" : 14,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 141,
      "number" : 22,
      "oldNumber" : 25,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 142,
      "number" : 14,
      "oldNumber" : 22,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 143,
      "number" : 20,
      "oldNumber" : 14,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 144,
      "number" : 23,
      "oldNumber" : 20,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 145,
      "number" : 21,
      "oldNumber" : 23,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 146,
      "number" : 18,
      "oldNumber" : 21,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 147,
      "number" : 19,
      "oldNumber" : 18,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 148,
      "number" : 22,
      "oldNumber" : 19,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 149,
      "number" : 19,
      "oldNumber" : 22,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 150,
      "number" : 14,
      "oldNumber" : 19,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 151,
      "number" : 15,
      "oldNumber" : 14,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 152,
      "number" : 20,
      "oldNumber" : 15,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 153,
      "number" : 16,
      "oldNumber" : 20,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 154,
      "number" : 2,
      "oldNumber" : 16,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 155,
      "number" : 13,
      "oldNumber" : 2,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 156,
      "number" : 16,
      "oldNumber" : 13,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 157,
      "number" : 14,
      "oldNumber" : 16,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 158,
      "number" : 15,
      "oldNumber" : 14,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 159,
      "number" : 11,
      "oldNumber" : 15,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 160,
      "number" : 14,
      "oldNumber" : 11,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 161,
      "number" : 12,
      "oldNumber" : 14,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 162,
      "number" : 13,
      "oldNumber" : 12,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 163,
      "number" : 12,
      "oldNumber" : 13,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 164,
      "number" : 10,
      "oldNumber" : 12,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 165,
      "number" : 11,
      "oldNumber" : 10,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 166,
      "number" : 10,
      "oldNumber" : 11,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 167,
      "number" : 11,
      "oldNumber" : 10,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 168,
      "number" : 7,
      "oldNumber" : 11,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 169,
      "number" : 8,
      "oldNumber" : 7,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 170,
      "number" : 12,
      "oldNumber" : 8,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 171,
      "number" : 8,
      "oldNumber" : 12,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 172,
      "number" : 4,
      "oldNumber" : 8,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 173,
      "number" : 5,
      "oldNumber" : 4,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 174,
      "number" : 4,
      "oldNumber" : 5,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 175,
      "number" : 5,
      "oldNumber" : 4,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 176,
      "number" : 8,
      "oldNumber" : 5,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 177,
      "number" : 4,
      "oldNumber" : 8,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 178,
      "number" : 3,
      "oldNumber" : 4,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 179,
      "number" : 4,
      "oldNumber" : 3,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 180,
      "number" : 2,
      "oldNumber" : 4,
      "name" : "flipOperation"
    } ] ],
    "about" : "<!-- Please don't translate this file but l10n/missions/plm.pot (see https://github.com/oster/PLM/wiki/Working-on-translations) -->\n<h1>PancakeWorld</h1>\n\n<p>This universe is very simple, with only five functions provided.</p>\n\n<pre>int getStackSize()  </pre>\nReturns the size of the stack, that is the amount of pancakes it contains.\n\n<pre>int getPancakeRadius(int rank)  </pre>\nReturns the radius of the pancake passed as argument, with the rank of the top-most pancake being 0.\n\n<pre>boolean isPancakeUpsideDown(int rank)   </pre>\nReturns whether the pancake passed as argument upside-down, that is, if its burned side is on top. As usual, the top-most pancake is of rank 0.\n\n<pre>void flip(int amount)</pre>\nFlips the <code>amount</code> first pancakes composing the stack, from the top of it.\n\n<pre>boolean isSorted()   </pre>\nReturns whether the pancake stack is correctly sorted.\n\n<pre>boolean isSelected()   </pre>\nReturns whether the current world is selected in the graphical interface.  \n",
    "parameters" : null,
    "moveCount" : 52,
    "selected" : -1,
    "burnedWorld" : true,
    "pancakeStack" : [ {
      "radius" : 1
    }, {
      "radius" : 2
    }, {
      "radius" : 3
    }, {
      "radius" : 4
    }, {
      "radius" : 5
    }, {
      "radius" : 6
    }, {
      "radius" : 7
    }, {
      "radius" : 8
    }, {
      "radius" : 9
    }, {
      "radius" : 10
    }, {
      "radius" : 11
    }, {
      "radius" : 12
    }, {
      "radius" : 13
    }, {
      "radius" : 14
    }, {
      "radius" : 15
    }, {
      "radius" : 16
    }, {
      "radius" : 17
    }, {
      "radius" : 18
    }, {
      "radius" : 19
    }, {
      "radius" : 20
    }, {
      "radius" : 21
    }, {
      "radius" : 22
    }, {
      "radius" : 23
    }, {
      "radius" : 24
    }, {
      "radius" : 25
    }, {
      "radius" : 26
    }, {
      "radius" : 27
    }, {
      "radius" : 28
    }, {
      "radius" : 29
    }, {
      "radius" : 30
    } ]
  } ] 
}