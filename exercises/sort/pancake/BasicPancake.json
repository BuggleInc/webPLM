{
  "id" : "sort.pancake.BasicPancake",
  "name" : "BasicPancake",
  "tabName" : "BasicPancake",
  "defaultSourceFiles" : {
    "Java" : {
      "name" : "BasicPancake",
      "body" : "public void solve() {\n}\n",
      "template" : "$package   import plm.universe.pancake.PancakeEntity;  public class BasicPancake extends PancakeEntity {\t \tpublic void run() { \t\tsolve(); \t}  $body   } ",
      "offset" : 1,
      "correction" : "$package \n\nimport plm.universe.pancake.PancakeEntity;\n\npublic class BasicPancake extends PancakeEntity {\n\t\n\tpublic void run() {\n\t\tsolve();\n\t}\n\n\t/* BEGIN TEMPLATE */\n\tpublic void solve() {\n\t\t/* BEGIN SOLUTION */\t\t\n\t\tfor ( int rank = getStackSize()-1 ; rank != -1 && !this.isSorted() ; rank-- ) {\n\t\t\tif ( getPancakeRadius(rank) != rank+1 ) { \n\t\t\t\tint indexBigPancake =-1;\n\t\t\t\tfor (int currentPancake = 0 ; currentPancake < rank+1; currentPancake++)\n\t\t\t\t\tif ( getPancakeRadius(currentPancake) == rank+1) {\n\t\t\t\t\t\tindexBigPancake = currentPancake;\t\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif ( indexBigPancake != 0 )\n\t\t\t\t\tflip(indexBigPancake+1);\t\n\t\t\t\t\t\n\t\t\t\tif ( rank != 0 )\n\t\t\t\t\tflip(getPancakeRadius(0));\t\n\t\t\t}\t\n\t\t}\n\t\t/* END SOLUTION */\n\t}\n\t/* END TEMPLATE */\n\n\n}\n",
      "error" : "Error"
    },
    "Scala" : {
      "name" : "BasicPancake",
      "body" : "def solve() {\n}\n",
      "template" : "$package \n\nimport plm.universe.pancake.PancakeEntity\n\nclass BasicPancake extends PancakeEntity {\n\toverride def run() {\n\t\tsolve();\n\t}\n\n$body\n\n\n}\n",
      "offset" : 8,
      "correction" : "$package \n\nimport plm.universe.pancake.PancakeEntity\n\nclass BasicPancake extends PancakeEntity {\n\n\toverride def run() {\n\t\tsolve();\n\t}\n\n\t/* BEGIN TEMPLATE */\n\tdef solve() {\n\t\t/* BEGIN SOLUTION */\t\t\n\t\tfor (rank <- getStackSize()-1 to 0 by -1) {\n\t\t\tif (isSorted()) \n\t\t\t\treturn;\n\t\t\tif ( getPancakeRadius(rank) != rank+1 ) { // Current pancake is still to be sorted\n\t\t\t\tvar indexBigPancake = -1\n\t\t\t\tfor (currentPancake <- 0 to rank)\n\t\t\t\t\tif ( getPancakeRadius(currentPancake) == rank+1) \n\t\t\t\t\t\tindexBigPancake = currentPancake;\t// gotcha !\n\n\t\t\t\tif ( indexBigPancake != 0 )\n\t\t\t\t\tflip(indexBigPancake+1);\t// putting the pancake at the top\n\n\t\t\t\tif ( rank != 0 )\n\t\t\t\t\tflip(getPancakeRadius(0));\t// hit the bottom now !\n\t\t\t}\t\n\t\t}\n\t\t/* END SOLUTION */\n\t}\n\t/* END TEMPLATE */\n\n\n}\n",
      "error" : "Error"
    },
    "Python" : {
      "name" : "BasicPancake",
      "body" : "",
      "template" : "$body\n",
      "offset" : 1,
      "correction" : "# BEGIN SOLUTION\nfor pancakeToSort in range(getStackSize()-1, -1, -1):\n\tif not getPancakeRadius(pancakeToSort)==pancakeToSort+1: # Current position is not sorted yet\n\t\tindexBigPancake = -1\n\t\tfor currentPancake in range(pancakeToSort+1):\n\t\t\tif getPancakeRadius(currentPancake) == pancakeToSort+1:\n\t\t\t\tindexBigPancake = currentPancake\n\t\t\t\tbreak # Gotcha!\n\t\tif indexBigPancake != 0:\n\t\t\tflip(indexBigPancake+1) # move this large pancake to the top\n\t\tif pancakeToSort != 0:\n\t\t\tflip(getPancakeRadius(0)) # hit the bottom\n# END SOLUTION\n",
      "error" : "Error"
    }
  },

  "initialWorlds" : [ {
    "type" : "plm.universe.pancake.PancakeWorld",
    "@jsonId" : 1,
    "name" : "5 pancakes",
    "entities" : [ {
      "type" : "plm.universe.pancake.PancakeEntity",
      "name" : "Pancake Seller",
      "world" : 1,
      "inited" : false
    } ],
    "steps" : [ ],
    "about" : "<!-- Please don't translate this file but l10n/missions/plm.pot (see https://github.com/oster/PLM/wiki/Working-on-translations) -->\n<h1>PancakeWorld</h1>\n\n<p>This universe is very simple, with only five functions provided.</p>\n\n<pre>int getStackSize()  </pre>\nReturns the size of the stack, that is the amount of pancakes it contains.\n\n<pre>int getPancakeRadius(int rank)  </pre>\nReturns the radius of the pancake passed as argument, with the rank of the top-most pancake being 0.\n\n<pre>boolean isPancakeUpsideDown(int rank)   </pre>\nReturns whether the pancake passed as argument upside-down, that is, if its burned side is on top. As usual, the top-most pancake is of rank 0.\n\n<pre>void flip(int amount)</pre>\nFlips the <code>amount</code> first pancakes composing the stack, from the top of it.\n\n<pre>boolean isSorted()   </pre>\nReturns whether the pancake stack is correctly sorted.\n\n<pre>boolean isSelected()   </pre>\nReturns whether the current world is selected in the graphical interface.  \n",
    "parameters" : null,
    "moveCount" : 0,
    "selected" : -1,
    "burnedWorld" : false,
    "pancakeStack" : [ {
      "radius" : 1
    }, {
      "radius" : 5
    }, {
      "radius" : 3
    }, {
      "radius" : 4
    }, {
      "radius" : 2
    } ]
  }, {
    "type" : "plm.universe.pancake.PancakeWorld",
    "@jsonId" : 2,
    "name" : "10 pancakes",
    "entities" : [ {
      "type" : "plm.universe.pancake.PancakeEntity",
      "name" : "Pancake Seller",
      "world" : 2,
      "inited" : false
    } ],
    "steps" : [ ],
    "about" : "<!-- Please don't translate this file but l10n/missions/plm.pot (see https://github.com/oster/PLM/wiki/Working-on-translations) -->\n<h1>PancakeWorld</h1>\n\n<p>This universe is very simple, with only five functions provided.</p>\n\n<pre>int getStackSize()  </pre>\nReturns the size of the stack, that is the amount of pancakes it contains.\n\n<pre>int getPancakeRadius(int rank)  </pre>\nReturns the radius of the pancake passed as argument, with the rank of the top-most pancake being 0.\n\n<pre>boolean isPancakeUpsideDown(int rank)   </pre>\nReturns whether the pancake passed as argument upside-down, that is, if its burned side is on top. As usual, the top-most pancake is of rank 0.\n\n<pre>void flip(int amount)</pre>\nFlips the <code>amount</code> first pancakes composing the stack, from the top of it.\n\n<pre>boolean isSorted()   </pre>\nReturns whether the pancake stack is correctly sorted.\n\n<pre>boolean isSelected()   </pre>\nReturns whether the current world is selected in the graphical interface.  \n",
    "parameters" : null,
    "moveCount" : 0,
    "selected" : -1,
    "burnedWorld" : false,
    "pancakeStack" : [ {
      "radius" : 1
    }, {
      "radius" : 7
    }, {
      "radius" : 8
    }, {
      "radius" : 4
    }, {
      "radius" : 5
    }, {
      "radius" : 3
    }, {
      "radius" : 9
    }, {
      "radius" : 6
    }, {
      "radius" : 2
    }, {
      "radius" : 10
    } ]
  }, {
    "type" : "plm.universe.pancake.PancakeWorld",
    "@jsonId" : 3,
    "name" : "15 pancakes",
    "entities" : [ {
      "type" : "plm.universe.pancake.PancakeEntity",
      "name" : "Pancake Seller",
      "world" : 3,
      "inited" : false
    } ],
    "steps" : [ ],
    "about" : "<!-- Please don't translate this file but l10n/missions/plm.pot (see https://github.com/oster/PLM/wiki/Working-on-translations) -->\n<h1>PancakeWorld</h1>\n\n<p>This universe is very simple, with only five functions provided.</p>\n\n<pre>int getStackSize()  </pre>\nReturns the size of the stack, that is the amount of pancakes it contains.\n\n<pre>int getPancakeRadius(int rank)  </pre>\nReturns the radius of the pancake passed as argument, with the rank of the top-most pancake being 0.\n\n<pre>boolean isPancakeUpsideDown(int rank)   </pre>\nReturns whether the pancake passed as argument upside-down, that is, if its burned side is on top. As usual, the top-most pancake is of rank 0.\n\n<pre>void flip(int amount)</pre>\nFlips the <code>amount</code> first pancakes composing the stack, from the top of it.\n\n<pre>boolean isSorted()   </pre>\nReturns whether the pancake stack is correctly sorted.\n\n<pre>boolean isSelected()   </pre>\nReturns whether the current world is selected in the graphical interface.  \n",
    "parameters" : null,
    "moveCount" : 0,
    "selected" : -1,
    "burnedWorld" : false,
    "pancakeStack" : [ {
      "radius" : 4
    }, {
      "radius" : 11
    }, {
      "radius" : 3
    }, {
      "radius" : 6
    }, {
      "radius" : 5
    }, {
      "radius" : 15
    }, {
      "radius" : 7
    }, {
      "radius" : 14
    }, {
      "radius" : 10
    }, {
      "radius" : 2
    }, {
      "radius" : 1
    }, {
      "radius" : 13
    }, {
      "radius" : 12
    }, {
      "radius" : 8
    }, {
      "radius" : 9
    } ]
  }, {
    "type" : "plm.universe.pancake.PancakeWorld",
    "@jsonId" : 4,
    "name" : "30 pancakes",
    "entities" : [ {
      "type" : "plm.universe.pancake.PancakeEntity",
      "name" : "Pancake Seller",
      "world" : 4,
      "inited" : false
    } ],
    "steps" : [ ],
    "about" : "<!-- Please don't translate this file but l10n/missions/plm.pot (see https://github.com/oster/PLM/wiki/Working-on-translations) -->\n<h1>PancakeWorld</h1>\n\n<p>This universe is very simple, with only five functions provided.</p>\n\n<pre>int getStackSize()  </pre>\nReturns the size of the stack, that is the amount of pancakes it contains.\n\n<pre>int getPancakeRadius(int rank)  </pre>\nReturns the radius of the pancake passed as argument, with the rank of the top-most pancake being 0.\n\n<pre>boolean isPancakeUpsideDown(int rank)   </pre>\nReturns whether the pancake passed as argument upside-down, that is, if its burned side is on top. As usual, the top-most pancake is of rank 0.\n\n<pre>void flip(int amount)</pre>\nFlips the <code>amount</code> first pancakes composing the stack, from the top of it.\n\n<pre>boolean isSorted()   </pre>\nReturns whether the pancake stack is correctly sorted.\n\n<pre>boolean isSelected()   </pre>\nReturns whether the current world is selected in the graphical interface.  \n",
    "parameters" : null,
    "moveCount" : 0,
    "selected" : -1,
    "burnedWorld" : false,
    "pancakeStack" : [ {
      "radius" : 15
    }, {
      "radius" : 20
    }, {
      "radius" : 12
    }, {
      "radius" : 9
    }, {
      "radius" : 5
    }, {
      "radius" : 30
    }, {
      "radius" : 7
    }, {
      "radius" : 8
    }, {
      "radius" : 4
    }, {
      "radius" : 1
    }, {
      "radius" : 13
    }, {
      "radius" : 19
    }, {
      "radius" : 24
    }, {
      "radius" : 14
    }, {
      "radius" : 23
    }, {
      "radius" : 16
    }, {
      "radius" : 26
    }, {
      "radius" : 27
    }, {
      "radius" : 18
    }, {
      "radius" : 22
    }, {
      "radius" : 21
    }, {
      "radius" : 2
    }, {
      "radius" : 10
    }, {
      "radius" : 29
    }, {
      "radius" : 17
    }, {
      "radius" : 25
    }, {
      "radius" : 3
    }, {
      "radius" : 28
    }, {
      "radius" : 11
    }, {
      "radius" : 6
    } ]
  } ],
  "answerWorlds" : [ {
    "type" : "plm.universe.pancake.PancakeWorld",
    "@jsonId" : 5,
    "name" : "5 pancakes",
    "entities" : [ {
      "type" : "plm.universe.pancake.PancakeEntity",
      "name" : "Pancake Seller",
      "world" : 5,
      "inited" : true
    } ],
    "steps" : [ [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 6,
      "number" : 2,
      "oldNumber" : -1,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 7,
      "number" : 5,
      "oldNumber" : 2,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 8,
      "number" : 2,
      "oldNumber" : 5,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 9,
      "number" : 4,
      "oldNumber" : 2,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 10,
      "number" : 2,
      "oldNumber" : 4,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 11,
      "number" : 3,
      "oldNumber" : 2,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 12,
      "number" : 2,
      "oldNumber" : 3,
      "name" : "flipOperation"
    } ] ],
    "about" : "<!-- Please don't translate this file but l10n/missions/plm.pot (see https://github.com/oster/PLM/wiki/Working-on-translations) -->\n<h1>PancakeWorld</h1>\n\n<p>This universe is very simple, with only five functions provided.</p>\n\n<pre>int getStackSize()  </pre>\nReturns the size of the stack, that is the amount of pancakes it contains.\n\n<pre>int getPancakeRadius(int rank)  </pre>\nReturns the radius of the pancake passed as argument, with the rank of the top-most pancake being 0.\n\n<pre>boolean isPancakeUpsideDown(int rank)   </pre>\nReturns whether the pancake passed as argument upside-down, that is, if its burned side is on top. As usual, the top-most pancake is of rank 0.\n\n<pre>void flip(int amount)</pre>\nFlips the <code>amount</code> first pancakes composing the stack, from the top of it.\n\n<pre>boolean isSorted()   </pre>\nReturns whether the pancake stack is correctly sorted.\n\n<pre>boolean isSelected()   </pre>\nReturns whether the current world is selected in the graphical interface.  \n",
    "parameters" : null,
    "moveCount" : 7,
    "selected" : -1,
    "burnedWorld" : false,
    "pancakeStack" : [ {
      "radius" : 1
    }, {
      "radius" : 2
    }, {
      "radius" : 3
    }, {
      "radius" : 4
    }, {
      "radius" : 5
    } ]
  }, {
    "type" : "plm.universe.pancake.PancakeWorld",
    "@jsonId" : 13,
    "name" : "10 pancakes",
    "entities" : [ {
      "type" : "plm.universe.pancake.PancakeEntity",
      "name" : "Pancake Seller",
      "world" : 13,
      "inited" : true
    } ],
    "steps" : [ [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 14,
      "number" : 7,
      "oldNumber" : -1,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 15,
      "number" : 9,
      "oldNumber" : 7,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 16,
      "number" : 5,
      "oldNumber" : 9,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 17,
      "number" : 8,
      "oldNumber" : 5,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 18,
      "number" : 5,
      "oldNumber" : 8,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 19,
      "number" : 6,
      "oldNumber" : 5,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 20,
      "number" : 3,
      "oldNumber" : 6,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 21,
      "number" : 5,
      "oldNumber" : 3,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 22,
      "number" : 2,
      "oldNumber" : 5,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 23,
      "number" : 4,
      "oldNumber" : 2,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 24,
      "number" : 3,
      "oldNumber" : 4,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 25,
      "number" : 2,
      "oldNumber" : 3,
      "name" : "flipOperation"
    } ] ],
    "about" : "<!-- Please don't translate this file but l10n/missions/plm.pot (see https://github.com/oster/PLM/wiki/Working-on-translations) -->\n<h1>PancakeWorld</h1>\n\n<p>This universe is very simple, with only five functions provided.</p>\n\n<pre>int getStackSize()  </pre>\nReturns the size of the stack, that is the amount of pancakes it contains.\n\n<pre>int getPancakeRadius(int rank)  </pre>\nReturns the radius of the pancake passed as argument, with the rank of the top-most pancake being 0.\n\n<pre>boolean isPancakeUpsideDown(int rank)   </pre>\nReturns whether the pancake passed as argument upside-down, that is, if its burned side is on top. As usual, the top-most pancake is of rank 0.\n\n<pre>void flip(int amount)</pre>\nFlips the <code>amount</code> first pancakes composing the stack, from the top of it.\n\n<pre>boolean isSorted()   </pre>\nReturns whether the pancake stack is correctly sorted.\n\n<pre>boolean isSelected()   </pre>\nReturns whether the current world is selected in the graphical interface.  \n",
    "parameters" : null,
    "moveCount" : 12,
    "selected" : -1,
    "burnedWorld" : false,
    "pancakeStack" : [ {
      "radius" : 1
    }, {
      "radius" : 2
    }, {
      "radius" : 3
    }, {
      "radius" : 4
    }, {
      "radius" : 5
    }, {
      "radius" : 6
    }, {
      "radius" : 7
    }, {
      "radius" : 8
    }, {
      "radius" : 9
    }, {
      "radius" : 10
    } ]
  }, {
    "type" : "plm.universe.pancake.PancakeWorld",
    "@jsonId" : 26,
    "name" : "15 pancakes",
    "entities" : [ {
      "type" : "plm.universe.pancake.PancakeEntity",
      "name" : "Pancake Seller",
      "world" : 26,
      "inited" : true
    } ],
    "steps" : [ [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 27,
      "number" : 6,
      "oldNumber" : -1,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 28,
      "number" : 15,
      "oldNumber" : 6,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 29,
      "number" : 8,
      "oldNumber" : 15,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 30,
      "number" : 14,
      "oldNumber" : 8,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 31,
      "number" : 10,
      "oldNumber" : 14,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 32,
      "number" : 13,
      "oldNumber" : 10,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 33,
      "number" : 7,
      "oldNumber" : 13,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 34,
      "number" : 11,
      "oldNumber" : 7,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 35,
      "number" : 5,
      "oldNumber" : 11,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 36,
      "number" : 10,
      "oldNumber" : 5,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 37,
      "number" : 7,
      "oldNumber" : 10,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 38,
      "number" : 9,
      "oldNumber" : 7,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 39,
      "number" : 2,
      "oldNumber" : 9,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 40,
      "number" : 7,
      "oldNumber" : 2,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 41,
      "number" : 4,
      "oldNumber" : 7,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 42,
      "number" : 6,
      "oldNumber" : 4,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 43,
      "number" : 4,
      "oldNumber" : 6,
      "name" : "flipOperation"
    } ] ],
    "about" : "<!-- Please don't translate this file but l10n/missions/plm.pot (see https://github.com/oster/PLM/wiki/Working-on-translations) -->\n<h1>PancakeWorld</h1>\n\n<p>This universe is very simple, with only five functions provided.</p>\n\n<pre>int getStackSize()  </pre>\nReturns the size of the stack, that is the amount of pancakes it contains.\n\n<pre>int getPancakeRadius(int rank)  </pre>\nReturns the radius of the pancake passed as argument, with the rank of the top-most pancake being 0.\n\n<pre>boolean isPancakeUpsideDown(int rank)   </pre>\nReturns whether the pancake passed as argument upside-down, that is, if its burned side is on top. As usual, the top-most pancake is of rank 0.\n\n<pre>void flip(int amount)</pre>\nFlips the <code>amount</code> first pancakes composing the stack, from the top of it.\n\n<pre>boolean isSorted()   </pre>\nReturns whether the pancake stack is correctly sorted.\n\n<pre>boolean isSelected()   </pre>\nReturns whether the current world is selected in the graphical interface.  \n",
    "parameters" : null,
    "moveCount" : 17,
    "selected" : -1,
    "burnedWorld" : false,
    "pancakeStack" : [ {
      "radius" : 1
    }, {
      "radius" : 2
    }, {
      "radius" : 3
    }, {
      "radius" : 4
    }, {
      "radius" : 5
    }, {
      "radius" : 6
    }, {
      "radius" : 7
    }, {
      "radius" : 8
    }, {
      "radius" : 9
    }, {
      "radius" : 10
    }, {
      "radius" : 11
    }, {
      "radius" : 12
    }, {
      "radius" : 13
    }, {
      "radius" : 14
    }, {
      "radius" : 15
    } ]
  }, {
    "type" : "plm.universe.pancake.PancakeWorld",
    "@jsonId" : 44,
    "name" : "30 pancakes",
    "entities" : [ {
      "type" : "plm.universe.pancake.PancakeEntity",
      "name" : "Pancake Seller",
      "world" : 44,
      "inited" : true
    } ],
    "steps" : [ [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 45,
      "number" : 6,
      "oldNumber" : -1,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 46,
      "number" : 30,
      "oldNumber" : 6,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 47,
      "number" : 7,
      "oldNumber" : 30,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 48,
      "number" : 29,
      "oldNumber" : 7,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 49,
      "number" : 25,
      "oldNumber" : 29,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 50,
      "number" : 28,
      "oldNumber" : 25,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 51,
      "number" : 20,
      "oldNumber" : 28,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 52,
      "number" : 27,
      "oldNumber" : 20,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 53,
      "number" : 9,
      "oldNumber" : 27,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 54,
      "number" : 25,
      "oldNumber" : 9,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 55,
      "number" : 4,
      "oldNumber" : 25,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 56,
      "number" : 24,
      "oldNumber" : 4,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 57,
      "number" : 22,
      "oldNumber" : 24,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 58,
      "number" : 23,
      "oldNumber" : 22,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 59,
      "number" : 4,
      "oldNumber" : 23,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 60,
      "number" : 22,
      "oldNumber" : 4,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 61,
      "number" : 18,
      "oldNumber" : 22,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 62,
      "number" : 21,
      "oldNumber" : 18,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 63,
      "number" : 12,
      "oldNumber" : 21,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 64,
      "number" : 20,
      "oldNumber" : 12,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 65,
      "number" : 13,
      "oldNumber" : 20,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 66,
      "number" : 19,
      "oldNumber" : 13,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 67,
      "number" : 15,
      "oldNumber" : 19,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 68,
      "number" : 18,
      "oldNumber" : 15,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 69,
      "number" : 3,
      "oldNumber" : 18,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 70,
      "number" : 17,
      "oldNumber" : 3,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 71,
      "number" : 15,
      "oldNumber" : 17,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 72,
      "number" : 16,
      "oldNumber" : 15,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 73,
      "number" : 14,
      "oldNumber" : 16,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 74,
      "number" : 5,
      "oldNumber" : 14,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 75,
      "number" : 13,
      "oldNumber" : 5,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 76,
      "number" : 12,
      "oldNumber" : 13,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 77,
      "number" : 8,
      "oldNumber" : 12,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 78,
      "number" : 11,
      "oldNumber" : 8,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 79,
      "number" : 9,
      "oldNumber" : 11,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 80,
      "number" : 10,
      "oldNumber" : 9,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 81,
      "number" : 2,
      "oldNumber" : 10,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 82,
      "number" : 9,
      "oldNumber" : 2,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 83,
      "number" : 3,
      "oldNumber" : 9,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 84,
      "number" : 8,
      "oldNumber" : 3,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 85,
      "number" : 6,
      "oldNumber" : 8,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 86,
      "number" : 2,
      "oldNumber" : 6,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 87,
      "number" : 4,
      "oldNumber" : 2,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 88,
      "number" : 3,
      "oldNumber" : 4,
      "name" : "flipOperation"
    } ], [ {
      "type" : "plm.universe.pancake.operations.FlipOperation",
      "@jsonId" : 89,
      "number" : 2,
      "oldNumber" : 3,
      "name" : "flipOperation"
    } ] ],
    "about" : "<!-- Please don't translate this file but l10n/missions/plm.pot (see https://github.com/oster/PLM/wiki/Working-on-translations) -->\n<h1>PancakeWorld</h1>\n\n<p>This universe is very simple, with only five functions provided.</p>\n\n<pre>int getStackSize()  </pre>\nReturns the size of the stack, that is the amount of pancakes it contains.\n\n<pre>int getPancakeRadius(int rank)  </pre>\nReturns the radius of the pancake passed as argument, with the rank of the top-most pancake being 0.\n\n<pre>boolean isPancakeUpsideDown(int rank)   </pre>\nReturns whether the pancake passed as argument upside-down, that is, if its burned side is on top. As usual, the top-most pancake is of rank 0.\n\n<pre>void flip(int amount)</pre>\nFlips the <code>amount</code> first pancakes composing the stack, from the top of it.\n\n<pre>boolean isSorted()   </pre>\nReturns whether the pancake stack is correctly sorted.\n\n<pre>boolean isSelected()   </pre>\nReturns whether the current world is selected in the graphical interface.  \n",
    "parameters" : null,
    "moveCount" : 45,
    "selected" : -1,
    "burnedWorld" : false,
    "pancakeStack" : [ {
      "radius" : 1
    }, {
      "radius" : 2
    }, {
      "radius" : 3
    }, {
      "radius" : 4
    }, {
      "radius" : 5
    }, {
      "radius" : 6
    }, {
      "radius" : 7
    }, {
      "radius" : 8
    }, {
      "radius" : 9
    }, {
      "radius" : 10
    }, {
      "radius" : 11
    }, {
      "radius" : 12
    }, {
      "radius" : 13
    }, {
      "radius" : 14
    }, {
      "radius" : 15
    }, {
      "radius" : 16
    }, {
      "radius" : 17
    }, {
      "radius" : 18
    }, {
      "radius" : 19
    }, {
      "radius" : 20
    }, {
      "radius" : 21
    }, {
      "radius" : 22
    }, {
      "radius" : 23
    }, {
      "radius" : 24
    }, {
      "radius" : 25
    }, {
      "radius" : 26
    }, {
      "radius" : 27
    }, {
      "radius" : 28
    }, {
      "radius" : 29
    }, {
      "radius" : 30
    } ]
  } ] 
}