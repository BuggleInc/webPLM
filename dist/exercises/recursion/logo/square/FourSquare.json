{
  "id" : "FourSquare",
  "name" : "FourSquare",
  "tabName" : "FourSquare",
  "defaultSourceFiles" : {
    "Java" : {
      "name" : "FourSquare",
      "body" : "public void run() {\n}\n",
      "template" : "$package   import plm.universe.turtles.Turtle;  public class FourSquare extends Turtle { $body } ",
      "offset" : 1,
      "correction" : "$package \n\nimport plm.universe.turtles.Turtle;\n\npublic class FourSquare extends Turtle {\n\n\t/* BEGIN TEMPLATE */\n\tpublic void run() {\n\t\t/* BEGIN SOLUTION */\n        addSizeHint(90,100, 90,200);\n\n\t\tfor (int i = 0; i < 4; i++) {\n\t\t\tsquare();\n\t\t\tright(90);\n\t\t}\n\t}\n\tpublic void square() {\n\t\tfor (int i = 0; i < 4; i++) {\n\t\t\tforward(100);\n\t\t\tright(90);\n\t\t}\n\t\t/* END SOLUTION */\n\t}\n\t/* END TEMPLATE */\n}\n",
      "error" : "Error"
    },
    "Scala" : {
      "name" : "FourSquare",
      "body" : "override def run() {\n}\n",
      "template" : "$package \n\nimport plm.universe.turtles.Turtle;\n\nclass FourSquare extends Turtle {\n$body\n}\n",
      "offset" : 5,
      "correction" : "$package \n\nimport plm.universe.turtles.Turtle;\n\nclass FourSquare extends Turtle {\n\n\t/* BEGIN TEMPLATE */\n\toverride def run() {\n\t\t/* BEGIN SOLUTION */\n\t\tfor (i <- 1 to 4) {\n\t\t\tsquare();\n\t\t\tright(90);\n\t\t}\n\t}\n\tdef square() {\n\t\tfor (i <- 1 to 4) {\n\t\t\tforward(100);\n\t\t\tright(90);\n\t\t}\n\t\t/* END SOLUTION */\n\t}\n\t/* END TEMPLATE */\n}\n",
      "error" : "Error"
    },
    "Python" : {
      "name" : "FourSquare",
      "body" : "",
      "template" : "$body\n",
      "offset" : 1,
      "correction" : "# BEGIN TEMPLATE \n# BEGIN SOLUTION\ndef square():\n  for i in range(4):\n    forward(100)\n    right(90)\n\nfor i in range(4):\n  square()\n  right(90)\n# END SOLUTION\n# END TEMPLATE\n",
      "error" : "Error"
    }
  },
  "initialWorlds" : [ {
    "type" : "plm.universe.turtles.TurtleWorld",
    "@jsonId" : 1,
    "name" : "WhiteBoard",
    "width" : 400.0,
    "height" : 400.0,
    "entities" : [ {
      "type" : "plm.universe.turtles.Turtle",
      "name" : "Hawksbill",
      "x" : 200.0,
      "y" : 200.0,
      "world" : 1,
      "inited" : false,
      "color" : [ 0, 0, 0, 255 ],
      "direction" : 0.0
    } ],
    "steps" : [ ],
    "about" : "<!-- Please don't translate this file but l10n/missions/plm.pot (see https://github.com/oster/PLM/wiki/Working-on-translations) -->\n<h1>The universe of turtles</h1>\n\n<p>This is an adaptation of LOGO for the Programmer's Learning Machine.</p>\n\n<p>It is directly inspired from the work of the mathematician Seymour\nPapert in the 60's. Inspired from the swiss psycholog Jean Piaget, he came\nup with a learning method called LOGO to teach programming to young\nchilds. The world is full of turtles which leave a painting where they go\nand which respond to simple orders.</p>\n\n<h2>Functions to move the turtle</h2>\n\n<pre><code class=\"code-container\">void forward(double steps)\nvoid backward(double steps)</code></pre>\nMoves forward or backward of the requested amount of steps.\n\n<pre><code class=\"code-container\">void right(double angle)\nvoid left(double angle)</code></pre>\nTurns left or right of the given angle (in degrees).\n\n<pre><code class=\"code-container\">double getX()\ndouble getY()</code></pre>\nReturns the current position of the turtle. \nNote that the point (0,0) is on the top left corner, as it is often the case in Computer Science.  \n\n<pre><code class=\"code-container\">void setX(double x)\nvoid setY(double y)\nvoid setPos(double x, double y)</code></pre>\nTeleports the turtle to a new position (without leaving any trace).\n\n<pre><code class=\"code-container\">void moveTo(double x, double y)</code></pre>\nMoves the turtle to a new position.\n\n<pre><code class=\"code-container\">void circle(double radius)</code></pre>\nDraw a circle of the specified radius centered on the turtle.\n\n<pre><code class=\"code-container\">void hide()</code></pre>\nHides the turtle.\n\n<pre><code class=\"code-container\">void show()</code></pre>\nShows the turtle back.\n\n<pre><code class=\"code-container\">boolean isVisible()</code></pre>\nReturns whether the turtle is currently visible.\n\n<pre><code class=\"code-container\">void clear()</code></pre>\nRemoves any trail on the sheet.\n\n<pre><code class=\"code-container\">double getHeading()</code></pre>\nReturns the current heading of the turtle (in degrees).\n\n<pre><code class=\"code-container\">void setHeading(double angle)</code></pre>\nSets a new heading to the turtle (in degrees).\n\n<h2>Functions about the pen</h2>\n\n<pre><code class=\"code-container\">void penUp()</code></pre>\nMoves the pen up (turtles have pens, not brushes as buggles). The\nturtle will not leave any trace during its subsequent moves.\n\n<pre><code class=\"code-container\">void penDown()</code></pre>\nMoves the pen down. The turtle will leave a trace during its subsequent moves.\n\n<pre><code class=\"code-container\">boolean isPenDown()</code></pre>\nReturns the current pen position as a boolean.\n\n<pre><code class=\"code-container\">Color getColor()</code></pre>\nReturns the current pen color.\n\n<pre><code class=\"code-container\">void setColor(Color color)</code></pre>\nChanges the pen color.\n\n<h2>Other functions</h2>\n\n<pre><code class=\"code-container\">boolean isSelected()</code></pre>\nReturns whether the current turtle is selected in the graphical interface.\n\n<h2>Valid colors</h2>\n<table border=1>\n<tr><td>Name</td><td>Color</td></tr>\n<tr><td>Color.black</td>    <td BGCOLOR=\"#000000\">&nbsp;</td></tr>\n<tr><td>Color.blue</td>     <td BGCOLOR=\"#0000FF\">&nbsp;</td></tr>\n<tr><td>Color.cyan</td>     <td BGCOLOR=\"#00FFFF\">&nbsp;</td></tr>\n<tr><td>Color.darkGray</td> <td BGCOLOR=\"#404040\">&nbsp;</td></tr>\n<tr><td>Color.gray</td>     <td BGCOLOR=\"#808080\">&nbsp;</td></tr>\n<tr><td>Color.green</td>    <td BGCOLOR=\"#00FF00\">&nbsp;</td></tr>\n<tr><td>Color.lightGray</td><td BGCOLOR=\"#C0C0C0\">&nbsp;</td></tr>\n<tr><td>Color.magenta</td>  <td BGCOLOR=\"#FF00FF\">&nbsp;</td></tr>\n<tr><td>Color.orange</td>   <td BGCOLOR=\"#FFC800\">&nbsp;</td></tr>\n<tr><td>Color.pink</td>     <td BGCOLOR=\"#FFAFAF\">&nbsp;</td></tr>\n<tr><td>Color.red</td>      <td BGCOLOR=\"#FF0000\">&nbsp;</td></tr>\n<tr><td>Color.white</td>    <td BGCOLOR=\"#FFFFFF\">&nbsp;</td></tr>\n<tr><td>Color.yellow</td>   <td BGCOLOR=\"#FFFF00\">&nbsp;</td></tr>\n</table>\n\n",
    "parameters" : null,
    "shapes" : [ ],
    "sizeHints" : [ ]
  } ],
  "answerWorlds" : [ {
    "type" : "plm.universe.turtles.TurtleWorld",
    "@jsonId" : 2,
    "name" : "WhiteBoard",
    "width" : 400.0,
    "height" : 400.0,
    "entities" : [ {
      "type" : "plm.universe.turtles.Turtle",
      "name" : "Hawksbill",
      "world" : 2,
      "inited" : true,
      "color" : [ 0, 0, 0, 255 ],
      "x" : 199.9999999999999,
      "y" : 200.0,
      "direction" : 0.0
    } ],
    "steps" : [ [ {
      "type" : "plm.universe.turtles.operations.AddSizeHint",
      "@jsonId" : 3,
      "turtleID" : "Hawksbill",
      "x1" : 90,
      "y1" : 100,
      "x2" : 90,
      "y2" : 200,
      "text" : "100",
      "name" : "addSizeHint"
    }, {
      "type" : "plm.universe.turtles.operations.AddLine",
      "@jsonId" : 4,
      "turtleID" : "Hawksbill",
      "x1" : 200.0,
      "y1" : 200.0,
      "x2" : 300.0,
      "y2" : 200.0,
      "color" : [ 0, 0, 0, 255 ],
      "name" : "addLine"
    }, {
      "type" : "plm.universe.turtles.operations.MoveTurtle",
      "@jsonId" : 5,
      "turtleID" : "Hawksbill",
      "oldX" : 200.0,
      "oldY" : 200.0,
      "newX" : 300.0,
      "newY" : 200.0,
      "name" : "moveTurtle"
    } ], [ {
      "type" : "plm.universe.turtles.operations.RotateTurtle",
      "@jsonId" : 6,
      "turtleID" : "Hawksbill",
      "oldHeading" : 0.0,
      "newHeading" : 90.0,
      "name" : "rotateTurtle"
    } ], [ {
      "type" : "plm.universe.turtles.operations.AddLine",
      "@jsonId" : 7,
      "turtleID" : "Hawksbill",
      "x1" : 300.0,
      "y1" : 200.0,
      "x2" : 300.0,
      "y2" : 300.0,
      "color" : [ 0, 0, 0, 255 ],
      "name" : "addLine"
    }, {
      "type" : "plm.universe.turtles.operations.MoveTurtle",
      "@jsonId" : 8,
      "turtleID" : "Hawksbill",
      "oldX" : 300.0,
      "oldY" : 200.0,
      "newX" : 300.0,
      "newY" : 300.0,
      "name" : "moveTurtle"
    } ], [ {
      "type" : "plm.universe.turtles.operations.RotateTurtle",
      "@jsonId" : 9,
      "turtleID" : "Hawksbill",
      "oldHeading" : 90.0,
      "newHeading" : 180.0,
      "name" : "rotateTurtle"
    } ], [ {
      "type" : "plm.universe.turtles.operations.AddLine",
      "@jsonId" : 10,
      "turtleID" : "Hawksbill",
      "x1" : 300.0,
      "y1" : 300.0,
      "x2" : 200.0,
      "y2" : 300.0,
      "color" : [ 0, 0, 0, 255 ],
      "name" : "addLine"
    }, {
      "type" : "plm.universe.turtles.operations.MoveTurtle",
      "@jsonId" : 11,
      "turtleID" : "Hawksbill",
      "oldX" : 300.0,
      "oldY" : 300.0,
      "newX" : 200.0,
      "newY" : 300.0,
      "name" : "moveTurtle"
    } ], [ {
      "type" : "plm.universe.turtles.operations.RotateTurtle",
      "@jsonId" : 12,
      "turtleID" : "Hawksbill",
      "oldHeading" : 180.0,
      "newHeading" : 270.0,
      "name" : "rotateTurtle"
    } ], [ {
      "type" : "plm.universe.turtles.operations.AddLine",
      "@jsonId" : 13,
      "turtleID" : "Hawksbill",
      "x1" : 200.0,
      "y1" : 300.0,
      "x2" : 199.99999999999997,
      "y2" : 200.0,
      "color" : [ 0, 0, 0, 255 ],
      "name" : "addLine"
    }, {
      "type" : "plm.universe.turtles.operations.MoveTurtle",
      "@jsonId" : 14,
      "turtleID" : "Hawksbill",
      "oldX" : 200.0,
      "oldY" : 300.0,
      "newX" : 199.99999999999997,
      "newY" : 200.0,
      "name" : "moveTurtle"
    } ], [ {
      "type" : "plm.universe.turtles.operations.RotateTurtle",
      "@jsonId" : 15,
      "turtleID" : "Hawksbill",
      "oldHeading" : 270.0,
      "newHeading" : 360.0,
      "name" : "rotateTurtle"
    } ], [ {
      "type" : "plm.universe.turtles.operations.RotateTurtle",
      "@jsonId" : 16,
      "turtleID" : "Hawksbill",
      "oldHeading" : 0.0,
      "newHeading" : 90.0,
      "name" : "rotateTurtle"
    } ], [ {
      "type" : "plm.universe.turtles.operations.AddLine",
      "@jsonId" : 17,
      "turtleID" : "Hawksbill",
      "x1" : 199.99999999999997,
      "y1" : 200.0,
      "x2" : 199.99999999999997,
      "y2" : 300.0,
      "color" : [ 0, 0, 0, 255 ],
      "name" : "addLine"
    }, {
      "type" : "plm.universe.turtles.operations.MoveTurtle",
      "@jsonId" : 18,
      "turtleID" : "Hawksbill",
      "oldX" : 199.99999999999997,
      "oldY" : 200.0,
      "newX" : 199.99999999999997,
      "newY" : 300.0,
      "name" : "moveTurtle"
    } ], [ {
      "type" : "plm.universe.turtles.operations.RotateTurtle",
      "@jsonId" : 19,
      "turtleID" : "Hawksbill",
      "oldHeading" : 90.0,
      "newHeading" : 180.0,
      "name" : "rotateTurtle"
    } ], [ {
      "type" : "plm.universe.turtles.operations.AddLine",
      "@jsonId" : 20,
      "turtleID" : "Hawksbill",
      "x1" : 199.99999999999997,
      "y1" : 300.0,
      "x2" : 99.99999999999997,
      "y2" : 300.0,
      "color" : [ 0, 0, 0, 255 ],
      "name" : "addLine"
    }, {
      "type" : "plm.universe.turtles.operations.MoveTurtle",
      "@jsonId" : 21,
      "turtleID" : "Hawksbill",
      "oldX" : 199.99999999999997,
      "oldY" : 300.0,
      "newX" : 99.99999999999997,
      "newY" : 300.0,
      "name" : "moveTurtle"
    } ], [ {
      "type" : "plm.universe.turtles.operations.RotateTurtle",
      "@jsonId" : 22,
      "turtleID" : "Hawksbill",
      "oldHeading" : 180.0,
      "newHeading" : 270.0,
      "name" : "rotateTurtle"
    } ], [ {
      "type" : "plm.universe.turtles.operations.AddLine",
      "@jsonId" : 23,
      "turtleID" : "Hawksbill",
      "x1" : 99.99999999999997,
      "y1" : 300.0,
      "x2" : 99.99999999999996,
      "y2" : 200.0,
      "color" : [ 0, 0, 0, 255 ],
      "name" : "addLine"
    }, {
      "type" : "plm.universe.turtles.operations.MoveTurtle",
      "@jsonId" : 24,
      "turtleID" : "Hawksbill",
      "oldX" : 99.99999999999997,
      "oldY" : 300.0,
      "newX" : 99.99999999999996,
      "newY" : 200.0,
      "name" : "moveTurtle"
    } ], [ {
      "type" : "plm.universe.turtles.operations.RotateTurtle",
      "@jsonId" : 25,
      "turtleID" : "Hawksbill",
      "oldHeading" : 270.0,
      "newHeading" : 360.0,
      "name" : "rotateTurtle"
    } ], [ {
      "type" : "plm.universe.turtles.operations.AddLine",
      "@jsonId" : 26,
      "turtleID" : "Hawksbill",
      "x1" : 99.99999999999996,
      "y1" : 200.0,
      "x2" : 199.99999999999994,
      "y2" : 200.0,
      "color" : [ 0, 0, 0, 255 ],
      "name" : "addLine"
    }, {
      "type" : "plm.universe.turtles.operations.MoveTurtle",
      "@jsonId" : 27,
      "turtleID" : "Hawksbill",
      "oldX" : 99.99999999999996,
      "oldY" : 200.0,
      "newX" : 199.99999999999994,
      "newY" : 200.0,
      "name" : "moveTurtle"
    } ], [ {
      "type" : "plm.universe.turtles.operations.RotateTurtle",
      "@jsonId" : 28,
      "turtleID" : "Hawksbill",
      "oldHeading" : 0.0,
      "newHeading" : 90.0,
      "name" : "rotateTurtle"
    } ], [ {
      "type" : "plm.universe.turtles.operations.RotateTurtle",
      "@jsonId" : 29,
      "turtleID" : "Hawksbill",
      "oldHeading" : 90.0,
      "newHeading" : 180.0,
      "name" : "rotateTurtle"
    } ], [ {
      "type" : "plm.universe.turtles.operations.AddLine",
      "@jsonId" : 30,
      "turtleID" : "Hawksbill",
      "x1" : 199.99999999999994,
      "y1" : 200.0,
      "x2" : 99.99999999999994,
      "y2" : 200.0,
      "color" : [ 0, 0, 0, 255 ],
      "name" : "addLine"
    }, {
      "type" : "plm.universe.turtles.operations.MoveTurtle",
      "@jsonId" : 31,
      "turtleID" : "Hawksbill",
      "oldX" : 199.99999999999994,
      "oldY" : 200.0,
      "newX" : 99.99999999999994,
      "newY" : 200.0,
      "name" : "moveTurtle"
    } ], [ {
      "type" : "plm.universe.turtles.operations.RotateTurtle",
      "@jsonId" : 32,
      "turtleID" : "Hawksbill",
      "oldHeading" : 180.0,
      "newHeading" : 270.0,
      "name" : "rotateTurtle"
    } ], [ {
      "type" : "plm.universe.turtles.operations.AddLine",
      "@jsonId" : 33,
      "turtleID" : "Hawksbill",
      "x1" : 99.99999999999994,
      "y1" : 200.0,
      "x2" : 99.99999999999993,
      "y2" : 100.0,
      "color" : [ 0, 0, 0, 255 ],
      "name" : "addLine"
    }, {
      "type" : "plm.universe.turtles.operations.MoveTurtle",
      "@jsonId" : 34,
      "turtleID" : "Hawksbill",
      "oldX" : 99.99999999999994,
      "oldY" : 200.0,
      "newX" : 99.99999999999993,
      "newY" : 100.0,
      "name" : "moveTurtle"
    } ], [ {
      "type" : "plm.universe.turtles.operations.RotateTurtle",
      "@jsonId" : 35,
      "turtleID" : "Hawksbill",
      "oldHeading" : 270.0,
      "newHeading" : 360.0,
      "name" : "rotateTurtle"
    } ], [ {
      "type" : "plm.universe.turtles.operations.AddLine",
      "@jsonId" : 36,
      "turtleID" : "Hawksbill",
      "x1" : 99.99999999999993,
      "y1" : 100.0,
      "x2" : 199.99999999999994,
      "y2" : 100.0,
      "color" : [ 0, 0, 0, 255 ],
      "name" : "addLine"
    }, {
      "type" : "plm.universe.turtles.operations.MoveTurtle",
      "@jsonId" : 37,
      "turtleID" : "Hawksbill",
      "oldX" : 99.99999999999993,
      "oldY" : 100.0,
      "newX" : 199.99999999999994,
      "newY" : 100.0,
      "name" : "moveTurtle"
    } ], [ {
      "type" : "plm.universe.turtles.operations.RotateTurtle",
      "@jsonId" : 38,
      "turtleID" : "Hawksbill",
      "oldHeading" : 0.0,
      "newHeading" : 90.0,
      "name" : "rotateTurtle"
    } ], [ {
      "type" : "plm.universe.turtles.operations.AddLine",
      "@jsonId" : 39,
      "turtleID" : "Hawksbill",
      "x1" : 199.99999999999994,
      "y1" : 100.0,
      "x2" : 199.99999999999994,
      "y2" : 200.0,
      "color" : [ 0, 0, 0, 255 ],
      "name" : "addLine"
    }, {
      "type" : "plm.universe.turtles.operations.MoveTurtle",
      "@jsonId" : 40,
      "turtleID" : "Hawksbill",
      "oldX" : 199.99999999999994,
      "oldY" : 100.0,
      "newX" : 199.99999999999994,
      "newY" : 200.0,
      "name" : "moveTurtle"
    } ], [ {
      "type" : "plm.universe.turtles.operations.RotateTurtle",
      "@jsonId" : 41,
      "turtleID" : "Hawksbill",
      "oldHeading" : 90.0,
      "newHeading" : 180.0,
      "name" : "rotateTurtle"
    } ], [ {
      "type" : "plm.universe.turtles.operations.RotateTurtle",
      "@jsonId" : 42,
      "turtleID" : "Hawksbill",
      "oldHeading" : 180.0,
      "newHeading" : 270.0,
      "name" : "rotateTurtle"
    } ], [ {
      "type" : "plm.universe.turtles.operations.AddLine",
      "@jsonId" : 43,
      "turtleID" : "Hawksbill",
      "x1" : 199.99999999999994,
      "y1" : 200.0,
      "x2" : 199.99999999999991,
      "y2" : 100.0,
      "color" : [ 0, 0, 0, 255 ],
      "name" : "addLine"
    }, {
      "type" : "plm.universe.turtles.operations.MoveTurtle",
      "@jsonId" : 44,
      "turtleID" : "Hawksbill",
      "oldX" : 199.99999999999994,
      "oldY" : 200.0,
      "newX" : 199.99999999999991,
      "newY" : 100.0,
      "name" : "moveTurtle"
    } ], [ {
      "type" : "plm.universe.turtles.operations.RotateTurtle",
      "@jsonId" : 45,
      "turtleID" : "Hawksbill",
      "oldHeading" : 270.0,
      "newHeading" : 360.0,
      "name" : "rotateTurtle"
    } ], [ {
      "type" : "plm.universe.turtles.operations.AddLine",
      "@jsonId" : 46,
      "turtleID" : "Hawksbill",
      "x1" : 199.99999999999991,
      "y1" : 100.0,
      "x2" : 299.9999999999999,
      "y2" : 100.0,
      "color" : [ 0, 0, 0, 255 ],
      "name" : "addLine"
    }, {
      "type" : "plm.universe.turtles.operations.MoveTurtle",
      "@jsonId" : 47,
      "turtleID" : "Hawksbill",
      "oldX" : 199.99999999999991,
      "oldY" : 100.0,
      "newX" : 299.9999999999999,
      "newY" : 100.0,
      "name" : "moveTurtle"
    } ], [ {
      "type" : "plm.universe.turtles.operations.RotateTurtle",
      "@jsonId" : 48,
      "turtleID" : "Hawksbill",
      "oldHeading" : 0.0,
      "newHeading" : 90.0,
      "name" : "rotateTurtle"
    } ], [ {
      "type" : "plm.universe.turtles.operations.AddLine",
      "@jsonId" : 49,
      "turtleID" : "Hawksbill",
      "x1" : 299.9999999999999,
      "y1" : 100.0,
      "x2" : 299.9999999999999,
      "y2" : 200.0,
      "color" : [ 0, 0, 0, 255 ],
      "name" : "addLine"
    }, {
      "type" : "plm.universe.turtles.operations.MoveTurtle",
      "@jsonId" : 50,
      "turtleID" : "Hawksbill",
      "oldX" : 299.9999999999999,
      "oldY" : 100.0,
      "newX" : 299.9999999999999,
      "newY" : 200.0,
      "name" : "moveTurtle"
    } ], [ {
      "type" : "plm.universe.turtles.operations.RotateTurtle",
      "@jsonId" : 51,
      "turtleID" : "Hawksbill",
      "oldHeading" : 90.0,
      "newHeading" : 180.0,
      "name" : "rotateTurtle"
    } ], [ {
      "type" : "plm.universe.turtles.operations.AddLine",
      "@jsonId" : 52,
      "turtleID" : "Hawksbill",
      "x1" : 299.9999999999999,
      "y1" : 200.0,
      "x2" : 199.9999999999999,
      "y2" : 200.0,
      "color" : [ 0, 0, 0, 255 ],
      "name" : "addLine"
    }, {
      "type" : "plm.universe.turtles.operations.MoveTurtle",
      "@jsonId" : 53,
      "turtleID" : "Hawksbill",
      "oldX" : 299.9999999999999,
      "oldY" : 200.0,
      "newX" : 199.9999999999999,
      "newY" : 200.0,
      "name" : "moveTurtle"
    } ], [ {
      "type" : "plm.universe.turtles.operations.RotateTurtle",
      "@jsonId" : 54,
      "turtleID" : "Hawksbill",
      "oldHeading" : 180.0,
      "newHeading" : 270.0,
      "name" : "rotateTurtle"
    } ], [ {
      "type" : "plm.universe.turtles.operations.RotateTurtle",
      "@jsonId" : 55,
      "turtleID" : "Hawksbill",
      "oldHeading" : 270.0,
      "newHeading" : 360.0,
      "name" : "rotateTurtle"
    } ] ],
    "about" : "<!-- Please don't translate this file but l10n/missions/plm.pot (see https://github.com/oster/PLM/wiki/Working-on-translations) -->\n<h1>The universe of turtles</h1>\n\n<p>This is an adaptation of LOGO for the Programmer's Learning Machine.</p>\n\n<p>It is directly inspired from the work of the mathematician Seymour\nPapert in the 60's. Inspired from the swiss psycholog Jean Piaget, he came\nup with a learning method called LOGO to teach programming to young\nchilds. The world is full of turtles which leave a painting where they go\nand which respond to simple orders.</p>\n\n<h2>Functions to move the turtle</h2>\n\n<pre><code class=\"code-container\">void forward(double steps)\nvoid backward(double steps)</code></pre>\nMoves forward or backward of the requested amount of steps.\n\n<pre><code class=\"code-container\">void right(double angle)\nvoid left(double angle)</code></pre>\nTurns left or right of the given angle (in degrees).\n\n<pre><code class=\"code-container\">double getX()\ndouble getY()</code></pre>\nReturns the current position of the turtle. \nNote that the point (0,0) is on the top left corner, as it is often the case in Computer Science.  \n\n<pre><code class=\"code-container\">void setX(double x)\nvoid setY(double y)\nvoid setPos(double x, double y)</code></pre>\nTeleports the turtle to a new position (without leaving any trace).\n\n<pre><code class=\"code-container\">void moveTo(double x, double y)</code></pre>\nMoves the turtle to a new position.\n\n<pre><code class=\"code-container\">void circle(double radius)</code></pre>\nDraw a circle of the specified radius centered on the turtle.\n\n<pre><code class=\"code-container\">void hide()</code></pre>\nHides the turtle.\n\n<pre><code class=\"code-container\">void show()</code></pre>\nShows the turtle back.\n\n<pre><code class=\"code-container\">boolean isVisible()</code></pre>\nReturns whether the turtle is currently visible.\n\n<pre><code class=\"code-container\">void clear()</code></pre>\nRemoves any trail on the sheet.\n\n<pre><code class=\"code-container\">double getHeading()</code></pre>\nReturns the current heading of the turtle (in degrees).\n\n<pre><code class=\"code-container\">void setHeading(double angle)</code></pre>\nSets a new heading to the turtle (in degrees).\n\n<h2>Functions about the pen</h2>\n\n<pre><code class=\"code-container\">void penUp()</code></pre>\nMoves the pen up (turtles have pens, not brushes as buggles). The\nturtle will not leave any trace during its subsequent moves.\n\n<pre><code class=\"code-container\">void penDown()</code></pre>\nMoves the pen down. The turtle will leave a trace during its subsequent moves.\n\n<pre><code class=\"code-container\">boolean isPenDown()</code></pre>\nReturns the current pen position as a boolean.\n\n<pre><code class=\"code-container\">Color getColor()</code></pre>\nReturns the current pen color.\n\n<pre><code class=\"code-container\">void setColor(Color color)</code></pre>\nChanges the pen color.\n\n<h2>Other functions</h2>\n\n<pre><code class=\"code-container\">boolean isSelected()</code></pre>\nReturns whether the current turtle is selected in the graphical interface.\n\n<h2>Valid colors</h2>\n<table border=1>\n<tr><td>Name</td><td>Color</td></tr>\n<tr><td>Color.black</td>    <td BGCOLOR=\"#000000\">&nbsp;</td></tr>\n<tr><td>Color.blue</td>     <td BGCOLOR=\"#0000FF\">&nbsp;</td></tr>\n<tr><td>Color.cyan</td>     <td BGCOLOR=\"#00FFFF\">&nbsp;</td></tr>\n<tr><td>Color.darkGray</td> <td BGCOLOR=\"#404040\">&nbsp;</td></tr>\n<tr><td>Color.gray</td>     <td BGCOLOR=\"#808080\">&nbsp;</td></tr>\n<tr><td>Color.green</td>    <td BGCOLOR=\"#00FF00\">&nbsp;</td></tr>\n<tr><td>Color.lightGray</td><td BGCOLOR=\"#C0C0C0\">&nbsp;</td></tr>\n<tr><td>Color.magenta</td>  <td BGCOLOR=\"#FF00FF\">&nbsp;</td></tr>\n<tr><td>Color.orange</td>   <td BGCOLOR=\"#FFC800\">&nbsp;</td></tr>\n<tr><td>Color.pink</td>     <td BGCOLOR=\"#FFAFAF\">&nbsp;</td></tr>\n<tr><td>Color.red</td>      <td BGCOLOR=\"#FF0000\">&nbsp;</td></tr>\n<tr><td>Color.white</td>    <td BGCOLOR=\"#FFFFFF\">&nbsp;</td></tr>\n<tr><td>Color.yellow</td>   <td BGCOLOR=\"#FFFF00\">&nbsp;</td></tr>\n</table>\n\n",
    "parameters" : null,
    "shapes" : [ {
      "type" : "plm.universe.turtles.Line",
      "x1" : 200.0,
      "y1" : 200.0,
      "x2" : 300.0,
      "y2" : 200.0,
      "color" : [ 0, 0, 0, 255 ],
      "length" : 100.0
    }, {
      "type" : "plm.universe.turtles.Line",
      "x1" : 300.0,
      "y1" : 200.0,
      "x2" : 300.0,
      "y2" : 300.0,
      "color" : [ 0, 0, 0, 255 ],
      "length" : 100.0
    }, {
      "type" : "plm.universe.turtles.Line",
      "x1" : 200.0,
      "y1" : 300.0,
      "x2" : 300.0,
      "y2" : 300.0,
      "color" : [ 0, 0, 0, 255 ],
      "length" : 100.0
    }, {
      "type" : "plm.universe.turtles.Line",
      "x1" : 199.99999999999997,
      "y1" : 200.0,
      "x2" : 200.0,
      "y2" : 300.0,
      "color" : [ 0, 0, 0, 255 ],
      "length" : 100.0
    }, {
      "type" : "plm.universe.turtles.Line",
      "x1" : 199.99999999999997,
      "y1" : 200.0,
      "x2" : 199.99999999999997,
      "y2" : 300.0,
      "color" : [ 0, 0, 0, 255 ],
      "length" : 100.0
    }, {
      "type" : "plm.universe.turtles.Line",
      "x1" : 99.99999999999997,
      "y1" : 300.0,
      "x2" : 199.99999999999997,
      "y2" : 300.0,
      "color" : [ 0, 0, 0, 255 ],
      "length" : 100.0
    }, {
      "type" : "plm.universe.turtles.Line",
      "x1" : 99.99999999999996,
      "y1" : 200.0,
      "x2" : 99.99999999999997,
      "y2" : 300.0,
      "color" : [ 0, 0, 0, 255 ],
      "length" : 100.0
    }, {
      "type" : "plm.universe.turtles.Line",
      "x1" : 99.99999999999996,
      "y1" : 200.0,
      "x2" : 199.99999999999994,
      "y2" : 200.0,
      "color" : [ 0, 0, 0, 255 ],
      "length" : 99.99999999999999
    }, {
      "type" : "plm.universe.turtles.Line",
      "x1" : 99.99999999999994,
      "y1" : 200.0,
      "x2" : 199.99999999999994,
      "y2" : 200.0,
      "color" : [ 0, 0, 0, 255 ],
      "length" : 100.0
    }, {
      "type" : "plm.universe.turtles.Line",
      "x1" : 99.99999999999993,
      "y1" : 100.0,
      "x2" : 99.99999999999994,
      "y2" : 200.0,
      "color" : [ 0, 0, 0, 255 ],
      "length" : 100.0
    }, {
      "type" : "plm.universe.turtles.Line",
      "x1" : 99.99999999999993,
      "y1" : 100.0,
      "x2" : 199.99999999999994,
      "y2" : 100.0,
      "color" : [ 0, 0, 0, 255 ],
      "length" : 100.00000000000001
    }, {
      "type" : "plm.universe.turtles.Line",
      "x1" : 199.99999999999994,
      "y1" : 100.0,
      "x2" : 199.99999999999994,
      "y2" : 200.0,
      "color" : [ 0, 0, 0, 255 ],
      "length" : 100.0
    }, {
      "type" : "plm.universe.turtles.Line",
      "x1" : 199.99999999999991,
      "y1" : 100.0,
      "x2" : 199.99999999999994,
      "y2" : 200.0,
      "color" : [ 0, 0, 0, 255 ],
      "length" : 100.0
    }, {
      "type" : "plm.universe.turtles.Line",
      "x1" : 199.99999999999991,
      "y1" : 100.0,
      "x2" : 299.9999999999999,
      "y2" : 100.0,
      "color" : [ 0, 0, 0, 255 ],
      "length" : 99.99999999999997
    }, {
      "type" : "plm.universe.turtles.Line",
      "x1" : 299.9999999999999,
      "y1" : 100.0,
      "x2" : 299.9999999999999,
      "y2" : 200.0,
      "color" : [ 0, 0, 0, 255 ],
      "length" : 100.0
    }, {
      "type" : "plm.universe.turtles.Line",
      "x1" : 199.9999999999999,
      "y1" : 200.0,
      "x2" : 299.9999999999999,
      "y2" : 200.0,
      "color" : [ 0, 0, 0, 255 ],
      "length" : 100.0
    } ],
    "sizeHints" : [ {
      "type" : "plm.universe.turtles.SizeHint",
      "x1" : 90.0,
      "y1" : 100.0,
      "x2" : 90.0,
      "y2" : 200.0,
      "text" : "100"
    } ]
  } ],
  "instructions" : {
    "en" : "<!-- Please don't translate this file but l10n/missions/plm.pot (see https://github.com/oster/PLM/wiki/Working-on-translations) -->\n<h2>The small cousines of Buggles</h2>\n<p>\nToday, we will meet the small cousines of the buggles: the turtles. In fact,\nturtles are much olders than the buggles. They were invented in the 70's by\na scientific from MIT called Seymour Papert to help teaching programming,\nand the buggles are a variation on the idea invented by Lyn Turbak from\nWellesley College later.\n</p>\n<p>Turtles are thus a bit like buggles, but smaller. Just like buggles, you can\norder them to move forward, to turn, to move backward, etc. Just like\nbuggles, they leave a line on their path when they move (but the line is\nmuch smaller).</p>\n\n<p>The main difference is that where buggles can only move of right angles,\nturtles can move of any arbitrary angles specified by a real number (a\ndouble). This gives them much more liberty in their movings. The buggles can\ndo several other tricks, like reading and writting messages, picking or\ndropping objects, and there is sometimes walls in their worlds (but all this\nis completely above the capacities of turtles).</p>\n\n<p>From a practical point of view, most of the methods you knew about buggles\nstill work with turtles, with some minor adaptations. In particular, the\n<code>forward()</code> method takes the amount of steps to do not as an integer, \nbut as a [!python]point number[/!][!java|scala|c]double[/!]\n(see \"About this world\" for more details).</p>\n\n[!java|scala|c]\n<h3>Doubles? But what is it?</h3>\nIt's simply a point number. Example:\n<pre>\ndouble x = 3.72;\nx + 1.234 // Value = 4.954\nx + 2. // Value = 5.72 (2. means 2.0)\nx + 2 // [!java|c]Value = 5.72 (2 automatically converted to 2.0)[/!][!scala]Type error (+ operator don't mix Double and Int); manual conversion mandatory[/!]\nx * 2. // Value = 7.44 \nx / 2. // Value = 1.86 \n[!java|c](int) x[/!][!scala]x.asInstanceOf[Int][/!] // Value = 1 (“casting to int”, converted to integer by truncating)\nMath.round(x) // Value = 2 (1.86 rounded to nearest integer)\nMath.floor(x) // Value = 1 (1.86 rounded toward minus infinity)\nMath.floor(-5.12) // Value = -6 (rounded toward minus infinity)\nMath.ceiling(x) // Value = 2 (1.86 rounded toward plus infinity)\nMath.ceiling(-5.12) // Value = -5 (rounded toward plus infinity)\n[!java|c](double) 17[/!][!scala]17.asInstanceOf[Double][/!] // Value = 17.0 (“casted to double”, converted to double)\n</pre>\n[/!]\n\n<h3>Goal of this exercise</h3>\n<p>Even if this is the first exercise on the recursivity lesson, the code you\nhave to write is not recursive. The goal is to get familiar with the turtle\nworld before getting on serious matter.</p>\n\n<p>You must reproduce a simple geometrical painting constituted of four 100\nsteps long squares (see the objective world for more details). It is\nobviously a good idea to write a method to draw a square, and then use it in\nyour code.</p>\n",
    "fr" : "\n<!-- Please don't translate this file but l10n/missions/plm.pot (see https://github.com/oster/PLM/wiki/Working-on-translations) -->\n<h2>Les petites cousines des Buggles</h2>\n<p>\nAujourd'hui, nous allons faire la connaissance des petites cousines des\nbuggles : les tortues. En fait, les tortues sont bien plus vieilles que les\nbuggles. Elles ont été inventées dans les années 70 par un scientifique du\nMIT nommé Seymour Papert pour aider à l'enseignement de la programmation, et\nles buggles sont une variation sur le thème inventée par Lyn Turbak du\nWellesley College plus tard.\n</p>\n<p>Les tortues sont donc un peu comme les buggles, en plus petit.  Comme les\nbuggles, vous pouvez leur demander d'avancer, de tourner, de reculer,\netc. Comme les buggles, elles laissent une trace sur leur passage quand\nelles avancent (simplement, le trait est bien plus fin).</p>\n\n<p>La principale différence est que là où les buggles ne peuvent tourner que de\nquarts de tour, les tortues peuvent tourner d'un angle quelconque précisé\npar un nombre réel (double). Cela leur donne bien plus de liberté dans leur\nmouvement. Les buggles savent faire plusieurs trucs qui échappent aux\ntortues, comme lire et écrire des messages sur le sol ou ramasser des\nobjets, et il y a parfois des murs dans leur univers, mais tout cela dépasse\ncomplètement les tortues.</p>\n\n<p>D'un point de vue pratique, la plupart des méthodes que vous connaissez à\npropos des buggles fonctionnent également avec les tortues, à quelques\nvariantes près. En particulier, la méthode <code>avance</code> prend en\nargument le nombre de pas donné comme un [!python]nombre à\nvirgule[/!][!java|scala|c]double[/!] (voir «Aide / À propos de ce monde»\ndans le menu pour plus de détails).</p>\n\n[!java|scala|c]\n<h3>Des doubles ? Mais qu'est ce que c'est ?</h3>\nC'est simplement un nombre à virgule. Exemple:\n<pre>\ndouble x = 3.72;\nx + 1.234 // Valeur = 4.954\nx + 2. // Valeur = 5.72 (2. signifie 2.0)\nx + 2 // [!java|c]Valeur = 5.72 (2 converti en 2.0 automatiquement)[/!][!scala]Erreur de typage (l'opérateur + operator ne mélange pas les Double avec les Int). Il faut convertir explicitement[/!]\nx * 2. // Valeur = 7.44\nx / 2. // Valeur = 1.86 (2 converti en 2.0 automatiquement)\n[!java|c](int) x[/!][!scala]x.asInstanceOf[Int][/!] // Valeur = 1 (“transtypage en int”, converti en entier en tronquant)\nMath.round(x) // Valeur = 2 (1.86 arrondi à l'entier le plus proche)\nMath.floor(x) // Valeur = 1 (1.86 arrondi en direction de moins l'infini)\nMath.floor(-5.12) // Vale = -6 (Arrondi en direction de moins l'infini)\nMath.ceiling(x) // Value = 2 (1.86 arrondi en direction de plus l'infini)\nMath.ceiling(-5.12) // Value = -5 (Arrondi en direction de plus l'infini)\n[!java|c](double) 17[/!][!scala]17.asInstanceOf[Double][/!] // Value = 17.0 (“transtypage en double”, converti en double)\n</pre>\n[/!]\n\n<h3>Objectif de l'exercice</h3>\n<p>Bien que ce soit le premier exercice de la leçon sur la récursivité, le code\nque vous devez écrire n'est pas récursif. L'objectif est de se familiariser\navec le monde des tortues avant d'attaquer les choses sérieuses.</p>\n\n<p>Vous devez reproduire une forme géométrique simple faite de quatre carrés de\nlongueur 100 de coté (voir le monde objectif pour plus de détails). C'est\nsans doute une bonne idée d'écrire une méthode pour faire un carré, et de la\nréutiliser lors de l'écriture de votre code.</p>\n"
  }
}