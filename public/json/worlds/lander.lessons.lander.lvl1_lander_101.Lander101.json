JsUndefined('initialWorlds' is undefined on object: {"id":"lander.lessons.lander.lvl1_lander_101.Lander101","instructions":"\r\n<!-- Please don't translate this file but l10n/missions/plm.pot (see https://github.com/oster/PLM/wiki/Working-on-translations) -->\r\n<h1>Se poser pour les nuls</h1>\r\n\r\n<p>Bravo ! Vous avez gagné dans une boîte de céréales un voyage (aller simple)\r\npour Mars. La NASA vous a même fourni un module d'excursion lunaire pour\r\nl'occasion, et c'est donc avec ce véhicule que vous voyagerez.</p>\r\n\r\n<p>Avant le décollage, vous devez vous entraîner sur simulateur aux bases de\r\nl'alunissage. Si tout se passe comme prévu, vous ne devriez pas avoir à\r\nvoler en mode manuel, mais mieux vaut prévenir que guérir, comme ils disent.</p>\r\n\r\n<p>Votre mission est de <b>poser le module avec une vitesse verticale\r\ninférieure à 10 m/s</b>. Il y a deux façons d'influer sur la trajectoire du\r\nmodule : en modifiant son angle, ou en réglant la poussée de son\r\nmoteur. Dans cette simulation, nous ne nous intéressons qu'à la poussée,\r\nexprimée en m/s².</p>\r\n\r\n<p>Vous devez écrire le code qui sera appellé tous les dixièmes\r\nde seconde pendant la simulation. Assurez vous que votre code ne dure pas\r\ntrop longtemps, et évitez en particulier les boucles <code>while</code>. Il\r\nfaut juste ajuster la poussée du moteur en utilisant la fonction\r\n<code>void setPousseeDesiree(int\r\npoussee)</code> où <code>poussee</code> est un\r\nentier entre 0 et 4 (représentant une poussée entre 0 m/s² et 4 m/s²). Vous\r\nne pouvez incrémenter ou décrémenter la poussée que de 1 entre deux pas de\r\nla simulation. Ainsi, si la poussée du moteur est actuellement de 2 et que\r\nvous demandez 4, vous n'aurez que 3 à la prochaine étape. Si vous demandez\r\nune valeur inférieure à 0 (ou supérieure à 4), tout se passera comme si vous\r\naviez demandé 0 (ou 4).</p>\r\n\r\n<p>Afin de prendre des décisions informées, vous pouvez demander des\r\ninformations sur l'état actuel du module. Dans cette simulation, vous ne\r\nserez probablement intéressé que par sa position verticale (accessible grâce\r\nà <code>double getY()</code>) et sa vitesse\r\nverticale (accessible grâce à <code>double\r\ngetVitesseY()</code>). Vous pouvez également demander\r\nla poussée actuelle du moteur (avec <code>int\r\ngetPoussee()</code>) si vous avez oublié ce que vous\r\navez demandé. Rappelez vous que la gravité martienne est de 3.711 m/s², cela\r\npeut vous être utile.</p>\r\n\r\n<p>Une dernière chose : le module est plutôt petit, et vous n'avez pas tant de\r\ncarburant que cela. À chaque pas de simulation, il consomme autant d'unité\r\nde carburant que la poussée actuelle du moteur. Si vous tombez en panne\r\nsèche, vous serez en chute libre alors attention ! Vous pouvez consulter le\r\nniveau du réservoir avec <code>int\r\ngetFuel()</code>.</p>\r\n\r\n<p>Bon courage !</p>\r\n","code":"","selectedWorldID":"Simple Terrain, Simple Configuration","api":"\r\n<!-- Please don't translate this file but l10n/missions/plm.pot (see https://github.com/oster/PLM/wiki/Working-on-translations) -->\r\n<h2>Alunisseur</h2>\r\n\r\n<p>Dans cet univers, vous contrôlez un module d'alunissage. À chaque pas de la\r\nsimulation, vous avez accès à la position du module, sa vitesse, son angle\r\net la poussée de son moteur. Vous devez alors décider de l'angle et de la\r\npoussée pour l'étape suivante. </p>\r\n\r\n<h2>Fonctions fournies</h2>\r\n\r\n<pre>double getX()\r\ndouble getY()</pre>\r\nRetourne la position en X et Y du module d'alunissage.\r\n<pre>double getVitesseX()\r\ndouble getVitesseY()</pre>\r\nObtenir les vitesses horizontale et verticale du module.\r\n\r\n<pre>double getAngle()\r\nvoid setAngleDesire(double angle)</pre>\r\nRetourne ou fixe l'angle du module d'alunissage.<br/>\r\nUn angle de O° dénote une position verticale, avec le sommet du module\r\ndirigé vers le haut. C'est l'angle avec lequel vous devez vous poser. Un\r\nangle positif indique que le module penche vers la gauche tandis qu'un angle\r\nnégatif indique au contraire qu'il penche à droite. Il est impossible de se\r\npencher à plus de ±90°, et on ne peut pas pencher le module de plus de ±5°\r\nen une fois.\r\n\r\n<pre>int getPoussee()\r\nvoid setPousseeDesiree(int poussée)</pre>\r\nRetourne ou fixe la poussée du module. <br/>Vous ne pouvez incrémenter ou décrémenter la poussée que d'une unité à\r\nchaque fois. Si votre poussée actuelle est de 2 et que vous demandez une\r\npoussée de 4, vous n'obtiendrez que 3 au prochain pas de temps. Si vous\r\ndemandez moins que 0 (ou plus que 4), tout se passera comme si vous\r\ndemandiez 0 (ou 4).\r\n\r\n<pre>int getFuel()</pre>\r\nObtient la quantité de fuel restant dans le réservoir. À chaque pas de\r\nsimulation, le module consomme entre 0 et 4 unités de fuel, en fonction de\r\nsa poussée. Une fois que vous avez utilisé tout votre carburant, vous êtes\r\nen chute libre alors prenez garde !\r\n\r\n<pre>List&lt;Point&gt; getSol()[! scala]:List[Point][/!]</pre>\r\nObtenir les points du sol de gauche à droite. Vous pouvez\r\nretrouver les coordonnées X et Y de chaque point avec les méthodes\r\ncorrespondantes de votre point : <code>p.x()</code> et\r\n<code>p.y()</code>. \r\n","programmingLanguages":[{"lang":"Java","icon":"/img/lang_java.png"},{"lang":"Scala","icon":"/img/lang_scala.png"},{"lang":"Python","icon":"/img/lang_python.png"}],"currentProgrammingLanguage":"Java","toolbox":null,"exception":"nonImplementedWorldException"})