JsUndefined('initialWorlds' is undefined on object: {"id":"lander.lessons.lander.lvl3_fly_the_lander.FlyTheLander","instructions":"\r\n<!-- Please don't translate this file but l10n/missions/plm.pot (see https://github.com/oster/PLM/wiki/Working-on-translations) -->\r\n<h1>Aux commandes du module</h1>\r\n\r\n<p>Après 30 jours à regarder des cailloux en mangeant des céréales, vous\r\ndécidez qu'il est temps d'aller explorer d'autres coins de cette planète.</p>\r\n\r\n<p>Vous volez un moment, avant de réaliser soudain que vous êtes presque à\r\ncourt d'essence. Le pilote automatique est malheureusement inutile dans ce\r\ngenre de situation périlleuse, et vous allez devoir vous poser en mode\r\nmanuel. Votre mission et de vous <b>poser sur une zone plate, avec une\r\nvitesse verticale inférieure à 10 m/s, une vitesse horizontale inférieure à\r\n5 m/s et un angle de 0°</b>.</p>\r\n\r\n<p>Vous devez définir deux fonctions : <code>void\r\ninitialize()</code> et <code>void\r\nstep()</code>. <code>initialize()</code> est appelée au moment où l'on\r\nappuie sur le bouton «Exécuter». Vous pouvez l'utiliser pour choisir une\r\nzone plate. Comme avant, <code>step()</code> est appelée tous les dixièmes\r\nde seconde pour vous permettre d'ajuster la poussée (avec la fonction\r\n<code>void setPousseedesiree(int\r\npoussee)</code>). Vous pouvez également contrôler\r\nl'angle du module avec la fonction <code>void\r\nsetAngleDesire(double angle)</code>. Un\r\nangle de O° dénote une position verticale, avec le sommet du module dirigé\r\nvers le haut. C'est l'angle avec lequel vous devez vous poser. Un angle\r\npositif indique que le module penche vers la gauche tandis qu'un angle\r\nnégatif indique au contraire qu'il penche à droite. Il est impossible de se\r\npencher à plus de ±90°, et on ne peut pas pencher le module de plus de ±5°\r\nen une fois.</p>\r\n\r\n<p>Comme dans les exercices précédents, <code>List&lt;Point&gt;\r\ngetSol()</code> retourne les points qui\r\ncomposent l'horizon. Le manuel de référence de votre module est disponible\r\ndans la documentation (Aide/À propos de ce monde).</p>\r\n\r\n<p>Comme d'habitude, votre programme doit se poser sans heurt dans toutes les\r\nsituations que nous avons rencontré jusqu'à présent, ainsi que dans ce\r\nnouveau cas.</p>\r\n\r\n<p>Bonne chance. Essayez de ne pas vous scratcher ;)</p>\r\n","code":"    public void initialize() {\r\n    }\r\n\r\n    public void step() {\r\n    }\r\n","selectedWorldID":"Simple Terrain, Challenging Configuration","api":"\r\n<!-- Please don't translate this file but l10n/missions/plm.pot (see https://github.com/oster/PLM/wiki/Working-on-translations) -->\r\n<h2>Alunisseur</h2>\r\n\r\n<p>Dans cet univers, vous contrôlez un module d'alunissage. À chaque pas de la\r\nsimulation, vous avez accès à la position du module, sa vitesse, son angle\r\net la poussée de son moteur. Vous devez alors décider de l'angle et de la\r\npoussée pour l'étape suivante. </p>\r\n\r\n<h2>Fonctions fournies</h2>\r\n\r\n<pre>double getX()\r\ndouble getY()</pre>\r\nRetourne la position en X et Y du module d'alunissage.\r\n<pre>double getVitesseX()\r\ndouble getVitesseY()</pre>\r\nObtenir les vitesses horizontale et verticale du module.\r\n\r\n<pre>double getAngle()\r\nvoid setAngleDesire(double angle)</pre>\r\nRetourne ou fixe l'angle du module d'alunissage.<br/>\r\nUn angle de O° dénote une position verticale, avec le sommet du module\r\ndirigé vers le haut. C'est l'angle avec lequel vous devez vous poser. Un\r\nangle positif indique que le module penche vers la gauche tandis qu'un angle\r\nnégatif indique au contraire qu'il penche à droite. Il est impossible de se\r\npencher à plus de ±90°, et on ne peut pas pencher le module de plus de ±5°\r\nen une fois.\r\n\r\n<pre>int getPoussee()\r\nvoid setPousseeDesiree(int poussée)</pre>\r\nRetourne ou fixe la poussée du module. <br/>Vous ne pouvez incrémenter ou décrémenter la poussée que d'une unité à\r\nchaque fois. Si votre poussée actuelle est de 2 et que vous demandez une\r\npoussée de 4, vous n'obtiendrez que 3 au prochain pas de temps. Si vous\r\ndemandez moins que 0 (ou plus que 4), tout se passera comme si vous\r\ndemandiez 0 (ou 4).\r\n\r\n<pre>int getFuel()</pre>\r\nObtient la quantité de fuel restant dans le réservoir. À chaque pas de\r\nsimulation, le module consomme entre 0 et 4 unités de fuel, en fonction de\r\nsa poussée. Une fois que vous avez utilisé tout votre carburant, vous êtes\r\nen chute libre alors prenez garde !\r\n\r\n<pre>List&lt;Point&gt; getSol()[! scala]:List[Point][/!]</pre>\r\nObtenir les points du sol de gauche à droite. Vous pouvez\r\nretrouver les coordonnées X et Y de chaque point avec les méthodes\r\ncorrespondantes de votre point : <code>p.x()</code> et\r\n<code>p.y()</code>. \r\n","programmingLanguages":[{"lang":"Java","icon":"/img/lang_java.png"},{"lang":"Scala","icon":"/img/lang_scala.png"},{"lang":"Python","icon":"/img/lang_python.png"}],"currentProgrammingLanguage":"Java","toolbox":null,"exception":"nonImplementedWorldException"})